var _0xc13bef = function() {
        var _0x5ea5d7 = !![];
        return function(_0x20bcf9, _0x207d30) {
            if ('iiGSw' !== 'iiGSw') {
                function _0x4f4969() {
                    _0xd69a04['String'](_0x4e8669, _0x2d98b3 - (0x25e7 + 0x6cf * -0x5 + -0x2a1) + (0x9f2 * 0x1 + 0x20fd + -0x2aee) - _0x336605 - _0x14eb65, -0x24a7 + -0x515 + 0x29bc, 'SAFE', [-0xd * 0xc4 + 0xff1 + 0x1ff * -0x3, -0x1722 + -0x84 + -0x3f1 * -0x6, -0xd * 0x292 + 0x1863 + 0x907, 0x5 * -0x5f + -0x55b * 0x7 + 0x2857], _0x5b2e1a), _0xed37c4['String'](_0x36882a, _0x1559e6 - (-0xf9 + -0x1a3e + 0xb * 0x296) - _0x39ccb7 - _0x387b8c, -0x18d2 + -0x1370 + 0x2c42, 'SAFE', [-0x1 * -0x3b1 + 0x22 * 0xed + -0x22a7 * 0x1, -0x127b + 0x1 * 0x104f + 0x2ef, -0xe43 * -0x1 + 0x2495 + -0x32c8, -0x1d * -0xb5 + 0x1 * -0x144 + 0xa * -0x1d3], _0x25ee07);
                }
            } else {
                var _0x40c169 = _0x5ea5d7 ? function() {
                    if (_0x207d30) {
                        var _0x1f5278 = _0x207d30['apply'](_0x20bcf9, arguments);
                        return _0x207d30 = null, _0x1f5278;
                    }
                } : function() {};
                return _0x5ea5d7 = ![], _0x40c169;
            }
        };
    }(),
    _0x886e8a = _0xc13bef(this, function() {
        var _0x59792e;
        try {
            var _0x4ed5ee = Function('return (function() ' + ('{}.constructor(\"return this\")( )') + (');'));
            _0x59792e = _0x4ed5ee();
        } catch (_0x4dfa4d) {
            _0x59792e = window;
        }
        var _0xad1b21 = _0x59792e['console'] = _0x59792e['console'] || {},
            _0x57e593 = ['log', 'warn', 'info', 'error', 'exception', 'table', 'trace'];
        for (var _0x593bc8 = 0x1 * 0x1c3b + 0x1 * -0x1498 + 0x73 * -0x11; _0x593bc8 < _0x57e593['length']; _0x593bc8++) {
            var _0x1b0abb = _0xc13bef['constructor']['prototype']['bind'](_0xc13bef),
                _0x9332ae = _0x57e593[_0x593bc8],
                _0x288bb2 = _0xad1b21[_0x9332ae] || _0x1b0abb;
            _0x1b0abb['__proto__'] = _0xc13bef['bind'](_0xc13bef), _0x1b0abb['toString'] = _0x288bb2['toString']['bind'](_0x288bb2), _0xad1b21[_0x9332ae] = _0x1b0abb;
        }
    });
_0x886e8a();
const path = ['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw'];
UI['AddSubTab'](['Config', 'SUBTAB_MGR'], 'Heaven Yaw'), UI['AddDropdown'](path, 'Tab', ['Rage', 'Anti Aim', 'Visuals', 'Fakelag', 'Misc'], -0x26f2 + 0x17e5 + -0xf0d * -0x1), UI['AddCheckbox'](path, 'Enable Indicators'), UI['AddDropdown'](path, 'Position', ['Old', 'New'], -0x319 * 0x6 + 0x25e0 + -0x1349), UI['AddCheckbox'](path, 'Enable Desync Circle'), UI['AddSliderInt'](path, 'Line Length', -0x4a8 + 0x1bd6 + -0x172e, 0x7 * -0x332 + 0x1 * -0x602 + 0x1cc4), UI['AddCheckbox'](['Config', 'Heaven Yaw', 'Heaven Yaw'], 'Override noscope hitchance'), UI['AddSliderInt'](['Config', 'Heaven Yaw', 'Heaven Yaw'], 'Noscope hitchance', -0xd9c + 0x61 * 0x4a + -0xe6e, -0x2294 + 0xe * -0xe + 0x1 * 0x23bc), UI['AddColorPicker'](path, 'Script Accent'), UI['AddCheckbox'](['Config', 'Heaven Yaw', 'Heaven Yaw'], 'Override in-air hitchance'), UI['AddSliderInt'](['Config', 'Heaven Yaw', 'Heaven Yaw'], 'In-air hitchance', 0x18bd + 0x1 * 0xfb + -0x19b8, 0x1 * -0x781 + 0x99f + -0x1ba), UI['AddSliderInt'](path, 'Distance', 0x14d + -0xa44 + -0x5 * -0x1cb, 0x1 * 0xa7 + 0x1 * -0x1637 + 0x28 * 0x8b), UI['AddSliderInt'](path, 'Line Thickness', 0x2 * -0xbaa + 0x1478 * -0x1 + -0x4 * -0xaf3, 0x2 * -0x11d4 + 0x19de + 0x9d4), UI['AddSliderInt'](path, 'Circle Thickness', -0x3 * 0x18d + -0x98a + -0x15 * -0xad, 0xab9 + 0x1baa + -0x2659), UI['AddSliderInt'](path, 'Circle Radius', -0x33e * -0x1 + -0xd * -0x7 + -0x1 * 0x399, -0x75 + 0x35 * -0xa7 + 0x2326), UI['AddSliderFloat'](path, 'Outline Thickness', 0x3ba + 0x26bb + -0x2a75, 0x33f * -0x2 + 0x301 + 0x37f), UI['AddColorPicker'](path, 'Color'), UI['AddCheckbox'](path, 'Enable Arrows'), UI['AddDropdown'](path, 'Freestand Fake', ['Normal', 'Reversed'], -0x1d4a + -0xbc1 + 0x290c), UI['AddDropdown'](path, 'Style', ['First', 'Second'], 0x1a10 + 0x270 + -0x5b3 * 0x5), UI['AddColorPicker'](path, 'Active Direction Color'), UI['AddColorPicker'](path, 'Inactive Direction Color'), UI['AddCheckbox'](path, 'Toggle Freestand when AWPing'), UI['AddCheckbox'](path, 'Anti-Brute'), UI['AddDropdown'](path, 'Anti-Brute style', ['Static', 'Jitter'], -0x2572 + -0x9 * 0x399 + 0x45d3), UI['AddDropdown'](path, 'Anti-Brute type', ['Dynamic', 'Condition', 'On Key'], -0x19eb + 0x439 * 0x3 + -0x8 * -0x1a8), UI['AddMultiDropdown'](path, 'Conditions', ['Slow Walk', 'Low Hp', 'Standing', 'Hide Shots', 'Not Safe']), UI['AddCheckbox'](path, 'Break Prediction'), UI['AddCheckbox'](path, 'DT Improvement'), UI['AddCheckbox'](path, 'Safepoint on limbs'), UI['AddMultiDropdown'](path, 'Weapons', ['Auto', 'Scout', 'AWP', 'Pistols', 'Heavy Pistols', 'Other'], 0x22f9 + 0x7fc + 0x2af5 * -0x1), UI['AddCheckbox'](path, 'Desync on E'), UI['AddCheckbox'](path, 'Safe AWP'), UI['AddCheckbox'](path, 'Enable Custom Ragebot Targeting'), UI['AddDropdown'](path, 'Targeting', ['Closest', 'Farthest', 'Less hp', 'Bigger hp', 'Best kd', 'Worst kd'], -0x3a * 0x6b + 0xed * -0x19 + 0x2f63), UI['AddCheckbox'](path, 'Enable Better Fakelag'), UI['AddCheckbox'](path, 'HP/2 on DT'), UI['AddDropdown'](path, 'Fakelag mode', ['Max', 'Random', 'Fluctuate', 'Switch', 'Adaptive'], -0x20f7 * -0x1 + 0x5af + -0xce2 * 0x3), UI['AddSliderInt'](path, 'Limit', 0x1d99 + -0x1 * 0x681 + -0x1718, -0x12b9 + -0x217b + 0x3444), UI['AddSliderInt'](path, 'Trigger Limit', -0x198c + -0x22d * 0x1 + 0x1bb9, 0x1fb1 + 0x6a2 + -0x2643), UI['AddSliderInt'](path, 'Minimum', 0x452 * -0x7 + 0x22a6 + -0x8 * 0x8d, -0x10a8 + -0x4de + -0x12 * -0x133), UI['AddSliderInt'](path, 'First Value', -0x10bd + 0x1da * -0x10 + 0x2e5d, 0x17b * -0x11 + -0x18e * 0x17 + -0x3cfd * -0x1), UI['AddSliderInt'](path, 'Second Value', 0x89b * 0x2 + -0x2034 + 0xefe, -0xaec + 0x69d + 0x3 * 0x175), UI['AddSliderFloat'](path, 'Switch Delay', -0x2 * 0x10f6 + 0x233c + -0x2 * 0xa8, -0x180a * 0x1 + 0xd47 * -0x1 + 0x2552), UI['AddCheckbox'](path, 'Clantag'), UI['AddSliderInt'](path, 'Choke Limit', -0x3 * -0x9eb + 0x2 * 0x27 + -0x1e0f, 0x393 * 0x1 + -0x271 * -0x5 + -0xfb8), UI['AddSliderInt'](path, 'Send Limit', 0x963 + -0x712 + -0x251, -0x1481 * 0x1 + -0x2272 + 0x3703 * 0x1), UI['AddCheckbox'](path, 'Better Strafer'), UI['AddCheckbox'](path, 'Crosshair Hitmarker'), UI['AddCheckbox'](path, 'Enable Player State Indicators'), UI['AddCheckbox'](path, 'Enable Watermark'), UI['AddCheckbox'](path, 'Enable Keybinds'), UI['AddCheckbox'](path, 'Enable Skeet-styled indicators'), UI['AddCheckbox'](path, 'Enable Buy Logs'), UI['AddSliderInt'](path, 'X-pos', -0x1eff + 0xb7b + 0x1384, Global['GetScreenSize']()[-0x1070 + -0xa * 0x332 + -0x1 * -0x3064]), UI['AddSliderInt'](path, 'Y-pos', -0x53d + -0x1 * -0x2088 + -0x919 * 0x3, Global['GetScreenSize']()[0x65b + -0x1d9b + 0x1741]), UI['AddCheckbox'](path, 'Enable Chat Logging');
var target = -(0x218a + 0x227 + -0x8 * 0x476),
    prefer_safe_backup = ![],
    enable_visuals = ![],
    enable_arrows = ![],
    legit_aa = ![];
UI['AddHotkey'](['Config', 'Scripts', 'Keys', 'JS Keybinds'], 'Freestand', 'Freestand'), UI['AddHotkey'](['Config', 'Scripts', 'Keys', 'JS Keybinds'], 'Backward Jitter', 'Backward Jitter'), UI['AddHotkey'](['Config', 'Scripts', 'Keys', 'JS Keybinds'], 'Anti-Brute', 'Anti-Brute'), handle_visibility();

function Draw() {
    if (UI['IsMenuOpen']()) handle_visibility();
    UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Indicators']) && render_indicators();
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Desync Circle'])) Visuals();
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Arrows'])) {
        if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Style']) == -0xd * -0x207 + 0x19cd + -0xd * 0x403) aa_arrows2();
        else aa_arrows();
    }
}

function handle_visibility() {
    UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == -0x108e + 0x2270 + -0x11df ? UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Better Fakelag'], 0x54b + 0x1da + -0x724) : UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Better Fakelag'], -0x61 * -0x1d + 0x2561 + -0x305e * 0x1);
    var _0x235647 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Better Fakelag']) && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == 0x3 * -0x18d + -0x1082 * 0x2 + 0x25ae,
        _0x1186eb = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode']) == 0x5 * -0x4b1 + 0x7eb * 0x1 + 0xf8c,
        _0x405298 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode']) == -0x1673 + -0x1641 * -0x1 + 0x9 * 0x6,
        _0x1c6a6e = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode']) == -0x1d1a + -0x10f0 + 0x1705 * 0x2,
        _0x25ceab = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode']) == -0x4 * -0x58f + -0x1253 * 0x2 + 0xe6d,
        _0x28de20 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode']) == 0x93 + -0x8df + 0x84d,
        _0x1575a5 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'DT Improvement']) && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == -0x158d * -0x1 + 0x1 * -0x1b0b + 0x25 * 0x26;
    UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode'], _0x235647 ? 0x222a * -0x1 + -0x207b * 0x1 + -0x2153 * -0x2 : 0x21bc + -0x7 * 0x1d2 + -0xa7f * 0x2), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Limit'], _0x235647 && !_0x25ceab && !_0x1186eb ? 0xb2 * 0x1b + 0x1592 + 0x17 * -0x1c1 : -0xe6b + 0x22a * 0x2 + -0x7 * -0x171), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Trigger Limit'], _0x235647 && !_0x25ceab && !_0x1186eb ? -0x1c6d + 0x1732 + -0x29e * -0x2 : 0x1 * -0x1b83 + 0x12b9 + 0x8ca), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Send Limit'], _0x235647 && _0x1186eb ? -0x213c + -0x1 * 0xdd3 + 0x2f10 : 0x1067 + -0x315 * -0x2 + -0x1 * 0x1691), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Choke Limit'], _0x235647 && _0x1186eb ? 0x1f8d + 0xb90 + -0x2b1c : 0x1 * 0xea2 + 0x28e + -0x1130), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Minimum'], _0x235647 && _0x28de20 ? -0xa * -0xbc + -0x178 * -0x15 + -0x262f : 0x2 * -0xb51 + -0x1d * 0x3e + -0xed4 * -0x2), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'First Value'], _0x25ceab && _0x235647 ? 0x133 * -0xb + 0x5dc + -0x272 * -0x3 : 0x8 * 0x1de + 0x4f * 0x1 + 0x3 * -0x515), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Second Value'], _0x25ceab && _0x235647 ? 0xe18 * -0x1 + 0x12bf + -0x4a6 : 0xe6f * -0x2 + -0x110c + -0x7a7 * -0x6), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Switch Delay'], _0x25ceab && _0x235647 ? 0x8 * -0x2e0 + 0x1 * 0x984 + 0x1 * 0xd7d : 0x1f14 + -0xe6b + -0x1 * 0x10a9);
    UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) != -0x61 * -0x2d + -0x111 * -0xd + -0x1ee6 ? (UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Clantag'], 0x897 * 0x1 + -0x8 * -0x443 + -0x31 * 0xdf), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'X-pos'], 0x3fc + -0x79 * 0x2d + 0x3 * 0x5c3), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Y-pos'], -0x29 * 0xcb + 0x2e * 0x7f + 0x9b1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Buy Logs'], -0x180a + 0x106c * 0x1 + 0x79e), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Chat Logging'], -0x10 * 0x115 + 0x3 * -0x302 + -0xd2b * -0x2), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent'], 0xd * -0x71 + 0x165d + -0x2 * 0x850), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Better Strafer'], 0x111 * -0x7 + 0x86 * -0x49 + 0x2dad), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Crosshair Hitmarker'], 0x496 + 0x6b1 + -0xb47), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Player State Indicators'], -0x1 * 0xba3 + 0x511 + 0x692), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Watermark'], -0x757 * -0x5 + -0x184b + -0x18d * 0x8), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Keybinds'], -0x445 + 0x6c7 + -0x282), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Skeet-styled indicators'], 0x11a3 + -0x61f * 0x3 + -0x3e * -0x3)) : (UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'X-pos'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Buy Logs'])), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Y-pos'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Buy Logs'])), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Buy Logs'], -0x1 * 0x1b37 + -0x33d * 0x1 + -0x45 * -0x71), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent'], 0x17 * -0x145 + -0x1e5c + 0x3b90), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Chat Logging'], 0x1 * 0x9f4 + -0x4 * -0x239 + 0xd * -0x173), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Clantag'], 0xc7 * -0x1d + -0x4a3 + 0x1b2f), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Better Strafer'], -0xbb6 + 0x853 * -0x2 + 0x1 * 0x1c5d), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Crosshair Hitmarker'], 0x1b7d + -0xffe + -0x2 * 0x5bf), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Player State Indicators'], -0x1 * 0x2132 + 0x17e * 0x12 + 0x657), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Watermark'], 0xa9f * -0x1 + 0x10ab + -0x60b), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Keybinds'], 0x4 * 0xf8 + -0x1453 + -0x1b * -0x9c), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Skeet-styled indicators'], -0x1a27 + -0x796 + 0x21be));
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) != -0x1 * -0x1a03 + 0x30e * 0x3 + 0x1 * -0x232b) {
        if ('KhsSB' !== 'KhsSB') {
            function _0x3c9235() {
                const _0x34ad93 = this['angles'](this['operate'](_0x1b6536, _0x432489, '-')),
                    _0x2819aa = this['new']([_0x187057['abs'](_0x26cbee['x'] - _0x34ad93['x']), _0x19f8a0['abs'](_0x30e072['y'] % (0x1 * -0x1516 + 0x10cf + -0x61 * -0xf) - _0x34ad93['y'] % (0x20d2 + -0x1f3f + -0x2b)) % (0x2089 + -0xf8f * -0x1 + -0x8 * 0x5d6), 0xc72 + -0x348 * 0x1 + -0x17 * 0x66]);
                if (_0x2819aa['y'] > -0x1 * 0x1055 + -0x1677 + 0x2780) _0x2819aa['y'] = 0x1 * -0x1f5c + -0x1d49 + 0x3e0d * 0x1 - _0x2819aa['y'];
                return this['length2d'](_0x2819aa);
            }
        } else UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Indicators'], -0x1 * -0x8d7 + -0x71 * -0xa + -0xd41), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Arrows'], -0x1291 + -0x16 * 0x23 + 0x1593), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Enable Desync Circle'], 0x2 * -0xaee + 0xee2 + 0x6fa * 0x1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator'], 0x1102 + 0x21b9 * -0x1 + 0x10b7), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator color'], -0x6f3 + 0x4b1 * -0x1 + 0x2 * 0x5d2);
    } else UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Indicators'], -0x941 + -0x255 + 0xb97), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Arrows'], -0x193d * -0x1 + -0x155f + 0x1 * -0x3dd), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Enable Desync Circle'], -0x2474 + -0x15 * 0x82 + 0x2f1f), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator'], 0x1e3b + 0xd65 + -0x2b9f), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator color'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator']) ? 0x188d * -0x1 + 0x1cc0 + -0x3 * 0x166 : -0x3f * 0x71 + -0xb38 + -0x67 * -0x61);
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) != 0x13 * 0x114 + 0x13c0 + -0x283b) {
        if ('yRvCE' === 'lEYKs') {
            function _0x270b11() {
                _0x4bc62e['GetValue'](['Rage', 'Target', _0x243df0[_0x38f41c], 'Damage Override']) != -0x4e9 + 0x1801 * -0x1 + 0x1cea ? _0x9cf18a['String'](0x13a1 + 0x1 * 0x2239 + -0x7b * 0x70, _0xa4cdee[-0x1ff7 + -0x2 * 0x4dd + -0x2 * -0x14d9] - (0x9ad * -0x4 + -0x5 * -0x78d + 0x157), 0xd5f + -0x40b + 0x31c * -0x3, _0x30020c['GetValue'](['Rage', 'Target', _0x5d2990[_0x54c557], 'Damage Override'])['toString'](), _0x4ae34a, _0x4ed852) : _0x502310['String'](-0x1 * 0x161 + -0x14b6 + -0x67 * -0x37, _0x1bc9a6[0x4f2 * -0x1 + -0x2 * 0x269 + -0x1 * -0x9c5] - (-0xa + -0x208f + 0x20fd), 0x2092 + -0x1 * 0x12f5 + -0x29 * 0x55, _0x4329ca['GetValue'](['Rage', 'Target', 'General', 'Damage Override'])['toString'](), _0x316b1c, _0x6a8a3e);
            }
        } else UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Toggle Freestand when AWPing'], 0x206b + -0x2 * -0x6e3 + -0x2e31), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Freestand Fake'], -0x66c + 0x1 * -0x267 + -0x3 * -0x2f1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute'], -0x4ec + -0x12f0 + -0x2 * -0xbee), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Break Prediction'], 0x1a55 + -0x1a29 + 0x2 * -0x16), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Desync on E'], 0x1d * 0xd6 + -0x43a + -0x1404);
    } else UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Toggle Freestand when AWPing'], -0x111a + -0x1bd7 + -0x1 * -0x2cf2), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Freestand Fake'], -0x259d + 0x2019 + 0x585), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute'], -0x2 * -0xd2c + 0xa04 * -0x2 + 0x55 * -0x13), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Break Prediction'], -0x1111 + 0x3 * 0xa9b + -0x5 * 0x2f3), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Desync on E'], -0x1 * -0x16b4 + 0x80c * -0x3 + 0x171);
    UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) != 0x3ee + 0x5 * 0x4f5 + -0x1cb7 ? (UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'], -0x1 * -0x2323 + -0x1ef9 + -0x42a), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance'], -0x1e36 + 0xbb * -0x11 + -0x2aa1 * -0x1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Noscope hitchance'], 0x7b9 + 0x2 * -0x2a6 + 0x26d * -0x1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'In-air hitchance'], -0x1d40 + -0x127 * 0x1f + 0x40f9), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'DT Improvement'], 0x1 * -0x655 + 0x1f97 + -0x1942), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs'], -0x55a + -0x238c + 0x28e6), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Weapons'], 0xd * 0x1c9 + -0x858 + -0xedd * 0x1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting'], -0x7 * 0x251 + 0x4 * -0x7a3 + 0x1 * 0x2ec3), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Targeting'], -0x1aa6 + -0x89 * -0xb + 0x5 * 0x427), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safe AWP'], 0x1 * -0x2452 + -0x1a6a * -0x1 + 0x9e8), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'HP/2 on DT'], 0xdb7 + 0x1 * 0x6fd + 0x212 * -0xa)) : (UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'], -0x492 + -0x6f3 * -0x5 + -0x1e2c), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'DT Improvement'], 0x1 * 0x2228 + 0xfb5 + -0x31dc * 0x1), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance'], -0x2076 + 0x1c49 + 0x1 * 0x42e), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Noscope hitchance'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance'])), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'In-air hitchance'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'])), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs'], 0x37a + -0x338 + -0x41), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Weapons'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs']) ? -0x99 * 0x1a + -0x1 * 0x2173 + 0x187f * 0x2 : 0x1829 + -0xd82 + -0xaa7), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safe AWP'], 0x1d7c + 0x1d59 + 0xeb5 * -0x4), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting'], -0x24cf + 0x26 * -0x17 + 0x283a), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Targeting'], UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting']) ? -0xd10 + 0x25b5 + -0x18a4 : -0xef2 * -0x1 + -0xf5e + 0x1b * 0x4), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'HP/2 on DT'], -0x23 * 0x91 + -0xe06 + 0x21da));
    enable_visuals = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Indicators']) && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == 0xc5 + 0x3 * 0x73 + -0x1 * 0x21c, enable_arrows = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Arrows']) && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == 0x103 * -0x16 + -0x143d + 0x2a81;
    var _0x25da4a = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Style']) == -0x11dd + -0xfb + 0x12d8 && enable_arrows ? -0x258a + 0x3 * -0x107 + 0x28a0 : 0xa1 * -0xc + -0x1f13 + 0x1 * 0x269f,
        _0x4582ea = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Desync Circle']) && enable_visuals ? -0x21bf * 0x1 + 0x18bb + 0x905 * 0x1 : 0x24c9 + 0xbeb + -0x30b4,
        _0x47e29d = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Style']) == 0x2236 + 0xb9b + -0x2dd * 0x10 && enable_visuals ? 0x2535 + 0xf * 0x24f + -0x47d5 : 0x17cd + 0x1 * -0x373 + -0x145a,
        _0x41e24d = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute']) && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Tab']) == 0x200b + 0x1bb1 + -0x13e9 * 0x3 ? -0xf4 * 0x15 + 0x9b9 * 0x3 + -0x926 : 0x1 * 0x213 + -0x972 * 0x1 + 0x75f;
    UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Line Length'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Distance'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Line Thickness'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Circle Radius'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Circle Thickness'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Outline Thickness'], _0x4582ea), UI['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Color'], _0x4582ea), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Style'], enable_arrows ? 0xa * -0x305 + -0x1a5b + -0x39 * -0xfe : -0x47 * -0xe + -0x84 * 0xd + 0x2 * 0x169), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Position'], enable_visuals ? 0x1281 * -0x1 + 0x2555 * 0x1 + -0x12d3 : -0x281 * -0x3 + -0xdd * -0x1d + 0x1046 * -0x2), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Active Direction Color'], enable_arrows ? 0x1a2e * -0x1 + -0x8c4 + 0x22f3 * 0x1 : -0x1c87 + 0x10c * 0xe + 0xddf), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Inactive Direction Color'], enable_arrows ? -0xa1 + -0x427 + -0x23 * -0x23 : 0x70e * -0x4 + 0x2345 * -0x1 + 0x3f7d), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute type'], _0x41e24d), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute style'], _0x41e24d), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions'], _0x41e24d && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute type']) == -0xf5d * -0x1 + -0x1 * 0xd36 + -0x226 ? 0xd * 0x173 + 0x1 * 0x7f7 + -0x1acd : -0x1cd + 0x653 * 0x3 + -0x112c);
}

function adjust_angle(_0xe0369a) {
    if (_0xe0369a < -0x839 + -0x15 * 0x19a + -0x1 * -0x29db) _0xe0369a = 0x24a + -0x28e + 0x9e + _0xe0369a * -(0x449 + 0x2465 + -0x3 * 0xd8f);
    else {
        if (_0xe0369a > 0x2216 * -0x1 + -0x59f * 0x2 + -0x4 * -0xb55) {
            if ('ZGxkE' !== 'ZGxkE') {
                function _0x31f613() {
                    _0x46081d = '', _0x1f6927 = '', _0x52cefd = '', _0x297b0d = '', _0x25aeb1 = '', _0x37cbc1 = '', _0x2c2939 = '', _0x31c305 = '', _0x121350 = '', _0xed3323 = '';
                }
            } else _0xe0369a = 0x210a + -0x2324 + 0x274 - _0xe0369a;
        }
    }
    return _0xe0369a;
}

function render_arc(_0x4927d7, _0x422ef3, _0x461618, _0x20e7f1, _0x334130, _0x220812, _0x8754a4, _0x3fbbcc) {
    _0x8754a4 = (-0x125e + 0x3c8 + -0xb2 * -0x17) / _0x8754a4;
    for (var _0x3a7cda = _0x334130; _0x3a7cda < _0x334130 + _0x220812; _0x3a7cda = _0x3a7cda + _0x8754a4) {
        if ('JIrxr' !== 'JIrxr') {
            function _0x5503c4() {
                _0x15589c(_0x5b3680());
                return;
            }
        } else {
            var _0x55f80e = _0x3a7cda * Math['PI'] / (-0x125f * -0x2 + 0x1 * 0x1079 + 0x1 * -0x3483),
                _0xbdffe1 = (_0x3a7cda + _0x8754a4) * Math['PI'] / (-0x105 * -0x13 + -0x9f0 + -0x8bb * 0x1),
                _0x35f396 = Math['cos'](_0x55f80e),
                _0x594fcb = Math['sin'](_0x55f80e),
                _0x359f15 = Math['cos'](_0xbdffe1),
                _0x68f1af = Math['sin'](_0xbdffe1),
                _0x22e70f = _0x4927d7 + _0x35f396 * _0x20e7f1,
                _0x5415ad = _0x422ef3 + _0x594fcb * _0x20e7f1,
                _0x271162 = _0x4927d7 + _0x35f396 * _0x461618,
                _0x2c7f2b = _0x422ef3 + _0x594fcb * _0x461618,
                _0x3e3af7 = _0x4927d7 + _0x359f15 * _0x20e7f1,
                _0x3d7f25 = _0x422ef3 + _0x68f1af * _0x20e7f1,
                _0x1ef71b = _0x4927d7 + _0x359f15 * _0x461618,
                _0x14956b = _0x422ef3 + _0x68f1af * _0x461618;
            Render['Polygon']([
                [_0x271162, _0x2c7f2b],
                [_0x1ef71b, _0x14956b],
                [_0x22e70f, _0x5415ad]
            ], _0x3fbbcc), Render['Polygon']([
                [_0x22e70f, _0x5415ad],
                [_0x1ef71b, _0x14956b],
                [_0x3e3af7, _0x3d7f25]
            ], _0x3fbbcc);
        }
    }
}
var Weapons = ['bayonet', 'flip knife', 'gut knife', 'karambit', 'm9 bayonet', 'butterfly knife', 'falchion knife', 'navaja knife', 'shadow daggers', 'stiletto knife', 'bowie knife', 'huntsman knife', 'talon knife', 'ursus knife', 'classic knife', 'knife', 'high explosive grenade', 'smoke grenade', 'decoy grenade', 'incendiary grenade', 'molotov', 'flashbang'];

function Visuals() {
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x424dbe = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Line Length']),
        _0x8a243f = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Distance']),
        _0x21f497 = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Line Thickness']),
        _0x40856a = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Circle Radius']),
        _0x30bc09 = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Circle Thickness']),
        _0x10cc89 = UI['GetValue'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Outline Thickness']),
        _0x3cb733 = Render['GetScreenSize']()[0x23bf * 0x1 + 0x569 + -0x2928] / (0x2657 + 0x1da5 + -0x43fa),
        _0x2ba32e = Render['GetScreenSize']()[0x2698 + -0xe33 + -0x619 * 0x4] / (0xa4a + 0x5 * 0x375 + -0x1b91),
        _0x358d8f = Weapons['indexOf'](Entity['GetName'](Entity['GetWeapon'](Entity['GetLocalPlayer']())));
    if (_0x358d8f > -(0x89 * 0x2d + 0x862 + -0x2076)) {
        if ('Fwcrf' === 'lIWLb') {
            function _0x1c50b() {
                _0x58017c = 0x1465 * -0x1 + 0x22a5 * 0x1 + -0xe40, _0x522b2d = 0xcb5 * -0x2 + 0xfe8 + -0x4c1 * -0x2;
            }
        } else Render['FilledRect'](_0x3cb733 - (-0x1b4f * -0x1 + 0xb * 0x200 + 0x70b * -0x7), _0x2ba32e - (0x7f4 * 0x4 + 0xe5d * 0x1 + -0x2e2b), 0x2d * 0x19 + -0x15 * 0x6b + 0xa1 * 0x7, 0xcf5 + 0x2644 + -0x3334, [-0x89 * -0x29 + -0x11b + -0x13d7, 0x89a + -0x1 * -0x128b + 0x1 * -0x1a26, 0x12a4 * 0x2 + 0x16a + -0x25b3, 0x74b + -0x211a * -0x1 + -0x2766]), Render['Rect'](_0x3cb733 - (-0xab7 + 0x1d7 + 0x8e2), _0x2ba32e - (-0x1075 + 0x1deb + -0xd74), -0x113e + -0x165c + 0x5a9 * 0x7, 0x2593 * 0x1 + -0xf87 + -0x1607, [-0x17c8 + -0x3c * -0x53 + 0x454, -0x111e + 0x194f + -0x1 * 0x831, 0xef9 * -0x2 + 0x1 * 0x67e + 0x1774, -0x2 * 0xd8a + -0x23e2 + 0x3ff5]);
    }
    antiaimColor = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Color']), selected_red = antiaimColor[0x2 * 0x1309 + 0x9b * -0x27 + -0x1 * 0xe75], selected_green = antiaimColor[0xa0a + 0x2 * 0x3ae + -0x1165], selected_blue = antiaimColor[0x30b * 0x9 + 0x1 * -0x43b + -0x1726], alphaz = antiaimColor[0x9a8 + -0x1b73 + 0x11ce * 0x1], Convar['SetString']('crosshair', '0'), UI['SetValue'](['Visuals', 'Extra', 'Impacts', 'Autowall dot'], -0x149 * 0x1 + 0x13f7 + -0x12ad);
    var _0x1d301b = Local['GetViewAngles'](),
        _0x5f0e40 = Local['GetRealYaw'](),
        _0x2c2425 = _0x1d301b[-0xb29 + 0x1d5 * 0xf + -0x1051] - (0x2f0 * 0x8 + -0x1b22 + 0x456),
        _0x1ae2e0 = adjust_angle(_0x5f0e40 - _0x2c2425);
    render_arc(_0x3cb733, _0x2ba32e, _0x8a243f + _0x21f497 + _0x10cc89, _0x8a243f + _0x10cc89, _0x1ae2e0 - (-0x242 + -0x8b8 + 0xd * 0xe6) * (-0x2 * -0x7b1 + 0x6 * 0x4dc + -11401.8), _0x424dbe, 0x26f1 + -0x2472 + 0x6 * -0x67, [-0x18d * -0x5 + -0x1 * -0x2e7 + -0xaa8, -0x1 * -0x452 + 0x19f * -0x8 + 0x171 * 0x6, -0x1 * -0x1136 + -0x1885 * -0x1 + -0x4a3 * 0x9, 0xc2f + -0xc24 + 0x5e * 0x1]), render_arc(_0x3cb733, _0x2ba32e, _0x8a243f + _0x21f497 - _0x10cc89, _0x8a243f - _0x10cc89, _0x1ae2e0 - (-0x1598 + 0x91 * -0x8 + 0x1ad4) * (-0x213b + 0x5 * -0x2e3 + 12202.2), _0x424dbe, 0x22e7 + -0xba9 + -0x7 * 0x34f, [-0x627 + 0x160 * -0x1a + -0x277 * -0x11, -0xa14 + 0x22f4 + -0x18e0, 0x8ef * -0x1 + -0x17bd + 0x20ac, 0x1df1 + -0x3 * -0xb4d + -0x3f6f]), render_arc(_0x3cb733, _0x2ba32e, _0x8a243f + _0x21f497, _0x8a243f, _0x1ae2e0 - (-0x105f + 0x6f3 + 0xa20) * (0x26c2 + -0x2 * -0xfd3 + -18023.8) + _0x10cc89, _0x424dbe, -0x167f + 0x3d7 * -0x6 + -0x2 * -0x16cf, [-0x1 * 0x2501 + 0xdae + 0x1753, 0x1a * -0xb7 + -0x29 * -0x4a + 0x6bc, 0xe5c + -0xe6 + -0xd76, 0x62a + 0x1 * -0x1981 + 0x13c0]), render_arc(_0x3cb733, _0x2ba32e, _0x8a243f + _0x21f497, _0x8a243f, _0x1ae2e0 - (-0x3 * -0x256 + -0xf20 * -0x1 + -0x1 * 0x156e) * (-0xfd5 + -0x2292 + 12903.2) - _0x10cc89, _0x424dbe, 0xcec * -0x3 + 0x26d9 + 0x0, [-0x5a * 0x41 + -0x1052 + -0x1 * -0x272c, -0x26e7 + 0xe31 + 0x18b6, 0x1 * 0x22c4 + -0x2075 + 0x24f * -0x1, 0x2d * -0x31 + -0x2 * 0x63 + -0xb * -0xe4]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09 + _0x10cc89, _0x40856a + _0x10cc89, UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) ? -(0x1 * 0x2705 + -0x1 * -0x319 + -0x29c4) : 0x9f2 + 0x1029 + -0x1 * 0x19c1, -0x3bd + -0x1e8 * -0x3 + -0x147, 0x2 * -0xa47 + -0x2 * 0x122c + 0x67 * 0x8e, [0xcdd * -0x2 + -0x5 * 0x19 + 0x3 * 0x8bd, 0x135b + 0xf4f + 0x99 * -0x3a, -0x1 * 0x2f5 + 0x19 * 0xce + -0x1129, -0x16b6 + -0x2 * -0x73b + 0x8a9]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09 - _0x10cc89, _0x40856a - _0x10cc89, UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) ? -(-0x1 * -0x15f5 + -0x1e74 * 0x1 + -0x8d9 * -0x1) : -0x1ea4 + -0x2 * -0xdfa + 0x30a, -0x15d * -0x11 + 0x200 * -0x10 + 0x987, 0x140e + 0x2b + -0x13fd, [0x309 + 0x147 * -0x1 + -0x3 * 0x96, -0x151 * -0xa + -0x287 * 0x4 + -0x30e, -0x20a6 + -0x2cc + 0x2372, 0xf54 + -0x92 * -0x32 + -0x2b6f]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09, _0x40856a, UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) ? -(0xddd + -0x7f * -0x9 + -0xd * 0x162) - _0x10cc89 : 0x1a42 + -0x1294 + -0x1c * 0x43 + _0x10cc89, -0x1 * -0xd7d + -0x407 * 0x7 + -0x74 * -0x22, 0xfbd + 0xbd1 * -0x3 + 0x13f2, [0x23fe + -0x2466 + -0x2 * -0x34, 0x502 + -0xc5a + 0x758, 0x1ee2 + 0x2 * 0x159 + -0x2194, 0x2415 + 0x215b * -0x1 + -0x251]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09, _0x40856a, UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) ? -(0x900 + 0x2352 + -0x2bf8) + _0x10cc89 : -0x1 * 0x17d1 + -0x20d + -0x4 * -0x68e - _0x10cc89, 0x21a * -0x8 + 0x2056 * -0x1 + 0x31da, -0x6b * -0x5a + 0x1 * 0x1e3d + 0x1 * -0x439f, [0xd21 + 0x766 + -0x1487, 0x1fd2 + -0x1a5e + -0x574, 0x617 * 0x3 + 0x13eb * -0x1 + 0x1a6, -0x1ceb + 0xa * -0x155 + 0x67 * 0x6a]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09 + _0x10cc89, _0x40856a, 0x16e6 + -0x1 * 0x1f21 + 0x83b, -0x1341 * -0x2 + 0x41c * -0x4 + -0x14aa, -0x9d2 * -0x3 + 0x10ba + -0x2df4, [-0x1 * 0x1e4d + -0x2232 * 0x1 + -0x1 * -0x4093, -0x14ad + 0x3 * 0x859 + -0x44a, -0x2c6 * 0x1 + 0x1eb0 + 0xdeb * -0x2, 0x1 * -0x1f55 + -0xf8d + 0x2f1e]), render_arc(_0x3cb733, _0x2ba32e, _0x8a243f + _0x21f497, _0x8a243f, _0x1ae2e0 - (0x252c + -0x2709 + -0x9 * -0x49) * (-0x14be + 0x9f * 0xb + 3561.2), _0x424dbe, -0x1f * 0x46 + -0x7b5 + 0x1044, [selected_red, selected_green, selected_blue, 0x13f3 * -0x1 + 0x1878 + -0x1c3 * 0x2]), render_arc(_0x3cb733, _0x2ba32e, _0x40856a + _0x30bc09, _0x40856a, UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) ? -(0x1ef3 + 0x16 * 0x1b9 + -0x5 * 0xdb3) : 0x9be * -0x2 + 0x76f + 0xc67, -0x7b * -0x33 + -0x25e + 0x3b * -0x5d, -0xbd7 * 0x1 + 0xb * -0x1d + -0x2 * -0x6a9, [selected_red, selected_green, selected_blue, -0x4cf + -0x863 + 0xe31]);
}
var cache = UI['GetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset']),
    ticktime = Globals['Tickcount'](),
    screen_size = Render['GetScreenSize']();

function aa_arrows() {
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x4afe94 = UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']);
    font = Render['AddFont']('Arial', 0x1c71 + -0x11 * 0x1 + -0x1c42 * 0x1, -0xc7 * -0x25 + -0xd * -0x25f + -0x3b32), font1 = Render['AddFont']('Arial', 0x1320 + 0x63a + 0x3 * -0x869, -0x85c * -0x2 + 0x26e9 * 0x1 + -0x373d);
    var _0x4b175f = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Active Direction Color']),
        _0xc0efbc = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Inactive Direction Color']);
    Render['String'](screen_size[0x1f * 0xf9 + 0x1c33 + -0x3a5a] / (-0x142f + -0x19d6 + 0x2e07) - (0x45 * 0x8d + -0x1cef + -0x8d7), screen_size[0x425 * -0x1 + -0x19 * 0x18d + 0x2aeb] / (0xea5 + 0xa0 + -0xf43 * 0x1) - (0x17 * -0xa7 + 0x11d8 + -707.5), 0x498 + 0x104f * 0x2 + -0x2535, '<', [0x8d7 + -0x48b * -0x8 + -0x2d2f, 0x21ba + -0x97d + -0x4d9 * 0x5, -0x1682 + -0x1 * -0x437 + 0x124b, 0x21 * -0x6c + -0x175 + 0x8 * 0x20c], font), Render['String'](screen_size[-0x50 * 0x17 + 0x1dc1 + 0x6d * -0x35] / (-0xafc + 0x1 * 0x569 + 0x595) + (-0x25be * 0x1 + 0x1a1d + 0xbde), screen_size[0x1264 + 0x21d8 + -0x1169 * 0x3] / (0xe * 0x184 + -0x6 * -0x5d5 + -0x3834) - (0x1 * -0xd9b + -0x1353 + 8449.5), 0x1e98 + 0x136b + -0xad * 0x4a, '>', [-0x1d79 + 0x3c7 * 0x4 + 0xe5d, -0xa2c + -0xca1 + 0x16cd, -0x2193 * 0x1 + -0x184c + 0x39df, -0x12a8 + 0x1c7 * -0x5 + 0xe45 * 0x2], font), Render['String'](screen_size[0x407 + 0xd13 * -0x1 + 0x90c] / (-0x320 * -0x2 + 0x142c + -0x1a6a) - (-0x1a40 + 0x1f * -0x5e + 0x106 * 0x25), screen_size[-0x122c + -0x1a3 * -0xc + -0x177 * 0x1] / (0x2cf * 0x8 + -0x15 * 0x149 + 0x13 * 0x3d) - (-0xb * -0x5f + -0x3b2 + -0x4f), -0x123b + -0x20ba * -0x1 + -0xe7e * 0x1, '<', !_0x4afe94 ? _0x4b175f : _0xc0efbc, font), Render['String'](screen_size[0x1d * 0x81 + -0x3 * -0xa36 + -0x2d3f] / (-0x1 * 0x1504 + -0x43 * -0xd + -0xd * -0x15b) + (0x1 * -0x1b0e + 0x29 + -0x1b21 * -0x1), screen_size[0xd79 + 0x1 * 0x1de3 + -0x2b5b] / (0x189b + 0x9 * -0x203 + 0x6 * -0x115) - (0x1 * 0xc53 + -0xd5c + 0xf * 0x13), -0x67 * -0x29 + -0x12 * 0x1cc + 0xfda, '>', _0x4afe94 ? _0x4b175f : _0xc0efbc, font);
}
var text_ = 'DEFAULT',
    color = [-0x1e48 + 0x71 * 0x4c + -0x2a9, -0x1 * -0x1d90 + -0x1ae7 + -0x20f, 0x2 * 0x65b + 0x2472 + -0x55a * 0x9, -0x1e79 + -0x12e1 * 0x1 + 0x3259];

function render_indicators() {
    g_Local = Entity['GetLocalPlayer'](), g_Local_weapon = Entity['GetWeapon'](g_Local), weapon_name = Entity['GetName'](g_Local_weapon);
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x5071c2 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Toggle Freestand when AWPing']) && weapon_name == 'awp' ? -0x1 * -0x11e1 + 0x13c * -0xa + -0x588 : UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand']) ? -0x336 + 0xe08 + -0xad1 : -0x6d * 0x39 + -0x1961 * -0x1 + -0x47 * 0x4,
        _0x316375 = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Backward Jitter']) ? -0x1416 + -0xe69 + 0x2280 : -0x205 * -0x8 + -0x1 * 0x1c35 + 0x5 * 0x269,
        _0x2562c6 = isKeyActive || isKeyActive2;
    if (_0x5071c2) {
        if ('UjRVU' !== 'UjRVU') {
            function _0xebeec5() {
                var _0x5485d4 = _0x23a541 * (0x1147 + -0x599 + -2989.5),
                    _0x34225e = (_0x142a4f - _0x5485d4) * (-0x1d85 + -0x1f * 0xc6 + 13695.5);
                _0x34225e > _0x23bd85 && (_0x4da1f6 = _0x2da469 * ((-0x444 + 0x2269 + -0x1e24) / (0x1e6e + 0x1599 * 0x1 + -13318.5)), _0x5485d4 = _0x192deb - _0x34225e), _0x3a97dd = _0x5485d4;
            }
        } else text_ = 'FREESTAND', color = [0x1 * -0x5e1 + 0x6b + 0x675, 0x1b3a + 0x22d5 + -0x2ab * 0x17, -0x1ca6 + 0x1 * -0x1f7 + 0x1f03, -0xad5 * -0x1 + 0x1e54 + -0x282a];
    } else {
        if (_0x316375) text_ = 'JITTER', color = [-0x3af * -0x8 + 0x1 * -0x18e1 + -0x19 * 0x2f, 0x1b28 + -0x8ef * -0x1 + 0x2 * -0x11a5, 0x2467 + -0x3 * -0x9ad + 0xd11 * -0x5, 0x12 * 0x1b + 0x31d * 0xb + -0x2326];
        else _0x2562c6 ? (text_ = 'DANGEROUS', color = [-0x9d7 + 0x138f + 0x7 * -0x13f, 0xb * -0x1a6 + -0x1b7 + -0x2 * -0xa06, -0x182 * -0x17 + -0x20b0 + 0x1b * -0x11, -0x1 * 0x1a3a + -0x583 + 0x5 * 0x68c]) : (text_ = 'DEFAULT', color = [0x3b9 * -0x2 + 0x1350 + -0xb43 * 0x1, 0x5 * 0x12b + 0x3 * 0xf + -0x56a, -0x92 * 0x38 + 0xc * 0x265 + -0x166 * -0x3, 0x1 * 0x255d + 0x1 * 0x182c + -0x142e * 0x3]);
    }
    var _0x3a94a9 = Exploit['GetCharge'](),
        _0x1fd4d6 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Position']) == -0x45 * 0x48 + -0x18df + -0x2c47 * -0x1 ? !![] : ![];
    font = Render['AddFont']('ARIALBD.TTF', 0x7e + 0x212b + -8606.4, 0x2 * -0x1184 + 0x1 * -0xaf1 + -0x3119 * -0x1), font2 = Render['AddFont']('ARIALBD.TTF', 0xff9 + 0x1dca + -11704.2, 0x2b6 * -0xd + 0x354 + 0x230a);
    var _0x130a3f = Render['TextSize']('HEAVEM YAW', font),
        _0x2c6840 = Render['TextSize'](text_, font),
        _0x1a395f = Render['TextSize']('DT', font);
    Render['String'](_0x1fd4d6 ? screen_size[0x1357 * -0x2 + -0x19 * -0xd0 + 0x125e] / (-0x945 + -0x6 * 0x595 + 0x2ac5) + (-0x15d * 0x3 + -0x230a + 10036.5) + Math['floor'](Math['floor'](_0x130a3f[0x1 * 0x19a9 + -0x2 * 0x15b + -0x16f3]) / (0xf17 + -0x26 * -0x86 + -0x22f9)) : screen_size[-0x5c3 * -0x6 + -0x9e9 + -0x18a9 * 0x1] / (0x63 * 0x53 + 0xece + -0x2ee5) + (0xcf5 * -0x1 + -0xf1 + 3558.5), screen_size[0x13 * 0x1eb + -0x29 * -0xc2 + 0x1 * -0x4382] / (-0x18 * 0xc1 + -0x15b7 + -0x27d1 * -0x1) + (0x4 * -0x76d + 0x170f * 0x1 + -0x6c6 * -0x1), 0x2 * 0x253 + 0x2178 + -0x261d, 'HEAVEN YAW', [-0x1 * -0x1cf7 + -0x3c6 + -0x1931 * 0x1, -0xeea + -0x235a + 0x3244, -0x2e4 + -0xb * 0x341 + 0xce5 * 0x3, -0x3 * 0x1a3 + 0x2057 + -0x1a6f], font2), Render['String'](_0x1fd4d6 ? screen_size[-0x2 * 0x257 + 0x267c + -0x21ce] / (-0x12e1 + 0x12fd + -0x1a) + (-0x1e * 0xaa + -0x26ff + 15102.5) + Math['floor'](Math['floor'](_0x2c6840[-0x3 * 0xcc9 + -0x39 * -0x3e + 0xf * 0x1a3]) / (0x170f + -0x5 * -0x7b5 + -0x3d96)) : screen_size[0x1d57 + -0x12f + -0x1c28] / (-0x1c * 0x13d + -0x97 * -0x3d + 0x9 * -0x25) + (0x146b + -0x9 * 0x64 + -4326.5), screen_size[-0x1ac8 + -0x1f0e + 0x39d7] / (-0x17a5 * 0x1 + -0x6c5 + 0x1e6c) + (0x212 * -0x7 + -0x179a * 0x1 + 0x2639) + Math['floor'](_0x2c6840[0xae1 + 0x1a * 0xb3 + 0x2 * -0xe87]), -0xcf9 * 0x3 + 0x1cf3 + 0x9f9 * 0x1, text_, [-0x16e * -0x13 + 0xfe9 * 0x2 + -0x3afc, 0x87 * -0x42 + -0xd * -0x2b9 + -0x97 * 0x1, 0x2af + 0xbef + -0xe9e, 0x44b * -0x5 + 0x843 + 0xe33], font2), Render['String'](_0x1fd4d6 ? screen_size[-0x19c1 + -0x27 * 0xe + -0x289 * -0xb] / (0x204b * 0x1 + 0x13f1 + -0xa72 * 0x5) + (0x1 * -0x1bb7 + -0xc26 + -0x24 * -0x11c) + Math['floor'](Math['floor'](_0x130a3f[0x1ab5 + -0x665 * -0x6 + -0x4113]) / (0x152f + 0x181a + -0x2d47)) : screen_size[-0x5fd + -0x1 * -0x1843 + 0x1 * -0x1246] / (0x22c + -0x23a3 + 0x2179 * 0x1), screen_size[0x25ba + -0xd * -0x24e + 0x43af * -0x1] / (0x1c1a + -0x1213 + 0x1 * -0xa05) + (-0xa4 * 0x15 + -0x5e5 * 0x4 + 0x2528), -0x2 * -0x11bc + -0x5b9 * -0x1 + -0x1 * 0x2930, 'HEAVEN YAW', [0x1362 + -0x24a8 + -0x4 * -0x47a, -0xfed + 0x10 * -0x197 + 0x125 * 0x25, -0x65b + 0xa * 0x1d6 + -0xb02, -0x1ec1 + -0x277 * 0x1 + -0x2237 * -0x1], font), Render['String'](_0x1fd4d6 ? screen_size[-0x1 * -0x2519 + -0x14f * 0x11 + -0xeda] / (-0x1 * -0x91 + 0x405 + -0x494) + (-0xf0d + -0x26ac + 0x35cc) + Math['floor'](Math['floor'](_0x2c6840[-0x3b0 + 0xb5d + -0x7ad]) / (-0xf9d * 0x1 + 0xf44 + 0x1 * 0x5b)) : screen_size[-0x1 * 0x1ea5 + 0x481 + 0xe * 0x1de] / (0x20ef + -0x35 + -0x20b8), screen_size[-0x31 * 0x91 + -0x1529 * -0x1 + -0x699 * -0x1] / (-0x255 * -0x2 + -0x568 * 0x1 + -0x18 * -0x8) + (-0x78b + 0x1 * -0x25b1 + 0x2d5c * 0x1) + Math['floor'](_0x2c6840[0x890 + -0x1807 + 0xf78]), 0xce5 * -0x2 + -0x248c + -0x3e57 * -0x1, text_, color, font), Render['String'](_0x1fd4d6 ? screen_size[0x1db9 + 0x3fc + -0x21b5] / (0xd88 + -0x23d * -0x8 + -0x1f6e) + (0xad * 0x1d + 0x1 * 0x673 + -6648.5) + Math['floor'](_0x1a395f[-0x85 * 0x3d + 0x1177 * 0x1 + 0xe3a] / (0x69f + -0x4 * 0x35f + 0x6df)) : screen_size[0x1dc7 + -0x269 + -0x1b5e] / (0x2 * 0x1 + -0x1639 + -0x1639 * -0x1) + (0x676 * 0x3 + 0xda8 + -8457.5), screen_size[0xa85 * 0x3 + 0x10c2 + 0x1828 * -0x2] / (0x18a0 + 0x1399 + -0x2c37) + (-0x6fc * -0x1 + 0x8b0 + 0xf8b * -0x1) + _0x1a395f[-0x106c + 0xa7c + 0x5f1] * (-0x2335 + 0x1d5c + 0x5db), 0x401 * 0x3 + 0x22b6 + -0x2eb8, 'DT', [-0x20e6 + 0x19e * 0x4 + -0x18e * -0x11, -0x2 * 0x11fe + 0x1e3d * -0x1 + 0x4239, -0x1f25 + -0x2 * 0xfee + -0x7f * -0x7f, 0x2fd + -0x470 + 0x272], font2), Render['String'](_0x1fd4d6 ? screen_size[-0x7 * -0x17 + -0x2 * 0x772 + 0xe43] / (-0x1 * 0x244f + 0x1 * -0xc9b + 0x30ec) + (0x1 * 0x872 + -0x2ed * 0xd + -0x1 * -0x1daa) + Math['floor'](_0x1a395f[-0x3 * 0xa7b + -0xccf + 0x2c40] / (0x9b1 * -0x2 + -0x55 * -0xf + -0x20f * -0x7)) : screen_size[0x22eb + -0x3c5 * -0xa + -0x489d * 0x1] / (-0x1 * 0x146f + 0x11fe + 0x273), screen_size[-0x18c6 + -0x9e5 * -0x2 + -0x4fd * -0x1] / (-0x209 * 0x11 + -0x1658 + -0x1 * -0x38f3) + (-0x1f6c + -0x1 * -0x2386 + -0x3fa) + _0x1a395f[0xa * -0x11 + -0x1bca + -0x1c75 * -0x1] * (-0x376 * 0x5 + -0xa * -0x223 + 0x3 * -0x15a), 0x1316 + -0x19b5 + 0x6a0, 'DT', _0x3a94a9 > -0xcb8 + 0xb85 + 307.9 && UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap']) ? [-0x967 + 0x2638 + -0x1 * 0x1ca3, -0x517 + -0x335 * 0x1 + 0x926, 0x1 * 0xea2 + 0x975 + 0x23 * -0xaf, -0x1 * 0x1966 + 0x21d8 + 0x1 * -0x773] : [0x1 * -0x8ec + -0xb08 * 0x3 + 0x2ae2, -0x25 * -0xd6 + 0x85a + 0x2 * -0x1381, 0xa17 + -0xf5 + 0xe * -0xa2, 0x25e7 + 0x46f * -0x4 + -0x132c], font);
}

function aa_arrows2() {
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x56ff20 = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Active Direction Color']),
        _0x41ea3f = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Inactive Direction Color']),
        _0x38d999 = UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']),
        _0x149062 = Render['AddFont']('Verdana', 0x10f8 + -0x36 * 0x3b + -0x47c, 0x31 * 0xa + 0x1 * 0xf21 + -0xd23),
        _0x4f5c9f = Render['GetScreenSize'](),
        _0x2b0d0d = _0x4f5c9f[-0x607 + -0x2 * -0xc7c + -0x12f1] / (0x3 * -0x1b9 + -0x404 + -0x1 * -0x931),
        _0x539592 = _0x4f5c9f[0xa * 0x125 + -0x10db * 0x2 + 0x1645 * 0x1] / (0x2370 + -0x1f5f + -0x40f);
    Render['Polygon']([
        [_0x2b0d0d + (0xe1a * 0x1 + -0x9d * -0xf + 0xb3 * -0x21), _0x539592],
        [_0x2b0d0d + (-0xee2 * 0x1 + 0x7 * -0x4b6 + -0x2 * -0x1805), _0x539592 + (0x2310 + -0x181 + -0x2187)],
        [_0x2b0d0d + (-0x1 * -0x19ed + -0x15ec + -0x3d3 * 0x1), _0x539592 - (0xb * -0x30d + 0x26e6 * 0x1 + -0x54f)]
    ], _0x38d999 ? _0x56ff20 : _0x41ea3f), Render['Polygon']([
        [_0x2b0d0d - (-0xa7 + 0x240f + -0x12 * 0x1f5), _0x539592 + (-0x4d * 0x8 + 0xa9b + -0x82b)],
        [_0x2b0d0d - (-0x59c + 0x1087 * 0x1 + -0xab1), _0x539592],
        [_0x2b0d0d - (0x1d * -0xc + -0x1 * 0x879 + 0xa03), _0x539592 - (-0x1 * -0x2171 + 0x169d + 0x1c03 * -0x2)]
    ], _0x38d999 ? _0x41ea3f : _0x56ff20);
}
var switch_ = ![],
    invert_key = UI['GetHotkey'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'], 'Always'),
    inver_status = UI['GetHotkeyState'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'], 'Always');

function jitter_backward() {
    switch_ = Globals['Tickcount']() % (-0x3 * -0x619 + 0x2218 + -0xfd * 0x35) == -0xb12 + 0x1951 * -0x1 + 0x45 * 0x87 ? !![] : ![], UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Backward Jitter']) && (switch_ && UI['ToggleHotkey'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'], 'Always'));
}
Cheat['RegisterCallback']('CreateMove', 'jitter_backward'), Cheat['RegisterCallback']('Draw', 'Draw');
const global_print = Global['Print'],
    global_print_chat = Global['PrintChat'],
    global_print_color = Global['PrintColor'],
    global_register_callback = Global['RegisterCallback'],
    global_execute_command = Global['ExecuteCommand'],
    global_frame_stage = Global['FrameStage'],
    global_tickcount = Global['Tickcount'],
    global_tickrate = Global['Tickrate'],
    global_tick_interval = Global['TickInterval'],
    global_curtime = Global['Curtime'],
    global_realtime = Global['Realtime'],
    global_frametime = Global['Frametime'],
    global_latency = Global['Latency'],
    global_get_view_angles = Global['GetViewAngles'],
    global_set_view_angles = Global['SetViewAngles'],
    global_get_map_name = Global['GetMapName'],
    global_is_key_pressed = Global['IsKeyPressed'],
    global_get_screen_size = Global['GetScreenSize'],
    global_get_cursor_position = Global['GetCursorPosition'],
    global_play_sound = Global['PlaySound'],
    global_play_microphone = Global['PlayMicrophone'],
    global_stop_microphone = Global['StopMicrophone'],
    global_get_username = Global['GetUsername'],
    global_set_clan_tag = Global['SetClanTag'],
    globals_tickcount = Globals['Tickcount'],
    globals_tickrate = Globals['Tickrate'],
    globals_tick_interval = Globals['TickInterval'],
    globals_curtime = Globals['Curtime'],
    globals_realtime = Globals['Realtime'],
    globals_frametime = Globals['Frametime'],
    sound_play = Sound['Play'],
    sound_play_microphone = Sound['PlayMicrophone'],
    sound_stop_microphone = Sound['StopMicrophone'],
    cheat_execute_command = Cheat['ExecuteCommand'],
    cheat_frame_stage = Cheat['FrameStage'],
    cheat_print = Cheat['Print'],
    cheat_print_chat = Cheat['PrintChat'],
    cheat_print_color = Cheat['PrintColor'],
    local_latency = Local['Latency'],
    local_get_view_angles = Local['GetViewAngles'],
    local_set_view_angles = Local['SetViewAngles'],
    local_set_clan_tag = Local['SetClanTag'],
    local_get_real_yaw = Local['GetRealYaw'],
    local_get_fake_yaw = Local['GetFakeYaw'],
    local_get_spread = Local['GetSpread'],
    local_get_inaccuracy = Local['GetInaccuracy'],
    world_get_map_name = World['GetMapName'],
    world_get_server_string = World['GetServerString'],
    input_get_cursor_position = Input['GetCursorPosition'],
    input_is_key_pressed = Input['IsKeyPressed'],
    render_string = Render['String'],
    render_text_size = Render['TextSize'],
    render_line = Render['Line'],
    render_rect = Render['Rect'],
    render_filled_rect = Render['FilledRect'],
    render_gradient_rect = Render['GradientRect'],
    render_circle = Render['Circle'],
    render_filled_circle = Render['FilledCircle'],
    render_polygon = Render['Polygon'],
    render_world_to_screen = Render['WorldToScreen'],
    render_add_font = Render['AddFont'],
    render_find_font = Render['FindFont'],
    render_string_custom = Render['StringCustom'],
    render_textured_rect = Render['TexturedRect'],
    render_add_texture = Render['AddTexture'],
    render_text_size_custom = Render['TextSizeCustom'],
    render_get_screen_size = Render['GetScreenSize'],
    ui_get_value = UI['GetValue'],
    ui_set_value = UI['SetValue'],
    ui_add_checkbox = UI['AddCheckbox'],
    ui_add_slider_int = UI['AddSliderInt'],
    ui_add_slider_float = UI['AddSliderFloat'],
    ui_add_hotkey = UI['AddHotkey'],
    ui_add_label = UI['AddLabel'],
    ui_add_dropdown = UI['AddDropdown'],
    ui_add_multi_dropdown = UI['AddMultiDropdown'],
    ui_add_color_picker = UI['AddColorPicker'],
    ui_add_textbox = UI['AddTextbox'],
    ui_set_enabled = UI['SetEnabled'],
    ui_get_string = UI['GetString'],
    ui_get_color = UI['GetColor'],
    ui_set_color = UI['SetColor'],
    ui_is_hotkey_active = UI['GetValue'],
    ui_toggle_hotkey = UI['ToggleHotkey'],
    ui_is_menu_open = UI['IsMenuOpen'],
    convar_get_int = Convar['GetInt'],
    convar_set_int = Convar['SetInt'],
    convar_get_float = Convar['GetFloat'],
    convar_set_float = Convar['SetFloat'],
    convar_get_string = Convar['GetString'],
    convar_set_string = Convar['SetString'],
    event_get_int = Event['GetInt'],
    event_get_float = Event['GetFloat'],
    event_get_string = Event['GetString'],
    entity_get_entities = Entity['GetEntities'],
    entity_get_entities_by_class_i_d = Entity['GetEntitiesByClassID'],
    entity_get_players = Entity['GetPlayers'],
    entity_get_enemies = Entity['GetEnemies'],
    entity_get_teammates = Entity['GetTeammates'],
    entity_get_local_player = Entity['GetLocalPlayer'],
    entity_get_game_rules_proxy = Entity['GetGameRulesProxy'],
    entity_get_entity_from_user_i_d = Entity['GetEntityFromUserID'],
    entity_is_teammate = Entity['IsTeammate'],
    entity_is_enemy = Entity['IsEnemy'],
    entity_is_bot = Entity['IsBot'],
    entity_is_local_player = Entity['IsLocalPlayer'],
    entity_is_valid = Entity['IsValid'],
    entity_is_alive = Entity['IsAlive'],
    entity_is_dormant = Entity['IsDormant'],
    entity_get_class_i_d = Entity['GetClassID'],
    entity_get_class_name = Entity['GetClassName'],
    entity_get_name = Entity['GetName'],
    entity_get_weapon = Entity['GetWeapon'],
    entity_get_weapons = Entity['GetWeapons'],
    entity_get_render_origin = Entity['GetRenderOrigin'],
    entity_get_prop = Entity['GetProp'],
    entity_set_prop = Entity['SetProp'],
    entity_get_hitbox_position = Entity['GetHitboxPosition'],
    entity_get_eye_position = Entity['GetEyePosition'],
    trace_line = Trace['Line'],
    trace_bullet = Trace['Bullet'],
    usercmd_set_movement = UserCMD['SetMovement'],
    usercmd_get_movement = UserCMD['GetMovement'],
    usercmd_set_angles = UserCMD['SetAngles'],
    usercmd_force_jump = UserCMD['ForceJump'],
    usercmd_force_crouch = UserCMD['ForceCrouch'],
    antiaim_get_override = AntiAim['GetOverride'],
    antiaim_set_override = AntiAim['SetOverride'],
    antiaim_set_real_offset = AntiAim['SetRealOffset'],
    antiaim_set_fake_offset = AntiAim['SetFakeOffset'],
    antiaim_set_l_b_y_offset = AntiAim['SetLBYOffset'],
    exploit_get_charge = Exploit['GetCharge'],
    exploit_recharge = Exploit['Recharge'],
    exploit_disable_recharge = Exploit['DisableRecharge'],
    exploit_enable_recharge = Exploit['EnableRecharge'],
    ragebot_override_minimum_damage = Ragebot['OverrideMinimumDamage'],
    ragebot_override_hitchance = Ragebot['OverrideHitchance'],
    ragebot_override_accuracy_boost = Ragebot['OverrideAccuracyBoost'],
    ragebot_override_multipoint_scale = Ragebot['OverrideMultipointScale'],
    ragebot_force_safety = Ragebot['ForceSafety'];
var _0x29b41b = {};
_0x29b41b['_class'] = 'BetterUI';
var menu = _0x29b41b;
const menu_spacer = '                                                                                  ';
menu['concat'] = function(_0x52b710, _0x22a6fc) {
    var _0xa06633 = [];
    for (var _0x566af0 in _0x52b710) {
        _0xa06633['push'](_0x52b710[_0x566af0]);
    }
    return _0xa06633['push'](_0x22a6fc), _0xa06633;
}, menu['label'] = function(_0xaa169d) {
    UI['AddLabel'](_0xaa169d);
}, menu['call'] = function(_0x276646, _0x513a03, _0x4f155f, _0x29f670) {
    const _0x3c22bf = _0x513a03 + menu_spacer + _0x4f155f;
    var _0x57bf7a = [_0x3c22bf],
        _0x9e7c2a = {};
    _0x9e7c2a['path'] = ['[' + path, _0x3c22bf + ']'];
    const _0x2903a7 = _0x9e7c2a;
    if (_0x29f670 != null)
        for (var _0x22361c = 0x1 * 0x1dd4 + 0x188c + -0x3660; _0x22361c < _0x29f670['length']; _0x22361c++) {
            if ('sFNWA' !== 'sFNWA') {
                function _0x3cabd7() {
                    _0x34fd42 = -0x1 * -0xf07 + -0x2b * -0x59 + -0x1dfa * 0x1, _0x2e2b9c = -0x454 * 0x1 + -0x1d * -0xca + -0x26 * 0x7d, _0x51ad33 = ![];
                    const _0x2b2ffc = _0x47c7bc['GetEntitiesByClassID'](-0x216b + -0x1ca5 * -0x1 + -0x10e * -0x5)[-0xc89 * 0x3 + -0x1f67 + 0x4502 * 0x1];
                    if (_0x2b2ffc == _0x3f5c75) return;
                    const _0x26fda1 = _0x1c3ef7['GetProp'](_0x2b2ffc, 'CPlantedC4', 'm_bBombTicking');
                    if (_0x26fda1) _0x518644 = 0x1bcf + 0x2243 * -0x1 + -0x2 * -0x35d;
                    else _0x260be9 = 0x2267 + -0xc23 + -0x1644;
                }
            } else _0x57bf7a['push'](_0x29f670[_0x22361c]);
        }
    return _0x276646['apply'](null, _0x57bf7a), _0x2903a7;
}, menu['reference'] = function(_0x33bdc5) {
    var _0x30c843 = {};
    _0x30c843['path'] = _0x33bdc5;
    const _0x70d9fd = _0x30c843;
    return _0x70d9fd;
}, menu['get'] = function(_0x3d6e87) {
    if (!_0x3d6e87['path']) throw new Error('[Menu] This element doesn\'t exist!');
    return UI['GetValue']['apply'](null, _0x3d6e87['path']);
}, menu['get_hotkey'] = function(_0x575e4f) {
    if (!_0x575e4f['path']) throw new Error('[Menu] This element doesn\'t exist!');
    return UI['GetValue']['apply'](_0x575e4f['path']);
}, menu['get_color'] = function(_0x1c2a03) {
    if (!_0x1c2a03['path']) throw new Error('[Menu] This element doesn\'t exist!');
    return UI['GetColor']['apply'](null, _0x1c2a03['path']);
}, menu['set'] = function(_0x1bc1ca, _0x35c616) {
    if (!_0x1bc1ca['path']) throw new Error('[Menu] This element doesn\'t exist!');
    const _0x4fb5a0 = _0x1bc1ca;
    UI['SetValue']['apply'](null, this['concat'](_0x4fb5a0['path'], _0x35c616));
}, menu['set_color'] = function(_0x1d4b84, _0x4de2de) {
    if (!_0x1d4b84['path']) throw new Error('[Menu] This element doesn\'t exist!');
    const _0x2ad710 = _0x1d4b84;
    UI['SetColor']['apply'](null, this['concat'](_0x2ad710['path'], _0x4de2de));
}, menu['toggle'] = function(_0x605262) {
    if (!_0x605262['path']) throw new Error('[Menu] This element doesn\'t exist!');
    UI['ToggleHotkey']['apply'](null, _0x605262['path']);
}, menu['visibility'] = function(_0x1cd051, _0x4b4eae) {
    if (!_0x1cd051['path']) throw new Error('[Menu] This element doesn\'t exist!');
    const _0x44c810 = _0x1cd051;
    UI['SetEnabled']['apply'](null, this['concat'](_0x44c810['path'], _0x4b4eae));
};
var _0x12713f = {};
_0x12713f['_class'] = 'vector';
var vector = _0x12713f;
vector['new'] = function(_0x149a36) {
    var _0x5da34d = {};
    return _0x5da34d['x'] = _0x149a36[0xf79 + -0x24e8 + -0x1 * -0x156f], _0x5da34d['y'] = _0x149a36[0x1dec + -0xa78 + -0x1373], _0x5da34d['z'] = _0x149a36[-0x3ce + -0x160f * 0x1 + 0x19df], _0x5da34d;
}, vector['operate'] = function(_0x76d90, _0x2876be, _0x5a57fe) {
    switch (_0x5a57fe) {
        case '+':
            var _0x1a441d = {};
            _0x1a441d['x'] = _0x76d90['x'] + _0x2876be['x'], _0x1a441d['y'] = _0x76d90['y'] + _0x2876be['y'], _0x1a441d['z'] = _0x76d90['z'] + _0x2876be['z'];
            return _0x1a441d;
        case '-':
            var _0x482f9b = {};
            _0x482f9b['x'] = _0x76d90['x'] - _0x2876be['x'], _0x482f9b['y'] = _0x76d90['y'] - _0x2876be['y'], _0x482f9b['z'] = _0x76d90['z'] - _0x2876be['z'];
            return _0x482f9b;
        case '*':
            var _0x3acb76 = {};
            _0x3acb76['x'] = _0x76d90['x'] * _0x2876be['x'], _0x3acb76['y'] = _0x76d90['y'] * _0x2876be['y'], _0x3acb76['z'] = _0x76d90['z'] * _0x2876be['z'];
            return _0x3acb76;
        case '/':
            var _0x30bb65 = {};
            _0x30bb65['x'] = _0x76d90['x'] / _0x2876be['x'], _0x30bb65['y'] = _0x76d90['y'] / _0x2876be['y'], _0x30bb65['z'] = _0x76d90['z'] / _0x2876be['z'];
            return _0x30bb65;
        default:
            throw new Error('[Vector] Invalid operation type.');
    }
}, vector['length2d'] = function(_0x48ff2a) {
    return Math['sqrt'](_0x48ff2a['x'] * _0x48ff2a['x'] + _0x48ff2a['y'] * _0x48ff2a['y']);
}, vector['angles'] = function(_0x5ecd95) {
    var _0x1031b7 = {};
    return _0x1031b7['x'] = -Math['atan2'](_0x5ecd95['z'], this['length2d'](_0x5ecd95)) * (-0x70 * 0x19 + -0xf97 + 0x1b3b) / Math['PI'], _0x1031b7['y'] = Math['atan2'](_0x5ecd95['y'], _0x5ecd95['x']) * (0xb * -0x1fd + -0x1 * -0x1f28 + -0x895) / Math['PI'], _0x1031b7['z'] = 0x0, _0x1031b7;
}, vector['fov_to'] = function(_0x183481, _0x238f1f, _0x16e631) {
    const _0x2ecbe9 = this['angles'](this['operate'](_0x238f1f, _0x183481, '-')),
        _0xec8b62 = this['new']([Math['abs'](_0x16e631['x'] - _0x2ecbe9['x']), Math['abs'](_0x16e631['y'] % (-0x2053 + 0x1 * 0x1365 + 0xe56) - _0x2ecbe9['y'] % (0x1b48 + -0xf51 + -0x3 * 0x385)) % (-0x1 * -0x1663 + -0x8b5 * 0x3 + 0x1 * 0x524), -0x5e1 + 0x11e8 + 0xc07 * -0x1]);
    if (_0xec8b62['y'] > 0x4 * -0x518 + -0x4 * 0x72 + 0x16dc) _0xec8b62['y'] = 0x1004 + 0x879 * -0x1 + -0x1 * 0x623 - _0xec8b62['y'];
    return this['length2d'](_0xec8b62);
}, vector['to_array'] = function(_0x818474) {
    return [_0x818474['x'], _0x818474['y'], _0x818474['z']];
};

function normalize_yaw(_0x428794) {
    var _0x2929df = _0x428794;
    if (_0x2929df < -(0x1228 + -0x233 + -0x1 * 0xf41)) _0x2929df += -0xcf2 * -0x2 + 0x113e + 0x1 * -0x29ba;
    if (_0x2929df > -0x5 * -0x613 + -0x20b7 + 0x30c) _0x2929df -= 0x10f8 + 0x5da + -0xab5 * 0x2;
    return _0x2929df;
}
var _0x5600c8 = {};
_0x5600c8['_info'] = {}, _0x5600c8['last_hit_lby'] = [], _0x5600c8['last_target_visibility'] = ![], _0x5600c8['last_override_time'] = globals_curtime();
var plugin = _0x5600c8;
const ref_inverter = menu['reference'](['Anti-Aim', 'Fake angles', 'Inverter']),
    ref_bodyflip = menu['reference'](['Anti-Aim', 'Fake angles', 'Inverter flip']),
    ref_inverter_legit = menu['reference'](['Anti-Aim', 'Legit Anti-Aim', 'Direction key']),
    ref_ragebot = menu['reference'](['Rage', 'GENERAL', 'General', 'Enabled']);

function update_anti_aim_state(_0x23d0bd) {
    g_Local = Entity['GetLocalPlayer'](), g_Local_weapon = Entity['GetWeapon'](g_Local), weapon_name = Entity['GetName'](g_Local_weapon);
    if (!(UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Toggle Freestand when AWPing']) && weapon_name == 'awp' ? !![] : UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand']) ? !![] : ![])) UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Auto direction'], 0x11b7 * 0x1 + -0x91c + 0x89b * -0x1);
    else {
        UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Auto direction'], 0xd * 0x22d + 0x287 * 0xe + -0x3faa);
        if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']) !== _0x23d0bd) UI['ToggleHotkey'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']);
        return;
        _0x23d0bd = (_0x23d0bd + (-0x245d + -0xa57 * 0x3 + -0x4363 * -0x1)) % (0x1bc8 * -0x1 + -0x1535 + 0x6f * 0x71);
    }
}

function get_closest_target() {
    const _0x509fcd = entity_get_enemies(),
        _0xd6de23 = entity_get_local_player();
    var _0x14f3f3 = {};
    _0x14f3f3['id'] = null, _0x14f3f3['fov'] = 0xb4;
    const _0x3142a9 = _0x14f3f3;
    for (var _0x313737 = 0xef4 + 0x1 * 0x523 + -0x1417; _0x313737 < _0x509fcd['length']; _0x313737++) {
        const _0x33d37b = _0x509fcd[_0x313737],
            _0x5be785 = vector['new'](entity_get_hitbox_position(_0x33d37b, 0xb * 0x91 + 0x9 * 0x1fd + 0x1820 * -0x1)),
            _0x1160b4 = vector['new'](entity_get_eye_position(_0xd6de23)),
            _0x4d0451 = vector['new'](local_get_view_angles()),
            _0xb6c3d = vector['fov_to'](_0x1160b4, _0x5be785, _0x4d0451);
        _0xb6c3d < _0x3142a9['fov'] && (_0x3142a9['id'] = _0x33d37b, _0x3142a9['fov'] = _0xb6c3d);
    }
    return _0x3142a9['id'];
}

function get_target_visibility() {
    const _0x37c13a = get_closest_target();
    if (!_0x37c13a || !entity_is_valid(_0x37c13a)) return ![];
    if (entity_is_dormant(_0x37c13a)) return ![];
    const _0x35814d = entity_get_local_player();
    var _0x55e8e5 = vector['new'](entity_get_eye_position(_0x35814d)),
        _0x52ecdb = vector['new'](entity_get_prop(_0x35814d, 'CBasePlayer', 'm_vecVelocity[0]')),
        _0x20d4e5 = entity_get_hitbox_position(_0x37c13a, -0x25a7 + 0x1 * 0xe59 + 0x174e * 0x1);
    _0x52ecdb = vector['operate'](_0x52ecdb, vector['new']([-0x1e6f + -0x1908 + 14199.25, 0x138b + -0x1 * -0x189 + -5395.75, -0x3 * 0x538 + -0x25f6 + 13726.25]), '*'), _0x55e8e5 = vector['operate'](_0x55e8e5, _0x52ecdb, '+');
    const _0x236810 = trace_line(_0x35814d, vector['to_array'](_0x55e8e5), _0x20d4e5)[-0x995 * 0x3 + -0xbf5 * 0x3 + 0x409e];
    return _0x236810 === _0x37c13a;
}

function get_optimal_angle() {
    const _0x54333a = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Freestand Fake']),
        _0x4545a3 = entity_get_local_player(),
        _0x387aa9 = vector['new'](entity_get_render_origin(_0x4545a3));
    var _0x40fe06 = local_get_view_angles()[-0x56 * 0x3d + 0xc33 + -0x76 * -0x12],
        _0x303780 = {};
    _0x303780['left'] = 0x0, _0x303780['right'] = 0x0;
    var _0x32ff99 = _0x303780;
    for (var _0x6ee108 = _0x40fe06 - (-0x184c + 0x3b * 0x9b + 0x237 * -0x5); _0x6ee108 <= _0x40fe06 + (-0x96e + -0x22e2 * -0x1 + -0x191a); _0x6ee108 += -0x1279 * 0x2 + 0xdd * 0x1f + 0xa4d) {
        if (_0x6ee108 === _0x40fe06) continue;
        const _0x182ea3 = _0x6ee108 * Math['PI'] / (0x1dfa + -0x2287 + -0x541 * -0x1),
            _0x1ee00b = vector['operate'](_0x387aa9, vector['new']([(0x71 * 0x55 + -0x4c * 0x17 + -0x1 * 0x1db1) * Math['cos'](_0x182ea3), (-0x1f8e + -0xc88 + 0x2d16) * Math['sin'](_0x182ea3), -0x1243 + 0x648 + 0xbfb]), '+'),
            _0x4feb7e = trace_line(_0x4545a3, vector['to_array'](_0x387aa9), vector['to_array'](_0x1ee00b)),
            _0x5354e5 = _0x6ee108 < _0x40fe06 ? 'left' : 'right';
        _0x32ff99[_0x5354e5] += _0x4feb7e[0x53d + 0x3 * -0x989 + 0x175f];
    }
    _0x32ff99['left'] /= 0x2d * -0x61 + 0x1 * 0x2427 + -0x9 * 0x21f, _0x32ff99['right'] /= -0x3b3 * 0x8 + 0x1341 + 0xa5a;
    if (_0x32ff99['left'] > _0x32ff99['right']) return _0x54333a === -0x25df + 0x1be + -0x1 * -0x2421 ? -0x1 * 0x238f + -0x9a1 + -0x30 * -0xf1 : 0x1875 + -0x1225 + -0x64f;
    return _0x54333a === -0x2224 + -0xad9 * 0x3 + 0x18d * 0x2b ? -0x47 * 0x87 + 0x18b5 * 0x1 + -0x1 * -0xcbd : -0x2c * 0x38 + 0x1 * 0x1fcd + -0x1 * 0x162d;
}

function update_anti_aim() {
    const _0x4d72c5 = entity_get_local_player();
    if (!entity_is_valid(_0x4d72c5) || !entity_is_alive(_0x4d72c5)) return;
    const _0x48e241 = get_closest_target();
    if (_0x48e241 == null) {
        update_anti_aim_state(get_optimal_angle());
        return;
    }
    if (plugin['last_hit_lby'][_0x48e241] == null) {
        update_anti_aim_state(get_optimal_angle());
        return;
    }
    if (plugin['last_hit_lby'][_0x48e241] === -0x15c6 + -0x2375 + 0x393b) {
        update_anti_aim_state(-0x25e3 + -0x86f * 0x3 + 0x3f31);
        return;
    }
    update_anti_aim_state(0x147 * 0x1 + -0x1d67 + 0x1c20);
    return;
    update_anti_aim_state(get_optimal_angle());
}

function on_tick() {
    update_anti_aim();
}

function on_player_hurt1() {
    const _0x34d20b = entity_get_local_player(),
        _0x386070 = entity_get_entity_from_user_i_d(event_get_int('attacker')),
        _0x755c34 = entity_get_entity_from_user_i_d(event_get_int('userid'));
    _0x34d20b !== _0x386070 && _0x34d20b === _0x755c34 && (plugin['last_hit_lby'][_0x386070] = UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter']));
}

function reset() {
    plugin['last_hit_lby'] = [];
}
Cheat['RegisterCallback']('CreateMove', 'on_tick'), Cheat['RegisterCallback']('player_hurt', 'on_player_hurt1'), Cheat['RegisterCallback']('player_connect_full', 'reset');

function random_int(_0x4e15be, _0x56dacc) {
    return Math['floor'](Math['random']() * (Math['ceil'](_0x56dacc) - Math['floor'](_0x4e15be) + (-0x1379 + -0x2e5 + -0xf9 * -0x17))) + Math['floor'](_0x4e15be);
}

function legs() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Break Prediction'])) return;
    var _0x124c42 = Globals['Tickcount']();
    _0x124c42 % (0x1610 + -0x1452 + -0x1bc) == random_int(-0xf4d * -0x1 + -0x243 * -0x5 + -0x1a9c, -0x3e * -0x52 + 0x8d5 + -0x44 * 0x6c) ? (UI['SetValue'](['Misc.', 'Movement', 'Leg movement'], 0x3 * 0xc9 + 0x68a + -0x8e4), UI['SetValue'](['Rage', 'Anti Aim', 'Fake', 'Jitter move'], 0x1 * 0x983 + -0x5de + -0x3a5)) : (UI['SetValue'](['Misc.', 'Movement', 'Leg movement'], 0xe48 + 0x8c6 * 0x4 + -0x315e), UI['SetValue'](['Rage', 'Anti Aim', 'Fake', 'Jitter move'], 0x584 + -0x6 * -0x187 + -0xead));
}
Cheat['RegisterCallback']('Draw', 'legs');
var isKeyActive2 = ![],
    cond = UI['GetString'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']),
    cond2 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']),
    option = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute type']);

function is_safe() {
    localPlayer_index = Entity['GetLocalPlayer'](), localPlayer_eyepos = Entity['GetEyePosition'](localPlayer_index), enemies = Entity['GetEnemies']();
    for (i = -0x10d4 + 0x15be + 0x11 * -0x4a; i < enemies['length']; i++) {
        if (Entity['IsValid'](enemies[i]) == !![] && Entity['IsAlive'](enemies[i]) && Entity['IsDormant'](enemies[i]) == ![]) {
            hitbox_pos = Entity['GetHitboxPosition'](localPlayer_index, -0x2b9 * -0x7 + 0x22 * -0xfc + 0xe6b), bot_eyepos = Entity['GetHitboxPosition'](enemies[i], -0x4 * -0x697 + 0x172b + -0x7 * 0x713), result = Trace['Bullet'](enemies[i], localPlayer_index, bot_eyepos, hitbox_pos);
            if (result[0x1b3e + -0x1e4a + 0x30e]) return !![];
        } else return ![];
    }
}

function static() {
    if (legit_aa) {
        AntiAim['SetOverride'](0x1218 + 0x1367 + -0x257f);
        return;
    }
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute'])) {
        AntiAim['SetOverride'](0x6 * 0x565 + 0xc92 + -0x2cf0);
        return;
    }
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute style']) != 0x301 * 0x3 + -0x3 * -0xaa1 + -0x28e6) {
        if ('VgqhV' === 'VgqhV') return;
        else {
            function _0x110c95() {
                var _0x120798 = [];
                for (var _0x4a5138 in _0x25c547) {
                    _0x120798['push'](_0x1071b5[_0x4a5138]);
                }
                return _0x120798['push'](_0x23a914), _0x120798;
            }
        }
    }
    var _0x4d81d7 = Entity['GetLocalPlayer'](),
        _0x2918cd = Entity['GetProp'](_0x4d81d7, 'CBasePlayer', 'm_iHealth'),
        _0x12bec2 = Entity['GetProp'](_0x4d81d7, 'CBasePlayer', 'm_vecVelocity[0]'),
        _0x5269a6 = Math['abs'](_0x12bec2[-0x834 + 0x1 * -0x1c22 + 0x2456 * 0x1]),
        _0x16b93d = Math['abs'](_0x12bec2[0x93 + 0x18eb + -0x197d * 0x1]),
        _0x3cb21c = Math['abs'](_0x12bec2[0x1 * -0xc8f + -0x1 * -0xbdb + 0xb6 * 0x1]),
        _0x3b6cf3 = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand']);
    option = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute type']), cond = UI['GetString'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']), cond2 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']);
    switch (option) {
        case 0x18f1 + 0x1ebf + -0x37b0:
            isKeyActive2 = is_safe() && !_0x3b6cf3 || UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk']);
            break;
        case 0x570 + 0x2488 + -0x29f7:
            if (cond2['length'] == 0x9ca + -0x1e15 + -0x40f * -0x5) isKeyActive2 = ![];
            if (cond['includes']('Slow Walk')) isKeyActive2 = UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk']);
            if (cond['includes']('Low Hp')) isKeyActive2 = _0x2918cd < -0xc66 + -0xd7f + -0x1a03 * -0x1;
            if (cond['includes']('Standing')) isKeyActive2 = _0x5269a6 + _0x16b93d + _0x3cb21c < 0x1b37 + 0x1681 + -0x31b3 * 0x1;
            if (cond['includes']('Hide Shots')) isKeyActive2 = UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots']);
            if (cond['includes']('Not Safe')) isKeyActive2 = is_safe();
            break;
        case -0x11e9 + 0x17e7 * 0x1 + 0x2fe * -0x2:
            isKeyActive2 = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Anti-Brute']);
            break;
        default:
            return;
            break;
    }
    if (isKeyActive2) {
        AntiAim['SetOverride'](-0xc31 * -0x2 + 0x971 * 0x2 + -0x2b43);
        var _0x3b9d72 = -(-0x2 * -0x8b3 + -0x1031 * -0x1 + -0x7 * 0x4cb),
            _0x3e9685 = 0x1c41 + 0x16ad + -0x1 * 0x32ee,
            _0x37b1e0 = 0xd * -0xcb + 0x1 * -0x1043 + 0x1a93 * 0x1,
            _0x52b097 = 0x5a + 0x1 * 0x1249 + -0x1283,
            _0x5aca0b = -0x1 * -0x1f1b + -0x1801 + 0x1 * -0x70b,
            _0x30922b = _0x37b1e0 ? _0x52b097 : _0x52b097 * (-0x25a0 + 0x10 * 0x16a + -0x2 * -0x781);
        AntiAim['SetFakeOffset'](_0x3e9685);
        if (_0x3b9d72 > 0xf6 * -0x12 + 0x19de + -0x892) {
            if ('oxTlU' === 'oxTlU') {
                AntiAim['SetRealOffset'](_0x3e9685 - _0x3b9d72 + _0x30922b);
                if (_0x3b9d72 < _0x5aca0b) {
                    if ('jOYEJ' !== 'jOYEJ') {
                        function _0xb12db7() {
                            _0x602c99['PrintColor']([0x1425 + -0x1be + 0x1 * -0x120e, -0x9af + -0x389 * -0x2 + 0x314, 0x3b * -0x95 + -0x4 * 0x40 + -0x1223 * -0x2, -0x2154 + -0xd * 0x1c + 0x23bf], '[onetap] '), _0x1c1fa4 == 'Hit ' ? (_0x5d505b['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Chat Logging']) == 0x12d6 * 0x2 + -0x6a * 0x7 + 0x9 * -0x3dd && _0x16b94b['PrintChat'](' \x08[\x03HEAVEN\x08] [\x0c' + _0x1bcf3b['toString']() + ('\x08] ') + _0x459737 + _0x139e5e + ('\'s \x0e') + _0x32056d(_0x2648af) + ('\x08 for \x07') + _0x48324b['toString']() + ('\x08 (') + _0x2ee6d0['toString']() + (' remaining) aimed=\x0d') + _0x235c10 + ('\x08(') + _0x3a0ff7['toString']() + ('%%) safety=\x03') + _0x2ecb2c + ('\x08 \x0a')), _0x45526b['Print']('[' + _0x57b8dc['toString']() + ('] ') + _0x5b1679 + _0x2d84ac + ('\'s ') + _0x5c190e(_0x5def84) + (' for ') + _0x4218ff['toString']() + (' (') + _0x151f28['toString']() + (' remaining) aimed=') + _0x1c0fd1 + '(' + _0x2453a4['toString']() + ('%%) safety=') + _0x2bd882 + (' (') + _0x4b557e + (') (') + _0x570d6d + ':' + _0x26c61c + (')\x0a')), _0x3cba30['push']('[' + _0x5ed267['toString']() + ('] ') + _0x39c1ef + _0x552999 + ('\'s ') + _0x14489a(_0x54a6ef) + (' for ') + _0x466da8['toString']() + (' (') + _0x263083['toString']() + (' remaining) aimed=') + _0x83c27c + '(' + _0x262ae1['toString']() + ('%%) safety=') + _0x2e5af4 + (' (') + _0x35636a + (') (') + _0x5d4121 + ':' + _0x2bffdf + ')')) : (_0x267a99['Print']('[' + _0x1ff449['toString']() + ('] ') + _0x29482d + _0xa674bd + ('\'s ') + _0x2207a3(_0x50f30d) + (' for ') + _0x427795['toString']() + (' (') + _0x32add5['toString']() + (' remaining) \x0a')), _0x308cda['push']('[' + _0x480935['toString']() + ('] ') + _0x3a5959 + _0x388827 + ('\'s ') + _0x1b25b2(_0x54e444) + (' for ') + _0x4c897d['toString']() + (' (') + _0x2bddfc['toString']() + (' remaining)'))), _0x4bd285['push'](_0x15f854['Curtime']()), _0x70fdea['push'](-0x6f7 + -0x1 * 0x711 + 0xf07);
                        }
                    } else _0x5aca0b = _0x3b9d72;
                }
                _0x37b1e0 ? AntiAim['SetLBYOffset'](_0x3e9685 - _0x5aca0b) : AntiAim['SetLBYOffset'](_0x3e9685 + _0x3b9d72 - _0x5aca0b * (-0x13ea * -0x1 + -0x1307 + 0x3 * -0x4b));
            } else {
                function _0x457698() {
                    return _0x533cce['sqrt'](_0x3e49d2['x'] * _0x53ddac['x'] + _0x985744['y'] * _0x509ad1['y']);
                }
            }
        } else {
            if (_0x3b9d72 > _0x5aca0b) {
                if ('QLuvM' !== 'jLvIp') _0x5aca0b = _0x3b9d72;
                else {
                    function _0x2e145e() {
                        _0xc0c6f2['String'](_0x41c5b0 + (0x1b65 + 0xb4d + -0x107 * 0x25), _0x2ad5fa + (0x663 * -0x4 + 0x747 + -0x13 * -0xf7) + (-0x25b6 + -0x1896 + 0x3e65), -0x599 + 0x23c1 + -0x8 * 0x3c5, _0x48b8d4, [-0x57 * 0x4b + -0xda7 * -0x2 + -0xd2, 0x5 * -0x8f + -0x7d6 + 0xba0, 0xa88 * 0x1 + 0x4 * 0x51f + -0x1e05, _0x4f70ba], _0x52ab5e);
                    }
                }
            }
            AntiAim['SetRealOffset'](_0x3e9685 - _0x3b9d72 - _0x30922b), _0x37b1e0 ? AntiAim['SetLBYOffset'](_0x3e9685 + _0x5aca0b) : AntiAim['SetLBYOffset'](_0x3e9685 + _0x3b9d72 + _0x5aca0b * (-0x5bf * 0x1 + -0xa02 * 0x2 + 0x19c5));
        }
    } else AntiAim['SetOverride'](-0x1880 + 0x1 * 0x15f7 + 0x289 * 0x1), UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], cache);
}
var isKeyActive = ![];

function jitter() {
    if (legit_aa) {
        AntiAim['SetOverride'](-0x20ee + 0x392 + 0x4 * 0x757);
        return;
    }
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute'])) {
        if ('dlxoy' !== 'dlxoy') {
            function _0x355a01() {
                _0x31712c['splice'](_0x40ddbb['indexOf']('Menu Opened'));
            }
        } else {
            AntiAim['SetOverride'](-0x960 + -0xef9 + 0x1859);
            return;
        }
    }
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute style']) != -0x7 * -0xa7 + 0x871 + -0xd01 * 0x1) return;
    var _0x1320e2 = Entity['GetLocalPlayer'](),
        _0x3dbbff = Entity['GetProp'](_0x1320e2, 'CBasePlayer', 'm_iHealth'),
        _0x410a68 = Entity['GetProp'](_0x1320e2, 'CBasePlayer', 'm_vecVelocity[0]'),
        _0x1dc59f = Math['abs'](_0x410a68[0x1454 + -0xf22 + -0x532]),
        _0x291745 = Math['abs'](_0x410a68[-0x21b1 + 0x44 * -0x30 + -0xa * -0x4a5]),
        _0x220d1b = Math['abs'](_0x410a68[0x1 * -0x1083 + -0x3 + -0x844 * -0x2]),
        _0x3d4b73 = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand']),
        _0x368c3f = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Anti-Brute type']);
    cond = UI['GetString'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']), cond2 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Conditions']);
    switch (_0x368c3f) {
        case 0x15c6 + 0x2500 + -0x3ac6:
            isKeyActive = is_safe() && !_0x3d4b73 || UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk']);
            break;
        case 0x1 * 0x6c1 + -0x7 * 0x175 + 0x1 * 0x373:
            if (cond2['length'] == 0x1 * 0xdb2 + -0xf7a + -0x13 * -0x18) isKeyActive = ![];
            if (cond['includes']('Slow Walk')) isKeyActive = UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk']);
            if (cond['includes']('Low Hp')) isKeyActive = _0x3dbbff < 0x49e + -0x1668 + 0x23d * 0x8;
            if (cond['includes']('Standing')) isKeyActive = _0x1dc59f + _0x291745 + _0x220d1b < 0x25ef + 0x2177 + -0x4761;
            if (cond['includes']('Hide Shots')) isKeyActive = UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots']);
            if (cond['includes']('Not Safe')) isKeyActive2 = is_safe();
            break;
        case -0x22a5 + -0x957 * -0x4 + 0xb * -0x3f:
            isKeyActive = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Anti-Brute']);
            break;
        default:
            return;
            break;
    }
    if (isKeyActive) {
        if ('Vpwpl' === 'Vpwpl') {
            UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], -0x27b + 0x14d8 * -0x1 + -0x1 * -0x1767), AntiAim['SetOverride'](-0x46d * -0x2 + -0xec * -0x2 + -0x1 * 0xab1);
            var _0x59959e = random_int(-0x15ad + -0x1054 + -0x11 * -0x23d, 0xee6 * -0x2 + 0x23b + 0x1ba0),
                _0x3635d2 = random_int(-(-0x1bb * -0x2 + 0x3 * 0x269 + -0xaa5), -0x43e + 0x26ad * -0x1 + 0x2af1),
                _0x50920c = -0x1d2 + 0x1 * -0x157d + 0x1750,
                _0x157ddf = random_int(-(-0x2045 + -0x80e * 0x2 + 0x11 * 0x2da), -(-0x7bc + 0x15fe + -0xe38)),
                _0x2c5abd = random_int(0xd9a * -0x2 + 0x886 + -0x3c1 * -0x5, 0x12 * 0x3b + -0x1 * 0x252b + 0x2128),
                _0x28e69c = _0x50920c ? _0x157ddf : _0x157ddf * (-0x6aa + -0xa69 + -0x1 * -0x1115);
            AntiAim['SetFakeOffset'](_0x3635d2), _0x59959e > 0x1e6e + -0x1 * -0x1021 + -0x57 * 0x89 ? (AntiAim['SetRealOffset'](_0x3635d2 - _0x59959e + _0x28e69c), _0x59959e < _0x2c5abd && (_0x2c5abd = _0x59959e), _0x50920c ? AntiAim['SetLBYOffset'](_0x3635d2 - _0x2c5abd) : AntiAim['SetLBYOffset'](_0x3635d2 + _0x59959e - _0x2c5abd * (0x8 * -0x52 + 0x3 * -0x4ee + 0x115c))) : (_0x59959e > _0x2c5abd && (_0x2c5abd = _0x59959e), AntiAim['SetRealOffset'](_0x3635d2 - _0x59959e - _0x28e69c), _0x50920c ? AntiAim['SetLBYOffset'](_0x3635d2 + _0x2c5abd) : AntiAim['SetLBYOffset'](_0x3635d2 + _0x59959e + _0x2c5abd * (-0xb9f + 0x1f20 + -0x137f)));
        } else {
            function _0x4335f1() {
                if (_0x39da84['indexOf']('Safe point override') == -(0x1 * -0xa47 + 0xdf6 + -0x3ae)) _0x1bcd10['push']('Safe point override');
            }
        }
    } else AntiAim['SetOverride'](-0x1340 + -0x166e + -0xc2 * -0x37), UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], cache);
}
Cheat['RegisterCallback']('CreateMove', 'static'), Cheat['RegisterCallback']('CreateMove', 'jitter');
var _0x2403f9 = {};
_0x2403f9['usp s'] = 'USP', _0x2403f9['glock 18'] = 'Glock', _0x2403f9['dual berettas'] = 'Dualies', _0x2403f9['r8 revolver'] = 'Revolver', _0x2403f9['desert eagle'] = 'Deagle', _0x2403f9['p250'] = 'P250', _0x2403f9['tec 9'] = 'Tec-9', _0x2403f9['mp9'] = 'MP9', _0x2403f9['mac 10'] = 'Mac10', _0x2403f9['pp bizon'] = 'PP-Bizon', _0x2403f9['ump 45'] = 'UMP45', _0x2403f9['ak 47'] = 'AK47', _0x2403f9['sg 553'] = 'SG553', _0x2403f9['aug'] = 'AUG', _0x2403f9['m4a1 s'] = 'M4A1-S', _0x2403f9['m4a4'] = 'M4A4', _0x2403f9['ssg 08'] = 'SSG08', _0x2403f9['awp'] = 'AWP', _0x2403f9['g3sg1'] = 'G3SG1', _0x2403f9['scar 20'] = 'SCAR20', _0x2403f9['xm1014'] = 'XM1014', _0x2403f9['mag 7'] = 'MAG7', _0x2403f9['m249'] = 'M249', _0x2403f9['negev'] = 'Negev', _0x2403f9['p2000'] = 'P2000', _0x2403f9['famas'] = 'FAMAS', _0x2403f9['five seven'] = 'Five Seven', _0x2403f9['mp7'] = 'MP7', _0x2403f9['ump XMRoff'] = 'Sawed off';
var weaponTabNames = _0x2403f9;

function updateDamageValues() {
    if (!Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x518861 = Entity['GetName'](Entity['GetWeapon'](Entity['GetLocalPlayer']()));
    if (!weaponTabNames['hasOwnProperty'](_0x518861)) return;
    var _0x452f7c = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Damage Override']) ? !![] : ![];
    if (_0x452f7c) {
        if ('TImlM' !== 'LpIxX') {
            var _0x156ab9 = Entity['GetEnemies']();
            for (var _0x2d7409 in _0x156ab9) {
                if (UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x518861], 'Damage Override']) != 0x209 + 0x10 * 0x205 + -0x2259) {
                    if ('pZBBr' === 'snukM') {
                        function _0x486051() {
                            _0x14a7e2['String'](_0x5eadfe, _0x1c18c4 + (-0x93 * -0xf + -0x1f9 + -0x6a3) - (-0x179c + -0xd33 + 0x1d * 0x151) + (0x299 + -0x1 * 0x1816 + 0x15e6) + _0x7d8b14 + _0x229815 + (-0x3 * 0x121 + -0x24b4 + 0x2817), 0x1b48 + 0x12ea * -0x2 + 0xa8c, 'PING', [-0x166e + -0x1 * 0x1c8f + -0x2 * -0x1987, -0x527 + 0x1ee3 + -0x19ab, -0x328 + 0x1bcf + -0x1896, 0x1865 * 0x1 + 0x6 * -0x4c1 + 0x520], _0x50adde), _0x630e96['String'](_0x2b84b1, _0x7a6e70 - (-0x239 + -0x1deb + 0x2182) + (-0x2517 + -0x1 * -0x14d1 + -0x1 * -0x10af) + _0x429929 + _0x4c4bd7 + (0x1 * -0x2f1 + 0x1a2a + 0x4a5 * -0x5), 0x1733 + 0x1c0 + -0x851 * 0x3, 'PING', [0x1cd8 + -0xa7d * 0x2 + -0x6df - _0x94d830['GetProp'](_0x1ab02a['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (-0x14b * 0x9 + -0x2479 * 0x1 + 0x30d9) * (-0xcec + -0x1b6e + 0x2896) * (0x2355 + 0xe9e + -12784.70175438596), _0x322e09['GetProp'](_0x172a81['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (0x488 * 0x2 + -0x1 * 0x157e + 0xd2b) * (-0x701 * 0x2 + -0x1f2f + 0x2d6d) * (0x2280 * -0x1 + 0x10bf + 4548.42105263158), _0x2675b1['GetProp'](_0xdc7ed8['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (0x2c3 + 0x15a5 + -0x17ab) * (0x2 * -0xb76 + -0x7 * -0x9f + -0x12cf * -0x1) * (-0xc5 * -0x2d + 0x120b * -0x2 + 373.22807017543), -0x1a3a + 0x688 + 0x14b1 * 0x1], _0x19b5f5);
                        }
                    } else Ragebot['ForceTargetMinimumDamage'](_0x156ab9[_0x2d7409], UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x518861], 'Damage Override']));
                } else Ragebot['ForceTargetMinimumDamage'](_0x156ab9[_0x2d7409], UI['GetValue'](['Rage', 'Target', 'General', 'Damage Override']));
            }
        } else {
            function _0x343a26() {
                if (!_0xd48d05['path']) throw new _0xa1a7f1('[Menu] This element doesn\'t exist!');
                return _0x576ede['GetValue']['apply'](null, _0x2af906['path']);
            }
        }
    }
}
var font;

function onDraw1() {
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator'])) {
        font = Render['AddFont']('tahoma.ttf', -0x1c2b + -0x58 * 0x49 + 0x3553, 0x1041 + -0x829 + -0x688);
        if (Entity['IsAlive'](Entity['GetLocalPlayer']())) {
            var _0x41bc76 = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator color']),
                _0x51f408 = Render['GetScreenSize'](),
                _0x1e09e0 = Entity['GetName'](Entity['GetWeapon'](Entity['GetLocalPlayer']()));
            if (weaponTabNames['hasOwnProperty'](_0x1e09e0)) {
                var _0x31abf6 = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Damage Override']) ? !![] : ![];
                _0x31abf6 ? UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x1e09e0], 'Damage Override']) != 0x3 * -0x486 + 0x5 * 0x619 + -0x10eb ? Render['String'](-0x53 * -0x1d + 0x1a * -0x57 + -0x5 * 0x1b, _0x51f408[-0x1 * -0x805 + -0xfdb + 0x7d7] - (0x2 * -0x9ca + -0x139d + 0x2795), -0x1 * -0x1853 + -0x1881 + 0x2e, UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x1e09e0], 'Damage Override'])['toString'](), _0x41bc76, font) : Render['String'](-0x1744 + -0x62e + -0xebe * -0x2, _0x51f408[-0x18d1 + 0x995 + 0x53 * 0x2f] - (0x5ae + 0x35 * 0xab + -0x28b1), -0x34f * -0xa + 0x175 * 0x7 + 0x1 * -0x2b49, UI['GetValue'](['Rage', 'Target', 'General', 'Damage Override'])['toString'](), _0x41bc76, font) : UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x1e09e0], 'Hitboxes']) != -0xaa8 + -0x236f + 0x1b * 0x1b5 ? Render['String'](0x20a * 0x5 + -0x11a4 + 0x77c, _0x51f408[0xe9d + 0x44f * -0x4 + 0x2a0] - (-0x2 * -0x90f + -0x925 + -0x895), 0x13c2 + -0x53 + -0x136f, UI['GetValue'](['Rage', 'Target', weaponTabNames[_0x1e09e0], 'Minimum damage'])['toString'](), _0x41bc76, font) : Render['String'](-0xa93 + 0x1749 + -0x1 * 0xcac, _0x51f408[-0x3 * 0xb9b + 0x12e3 + -0x1 * -0xfef] - (-0xcfb + 0x1448 + 0x3d * -0x1d), 0xcd5 + 0x21f3 * -0x1 + 0x151e, UI['GetValue'](['Rage', 'Target', 'General', 'Minimum damage'])['toString'](), _0x41bc76, font);
            }
        }
    }
}

function main() {
    UI['AddCheckbox'](path, 'Min damage indicator'), UI['AddColorPicker'](path, 'Min damage indicator color'), UI['AddSliderInt'](['Rage', 'Target', 'General'], 'Damage Override', -0x1 * 0x96e + -0x16c3 + 0x2031, -0x1 * 0x1b6a + -0xfe * 0x2 + 0x1de8);
    for (var _0x258e52 in weaponTabNames) {
        if ('HlvTi' !== 'WRFZP') UI['AddSliderInt'](['Rage', 'Target', weaponTabNames[_0x258e52]], 'Damage Override', 0x939 * 0x1 + 0x695 * -0x3 + 0x1 * 0xa86, -0x183a + -0x6c * 0x35 + -0xbc6 * -0x4);
        else {
            function _0x85d8f5() {
                if (_0xa470e) {
                    var _0x4c364b = _0x5556b6['apply'](_0x457a96, arguments);
                    return _0x263a8d = null, _0x4c364b;
                }
            }
        }
    }
    UI['AddHotkey'](['Config', 'Scripts', 'Keys', 'JS Keybinds'], 'Damage Override', 'Damage Override'), Cheat['RegisterCallback']('Draw', 'onDraw1'), Cheat['RegisterCallback']('CreateMove', 'updateDamageValues');
}
main();
var target = 0xb * -0x3a + 0x963 + -0x1 * 0x6e5;

function safepoint() {
    safepoint_on = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs']);
    if (safepoint_on) return;
    target = Ragebot['GetTarget'](), Ragebot['ForceHitboxSafety'](-0xe63 * -0x1 + -0x1752 + -0x1 * -0x8f6), Ragebot['ForceHitboxSafety'](-0x48e * -0x8 + -0x741 * 0x3 + 0xa3 * -0x17), Ragebot['ForceHitboxSafety'](-0x26b9 + -0x1 * 0x18f8 + 0x3fba), Ragebot['ForceHitboxSafety'](-0x1342 + -0x667 + 0x11 * 0x183);
}
Cheat['RegisterCallback']('CreateMove', 'safepoint');

function can_shift_shot(_0x239199) {
    var _0x20aa9e = Entity['GetLocalPlayer'](),
        _0x51e371 = Entity['GetWeapon'](_0x20aa9e);
    if (_0x20aa9e == null || _0x51e371 == null) return ![];
    var _0x2f1d5b = Entity['GetProp'](_0x20aa9e, 'CCSPlayer', 'm_nTickBase'),
        _0x15ae94 = Globals['TickInterval']() * (_0x2f1d5b - _0x239199);
    if (_0x15ae94 < Entity['GetProp'](_0x20aa9e, 'CCSPlayer', 'm_flNextAttack')) return ![];
    if (_0x15ae94 < Entity['GetProp'](_0x51e371, 'CBaseCombatWeapon', 'm_flNextPrimaryAttack')) return ![];
    return !![];
}

function cm() {
    Exploit['EnableRecharge']();
}
Cheat['RegisterCallback']('CreateMove', 'cm');
var huesos = [],
    safe = ![];

function _TBC_UNLOAD() {
    Exploit['EnableRecharge']();
}
Cheat['RegisterCallback']('Unload', '_TBC_UNLOAD');
var bomb = -0x2404 + -0x16e4 + -0x3ae8 * -0x1,
    rt_time = Globals['Realtime']();

function desync_on_use() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Desync on E'])) return;
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']()) || bomb != 0x166 * 0xf + 0x25f0 + 0x1 * -0x3aea) return;
    if (Input['IsKeyPressed'](0x2259 + -0x2324 + -0x22 * -0x8) && rt_time + (-0x1141 + 0x1bf7 * 0x1 + -2741.9) < Globals['Realtime']()) {
        if ('BtONE' !== 'BtONE') {
            function _0xac251f() {
                _0x41e7e2['splice'](_0x390a6b['indexOf']('Freestand'));
            }
        } else Cheat['ExecuteCommand']('-use'), Cheat['ExecuteCommand']('unbind e'), legit_aa = !![], UI['SetValue'](['Config', 'Cheat', 'General', 'Restrictions'], 0x3 * -0x629 + 0x4 * -0x6ad + -0x1 * -0x2d2f), UI['SetValue'](['Rage', 'Anti Aim', 'General', 'Pitch mode'], -0x2 * -0x43 + -0x10 * 0x264 + 0x1b7 * 0x16), UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], -0x123 * -0x14 + 0x1edf + 0x1 * -0x34e7);
    }!Input['IsKeyPressed'](0xc92 + -0x57 * -0x3 + -0xd52) && (Cheat['ExecuteCommand']('bind e +use'), rt_time = Globals['Realtime'](), legit_aa = ![], UI['SetValue'](['Config', 'Cheat', 'General', 'Restrictions'], -0x2343 + 0x1 * -0x140e + 0x3751), UI['SetValue'](['Rage', 'Anti Aim', 'General', 'Pitch mode'], -0x5 * -0x15b + 0x22af + -0x2975), UI['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], isKeyActive ? -0x2 * 0x2cf + 0x1 * -0x49 + 0x5fb : cache));
}
Cheat['RegisterCallback']('CreateMove', 'desync_on_use');

function on_bombplant() {
    bomb++;
}

function on_abort() {
    bomb = 0x26d3 + 0x929 + 0x94 * -0x53;
}

function on_abort3() {
    bomb = -0x68c * 0x5 + 0x1ce0 + 0x4 * 0xf7;
}

function on_abort1() {
    var _0x209f49 = Entity['GetLocalPlayer']();
    if (Event['GetInt']('userid') == _0x209f49) bomb++;
}

function on_abort2() {
    var _0x15640e = Entity['GetLocalPlayer']();
    if (Event['GetInt']('userid') == _0x15640e) bomb = 0x13a * 0x9 + 0x247 * -0x5 + 0x1 * 0x59;
}
Cheat['RegisterCallback']('hostage_follows', 'on_abort1'), Cheat['RegisterCallback']('hostage_stops_following', 'on_abort2'), Cheat['RegisterCallback']('bomb_defused', 'on_abort3'), Cheat['RegisterCallback']('bomb_abortdefuse', 'on_abort'), Cheat['RegisterCallback']('bomb_begindefuse', 'on_bombplant');

function CreateMove() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting'])) return;
    if (Ragebot['GetTargets']() == '') return;
    Ragebot['ForceTarget'](target), rb_target = Ragebot['GetTarget']();
    switch (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Targeting'])) {
        case 0x1e73 + 0xc17 * 0x1 + -0x441 * 0xa:
            target = closestTarget();
            break;
        case -0x233 * -0x1 + 0x2 * -0xbfe + 0x15ca:
            target = fartherstTarget();
            break;
        case -0x1ce4 * -0x1 + 0x1 * -0x565 + -0x177d:
            target = less_hp();
            break;
        case -0x195f + 0x27 * -0xdc + 0x7 * 0x86a:
            target = bigger_hp();
            break;
        case -0x50 * 0x58 + -0x2 * 0x80 + 0x1c84:
            target = best_kd();
            break;
        case -0x20db * 0x1 + 0x127f + 0xe61:
            target = worst_kd();
            break;
    }
    if (rb_target != target) Ragebot['IgnoreTarget'](rb_target), Ragebot['ForceTarget'](target);
    else {
        if ('UjkTg' !== 'XQKXx') Ragebot['ForceTarget'](target);
        else {
            function _0x2b1577() {
                _0x4f7765 = _0x430ed2 - _0x1f59b0;
                if (_0x519485 < 0x15d3 * 0x1 + 0x4a9 * 0x5 + 0x169 * -0x20) _0x2adcb7 = -0x2f * -0xc1 + -0x2 * -0x323 + -0x29b5 * 0x1;
                _0x7d8be == 0x12bb + -0x5 * -0x4b8 + -0x2a53 && _0x264fe1['splice'](_0x1d492a['indexOf']('Damage override'));
            }
        }
    }
}
Cheat['RegisterCallback']('CreateMove', 'CreateMove');

function closestTarget() {
    if (Ragebot['GetTargets']() == '') return;
    var _0x44babd = Entity['GetLocalPlayer'](),
        _0x539fb2 = Entity['GetEnemies'](),
        _0x1979c1 = [],
        _0x4eb834 = [];
    for (e in _0x539fb2) {
        if (!Entity['IsAlive'](_0x539fb2[e]) || Entity['IsDormant'](_0x539fb2[e]) || !Entity['IsValid'](_0x539fb2[e])) continue;
        _0x1979c1['push']([_0x539fb2[e], calcDist(Entity['GetHitboxPosition'](_0x44babd, 0x21c4 + 0xcfa + -0x2 * 0x175f), Entity['GetHitboxPosition'](_0x539fb2[e], 0xb8 * -0x2b + 0x86 + 0x1e62))]);
    }
    _0x1979c1['sort'](function(_0x3f99bc, _0x15d14d) {
        if ('JiiWG' === 'JiiWG') return _0x3f99bc[0x1021 + 0x2637 + -0x3657] - _0x15d14d[-0x14a4 + -0x5c * -0x51 + 0x1 * -0x877];
        else {
            function _0x499f02() {
                _0x752e8['SetRealOffset'](_0x567076 - _0x19bda1 + _0x3b1bd3), _0xbed136 < _0x3c9a70 && (_0x7f4a9f = _0x66e20e), _0x480ac8 ? _0x4e7cbb['SetLBYOffset'](_0x409ce4 - _0x22c33d) : _0xee833d['SetLBYOffset'](_0x109633 + _0x2fd00b - _0x1f87cb * (-0x725 + -0x1 * -0xd7d + -0x656));
            }
        }
    });
    if (_0x1979c1['length'] == -0x11b3 + 0x15 * -0x155 + -0x16d6 * -0x2 || _0x1979c1 == []) return target = -(0xfa3 + 0x2523 + -0x34c5);
    return _0x1979c1[-0x1cf * 0x7 + 0x1435 * 0x1 + -0x78c][0x371 * 0x7 + -0x3 * -0xc11 + -0x3c4a];
}

function fartherstTarget() {
    if (Ragebot['GetTargets']() == '') return;
    var _0x5a126d = Entity['GetLocalPlayer'](),
        _0x4d01a0 = Entity['GetEnemies'](),
        _0x40a874 = [],
        _0xc9d196 = [];
    for (e in _0x4d01a0) {
        if (!Entity['IsAlive'](_0x4d01a0[e]) || Entity['IsDormant'](_0x4d01a0[e]) || !Entity['IsValid'](_0x4d01a0[e])) continue;
        _0x40a874['push']([_0x4d01a0[e], calcDist(Entity['GetHitboxPosition'](_0x5a126d, -0x1f * -0xbe + 0x28d + -0x198f), Entity['GetHitboxPosition'](_0x4d01a0[e], -0x19 * -0x71 + -0xa60 + -0xa9))]);
    }
    _0x40a874['sort'](function(_0x4c26eb, _0x4be95e) {
        return -_0x4c26eb[0x1 * 0xc2d + 0xe87 + 0x5 * -0x557] + _0x4be95e[-0x2 * 0xb96 + -0x137 * 0x9 + -0x3b * -0x94];
    });
    if (_0x40a874['length'] == -0x1 * -0x24d + 0x124b + -0x1498 || _0x40a874 == []) return target = -(-0xa * -0x329 + -0x1ec9 + -0xd0 * 0x1);
    return _0x40a874[0x2609 + 0x1d8c + -0x49 * 0xed][0x1264 + 0xaa3 * 0x2 + -0x27aa];
}

function less_hp() {
    if (Ragebot['GetTargets']() == '') return;
    var _0x259019 = Entity['GetLocalPlayer'](),
        _0x5d65d7 = Entity['GetEnemies'](),
        _0x3f9a90 = [],
        _0x6053c = [];
    for (e in _0x5d65d7) {
        if (!Entity['IsAlive'](_0x5d65d7[e]) || Entity['IsDormant'](_0x5d65d7[e]) || !Entity['IsValid'](_0x5d65d7[e])) continue;
        _0x3f9a90['push']([_0x5d65d7[e], Entity['GetProp'](_0x5d65d7[e], 'CBasePlayer', 'm_iHealth')]);
    }
    _0x3f9a90['sort'](function(_0x14d2fc, _0x17edb8) {
        return _0x14d2fc[-0x1e95 + -0x237 * 0x9 + 0x3285] - _0x17edb8[-0x2 * -0x6ec + -0x1b27 + -0x18 * -0x8e];
    });
    if (_0x3f9a90['length'] == -0x5 * 0x677 + -0x1 * -0xc07 + 0x144c || _0x3f9a90 == []) return target = -(0x264d * 0x1 + 0x69d + -0x2ce9 * 0x1);
    return _0x3f9a90[-0x795 + -0x59b * -0x6 + -0x1a0d * 0x1][-0x98f * -0x1 + 0x8a * -0x43 + 0x1 * 0x1a8f];
}

function bigger_hp() {
    if (Ragebot['GetTargets']() == '') return;
    var _0x5b948c = Entity['GetLocalPlayer'](),
        _0x77c00f = Entity['GetEnemies'](),
        _0x9096a5 = [],
        _0x5840a4 = [];
    for (e in _0x77c00f) {
        if (!Entity['IsAlive'](_0x77c00f[e]) || Entity['IsDormant'](_0x77c00f[e]) || !Entity['IsValid'](_0x77c00f[e])) continue;
        _0x9096a5['push']([_0x77c00f[e], Entity['GetProp'](_0x77c00f[e], 'CBasePlayer', 'm_iHealth')]);
    }
    _0x9096a5['sort'](function(_0xde9d18, _0x2fec83) {
        if ('HnfUM' !== 'HnfUM') {
            function _0x337e99() {
                _0x52f173['ExecuteCommand']('bind e +use'), _0x4aa0bb = _0x20b0da['Realtime'](), _0x34d384 = ![], _0x16195e['SetValue'](['Config', 'Cheat', 'General', 'Restrictions'], -0x62f + 0x32 + 0x5fd), _0x2bd798['SetValue'](['Rage', 'Anti Aim', 'General', 'Pitch mode'], -0x1 * -0x256e + 0x5 * -0x5c + -0x23a1), _0x5adfd9['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], _0x4eb995 ? 0x2698 + 0x1006 + -0x368a : _0x499778);
            }
        } else return -_0xde9d18[-0x7 * -0x23d + -0x12ea * -0x1 + -0x2294] + _0x2fec83[0x21e9 + -0x1904 + -0x8e4];
    });
    if (_0x9096a5['length'] == 0x1de * 0xd + 0x191b * -0x1 + 0xd5 || _0x9096a5 == []) return target = -(-0x1c8a + -0xb6 + 0x1d41 * 0x1);
    return _0x9096a5[-0x24c7 * 0x1 + -0xa5f * 0x1 + 0x2f26][-0x1e * 0x10 + 0x34e * -0x1 + -0x22 * -0x27];
}
var kd = [];

function best_kd() {
    if (Ragebot['GetTargets']() == '') return;
    var _0x1812e5 = Entity['GetLocalPlayer'](),
        _0xf3863e = Entity['GetEnemies'](),
        _0x22b134 = [],
        _0x27bf1b = [];
    for (e in _0xf3863e) {
        if (!Entity['IsAlive'](_0xf3863e[e]) || Entity['IsDormant'](_0xf3863e[e]) || !Entity['IsValid'](_0xf3863e[e])) continue;
        _0x22b134['push']([_0xf3863e[e], Entity['GetProp'](target, 'CPlayerResource', 'm_iKills') - Entity['GetProp'](target, 'CPlayerResource', 'm_iDeaths')]);
    }
    _0x22b134['sort'](function(_0x3c5650, _0x3bf4c2) {
        return _0x3c5650[0x2 * 0xf1b + -0x2c * -0x9d + -0x3931] - _0x3bf4c2[-0x587 + -0x24a4 + 0x2a2c];
    });
    if (_0x22b134['length'] == -0x751 * -0x1 + 0x67d * 0x1 + -0xdce || _0x22b134 == []) return target = -(0x16f1 * -0x1 + -0x2 * 0xfaa + 0x1b23 * 0x2);
    return _0x22b134[-0x529 * -0x1 + -0x2 * -0x135d + -0x2be3][0x174f + 0xc43 + 0x9d * -0x3a];
}

function worst_kd() {
    if (Ragebot['GetTargets']() == '') return;
    var _0xbc14ab = Entity['GetLocalPlayer'](),
        _0x2df41a = Entity['GetEnemies'](),
        _0x361c46 = [];
    for (e in _0x2df41a) {
        if (!Entity['IsAlive'](_0x2df41a[e]) || Entity['IsDormant'](_0x2df41a[e]) || !Entity['IsValid'](_0x2df41a[e])) continue;
        _0x361c46['push']([_0x2df41a[e], Entity['GetProp'](target, 'CPlayerResource', 'm_iKills') - Entity['GetProp'](target, 'CPlayerResource', 'm_iDeaths')]);
    }
    _0x361c46['sort'](function(_0x2a59fd, _0x389f27) {
        return -_0x2a59fd[-0x1c12 + -0x1e35 + 0x3a48] + _0x389f27[0x26ad + -0x12bb + -0x13f1];
    });
    if (_0x361c46['length'] == 0x3e6 * -0x9 + 0x25a3 + -0x28d * 0x1 || _0x361c46 == []) return target = -(-0x457 + 0x114a + -0xcf2);
    return _0x361c46[0x1225 + -0x19 * -0x14b + -0x13 * 0x2a8][-0x124 * -0x2 + -0x70 * -0xe + 0x1 * -0x868];
}

function calcDist(_0x104807, _0x1b6c28) {
    return x = _0x104807[-0x25 * 0x11 + -0x1 * -0x54a + -0x2d5] - _0x1b6c28[0xc52 + -0x15b9 + 0x967], y = _0x104807[0x2381 + 0x83 * 0x12 + -0x2cb6] - _0x1b6c28[-0x471 * -0x1 + 0x1386 + -0x17f6], z = _0x104807[-0x25c * -0x4 + -0x110f + 0x7a1] - _0x1b6c28[0x8e + -0x3a8 * 0x7 + -0x4 * -0x643], Math['sqrt'](x * x + y * y + z * z);
}

function get_metric_distance(_0x425608, _0x51f28f) {
    return Math['floor'](Math['sqrt'](Math['pow'](_0x425608[0xf26 + -0x1 * -0x22d5 + -0x31fb] - _0x51f28f[-0x1 * -0x16be + 0x3bb + 0x3 * -0x8d3], -0x568 + -0x63c + 0xba6) + Math['pow'](_0x425608[-0xd4a + 0x862 + 0x4e9] - _0x51f28f[-0x16bf + -0x20 * 0x40 + 0x1ec0], -0x1c05 + 0x1683 + -0x584 * -0x1) + Math['pow'](_0x425608[0x1a * -0xd + -0xe33 + 0xf87] - _0x51f28f[-0x2 * -0x59f + -0xd99 * -0x1 + -0x27 * 0xa3], 0x1 * 0x925 + 0x79 * -0x43 + -0xce * -0x1c)) * (0x222b + -0x4 * 0x3ad + -4982.9746));
}

function draw_func() {
    g_Local = Entity['GetLocalPlayer'](), g_Local_weapon = Entity['GetWeapon'](g_Local), weapon_name = Entity['GetName'](g_Local_weapon);
    if (weapon_name == 'awp' && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safe AWP']) == -0xd8c + -0x15f + -0x2 * -0x776) is_force_safe_point = UI['GetValue'](['Rage', 'General', 'General', 'Key assignment', 'Force safe point']), is_force_safe_point == 0x627 + 0x14c5 + -0x1aec && (UI['ToggleHotkey'](['Rage', 'General', 'General', 'Key assignment', 'Force safe point']), prefer_safe_backup = !![]);
    else prefer_safe_backup && (UI['ToggleHotkey'](['Rage', 'General', 'General', 'Key assignment', 'Force safe point']), prefer_safe_backup = ![]);
}
Cheat['RegisterCallback']('Draw', 'draw_func');

function extrapolateTick(_0x468b6c) {
    var _0x335b0e = Entity['GetLocalPlayer'](),
        _0x2dd64e = Entity['GetHitboxPosition'](_0x335b0e, -0xec5 + 0x96b + -0x89 * -0xa),
        _0x563411 = Entity['GetProp'](_0x335b0e, 'CBasePlayer', 'm_vecVelocity[0]'),
        _0x52bd8a = [];
    return _0x52bd8a[0x605 + 0x6f7 * -0x2 + 0x19 * 0x51] = _0x2dd64e[-0x39f * -0x3 + -0x1977 + 0xe9a] + _0x563411[-0x1a35 * 0x1 + 0x2616 + 0xbe1 * -0x1] * Globals['TickInterval']() * _0x468b6c, _0x52bd8a[0x2643 + -0x186 + -0x24bc] = _0x2dd64e[-0x1c01 * -0x1 + 0x1a * 0xad + -0x2d92 * 0x1] + _0x563411[0x9 * -0x216 + 0x2159 * 0x1 + -0xe92] * Globals['TickInterval']() * _0x468b6c, _0x52bd8a[-0x2f3 + -0x5a8 * 0x6 + -0x1 * -0x24e5] = _0x2dd64e[-0x1b6b + 0x1479 + 0x37a * 0x2] + _0x563411[0xbf0 + 0x2235 + -0x2e23] * Globals['TickInterval']() * _0x468b6c, _0x52bd8a;
}

function forceConditions() {
    enemies = Entity['GetEnemies']();
    for (i = 0x1 * -0x22b7 + -0x2638 * -0x1 + -0x381; i < enemies['length']; i++) {
        if (!Entity['IsValid'](enemies[i])) continue;
        if (!Entity['IsAlive'](enemies[i])) continue;
        if (Entity['IsDormant'](enemies[i])) continue;
        target = Ragebot['GetTarget']();
        if (attemptTwoShotKill(enemies[i]) == !![]) continue;
        Ragebot['ForceTargetHitchance'](target, Ragebot['GetTargetHitchance']() + (-0x858 + -0x1fc4 + 0x2826)), Ragebot['ForceTargetSafety'](enemies[i]);
    }
}
Cheat['RegisterCallback']('CreateMove', 'forceConditions');

function normalizeYaw(_0x10cffa) {
    while (_0x10cffa > 0x7 * -0x4f + 0x4 * -0x161 + 0x1 * 0x861) _0x10cffa = _0x10cffa - (0x92b * 0x1 + -0x154c + -0x37 * -0x3f);
    while (_0x10cffa < -(-0x21cb + -0x2057 + 0x42d6)) _0x10cffa = _0x10cffa + (0x313 + 0x204b + -0x17a * 0x17);
    return _0x10cffa;
}

function worldToScreen(_0x2d19d4, _0x7f912e) {
    if (_0x2d19d4 == -0x3 * -0x22c + -0x19f7 + 0x1373 * 0x1 && _0x7f912e == 0x17e + -0x89c + 0x2 * 0x38f) return -0x3a9 * 0x9 + 0x96d + 0xd7 * 0x1c;
    return rad2DegA(Math['atan2'](_0x7f912e, _0x2d19d4));
}

function getClosestEnemyToCrosshair() {
    ss = Global['GetScreenSize'](), bZkq7eyc8k = -(-0x620 * 0x4 + 0x133 * -0x11 + 0x2ce4), localPlayer = Entity['GetLocalPlayer'](), localPlayerAlive = Entity['IsAlive'](localPlayer);
    if (!localPlayer) return;
    if (!localPlayerAlive) return;
    localPlayerWeapon = Entity['GetName'](Entity['GetWeapon'](localPlayer)), enemiesArr = Entity['GetEnemies']();
    if (!enemiesArr) return;
    uMrt42tnhj = 0x1fd7 + 0x775 * 0x2 + 0x1 * -0x2e0d, _0x484ce2 = Entity['GetProp'](localPlayer, 'CBaseEntity', 'm_vecOrigin'), viewAngles = Global['GetViewAngles']();
    for (var _0x5a2b7b = -0x2c1 * 0xc + 0x145 + -0x1 * -0x1fc7; _0x5a2b7b < enemiesArr['length']; _0x5a2b7b++) {
        if (!Entity['IsAlive'](enemiesArr[_0x5a2b7b])) continue;
        var _0x484ce2 = Entity['GetProp'](enemiesArr[_0x5a2b7b], 'CBaseEntity', 'm_vecOrigin'),
            _0x2e2fe8 = Math['abs'](normalizeYaw(worldToScreen(_0x484ce2[-0x2 * 0x132c + -0x5e6 + 0x2c3e] - _0x484ce2[-0x26dd * 0x1 + 0x4dd + 0x10 * 0x220], _0x484ce2[0x1 * -0x909 + -0x1f * 0x101 + 0x2829 * 0x1] - _0x484ce2[0x1 * -0xb6b + -0xc09 + -0x5 * -0x4b1]) - viewAngles[-0x6ad * 0x2 + -0x1 * -0x148 + 0xb * 0x119] + (-0x1387 * -0x1 + 0xe61 + -0x2134)));
        if (_0x2e2fe8 < uMrt42tnhj) {
            if ('cnsTc' === 'cnsTc') uMrt42tnhj = _0x2e2fe8, bZkq7eyc8k = enemiesArr[_0x5a2b7b];
            else {
                function _0x9d48a8() {
                    _0x3f7fc3 = _0x598387, _0x2bddce = _0x4d0277['Realtime']();
                }
            }
        }
    }
    return bZkq7eyc8k;
}

function isExploitCharged() {
    if (Exploit['GetCharge']() == -0x13 * 0xa + -0x115b + 0x121a) return !![];
    return ![];
}

function attemptTwoShotKill(_0x19df7e) {
    if (UI['GetValue'](['Rage', 'Anti Aim', 'Key assignment', 'Fake duck'])) return ![];
    var _0x2dc170 = Entity['GetName'](Entity['GetWeapon'](Entity['GetLocalPlayer']()));
    if (_0x2dc170 != 'scar 20' && _0x2dc170 != 'g3sg1') return ![];
    Ragebot['ForceHitboxSafety'](0x1 * -0x25b4 + 0x1eb8 + -0xc * -0x95);
    var _0x17d398 = Entity['GetProp'](_0x19df7e, 'CBasePlayer', 'm_iHealth'),
        _0x7571e2 = getClosestEnemyToCrosshair();
    pelvis_pos = Entity['GetHitboxPosition'](_0x19df7e, 0xe2d + -0x9 * -0x1d + 0x1 * -0xf30), body_pos = Entity['GetHitboxPosition'](_0x19df7e, 0x287 + 0x1 * 0x26da + -0x1e * 0x161), thorax_pos = Entity['GetHitboxPosition'](_0x19df7e, 0x491 * 0x4 + 0x76d + -0x19ad);
    var _0xa53bef = [-0x109a * -0x1 + -0xf * -0x1b7 + 0x1 * -0x2a53, -(0x9a * 0x1 + 0x1856 + -0x18ef)],
        _0x40e48e = [0x181a + 0x1327 + -0x2b41, -(0x2a2 * 0xb + 0x13a3 + -0x2 * 0x184c)],
        _0x86a3c4 = [-0x1fe8 + -0x1 * 0xa58 + 0x2a40, -(-0x1f4d + -0x3 * 0x16f + 0x239b)],
        _0x46723f = [-0xd * -0x2f9 + -0x20 * 0x8f + -0x14c5, -(-0x20ec * -0x1 + -0x146 + 0x1fa5 * -0x1)];
    result_thorax = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, Entity['GetEyePosition'](Entity['GetLocalPlayer']()), thorax_pos);
    if (_0x19df7e = _0x7571e2) dynamicDamage = result_thorax[0x14a0 + 0x10 * 0x37 + -0x1 * 0x180f];
    if (result_thorax[-0x92f + -0x1 * 0x1085 + 0x19b5] * (-0x2335 + -0xacd + 0x2e04) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (-0x2118 * 0x1 + -0x695 + 0x27af) + (0x7 * 0x467 + 0x1 * -0x1543 + 0xf * -0xa3)), !![];
    _0x40e48e = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, Entity['GetEyePosition'](Entity['GetLocalPlayer']()), pelvis_pos), _0xa53bef = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, Entity['GetEyePosition'](Entity['GetLocalPlayer']()), body_pos);
    if (_0x19df7e = _0x7571e2) dynamicDamage = _0x40e48e[0x14e0 + 0x2050 * 0x1 + -0x352f];
    if (_0x40e48e[-0x3 * -0xa69 + -0x1bc2 + -0x378] * (0x109a + -0x21 * 0x27 + 0x149 * -0x9) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (-0x133c + 0x11d1 * 0x1 + 0x16d) + (-0x15 * -0x107 + 0x6b * 0x2f + -0x2937)), !![];
    if (_0x19df7e = _0x7571e2) dynamicDamage = _0xa53bef[0x263b + 0x1526 + -0x3b60];
    if (_0xa53bef[-0x4a * 0x72 + 0x202b + 0x2 * 0x65] * (0x5d4 + 0x1b9e * -0x1 + 0x15cc) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (0x127 * -0xb + -0x253 + 0xf02) + (-0xce1 + 0x46f + -0x3 * -0x2d1)), !![];
    result_thorax_extrapolated = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, extrapolateTick(-0x1312 * 0x1 + -0x5 * 0x167 + 0x2 * 0xd12), thorax_pos);
    if (_0x19df7e = _0x7571e2) dynamicDamage = result_thorax_extrapolated[-0x116d * 0x2 + 0x2213 + 0xc8 * 0x1];
    if (result_thorax_extrapolated[-0x33 * 0x19 + -0x1cc1 + 0x21bd] * (0x78a + 0x3 * 0xcbe + -0x2dc2) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (0x1 * 0x490 + -0x2df * 0x1 + -0x1af) + (-0xe86 + -0xb78 + 0x19ff)), !![];
    _0x46723f = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, extrapolateTick(0x2424 + -0x1 * 0x113c + -0x12cf), pelvis_pos), _0x86a3c4 = Trace['Bullet'](Entity['GetLocalPlayer'](), _0x19df7e, extrapolateTick(-0x1e95 + 0x1e7 * 0xf + 0xb7 * 0x3), body_pos);
    if (_0x19df7e = _0x7571e2) dynamicDamage = _0x46723f[0x15eb * 0x1 + 0x6ea * -0x3 + 0x96 * -0x2];
    if (_0x46723f[0x1 * 0x1f9d + 0xa82 * -0x3 + -0x16] * (-0xb65 * 0x1 + -0x2054 + 0x2bbb) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (0x1b9f + 0x1284 + -0x7 * 0x697) + (0xcc6 + -0xc * -0x265 + -0x2981)), !![];
    if (_0x19df7e = _0x7571e2) dynamicDamage = _0x86a3c4[0x2068 + -0x196e * -0x1 + -0x39d5];
    if (_0x86a3c4[-0x1111 * 0x2 + 0x4 * 0x2d7 + 0x11 * 0x157] * (-0xb * -0x115 + -0x104c * -0x1 + -0x1c31) >= _0x17d398 && isExploitCharged() == !![]) return Ragebot['ForceTargetMinimumDamage'](_0x19df7e, _0x17d398 / (-0x10e + 0x5 * 0xce + 0x17b * -0x2) + (0x10ab + -0x1 * 0x1de1 + 0xd37)), !![];
    return dynamicDamage = 0xe63 + 0x9 * -0x192 + -0x41, ![];
}
var shit = function(_0x37b5e4, _0x54078e) {
        return _0x37b5e4 < _0x54078e;
    },
    limit = -0x11 * -0x223 + -0x8cb * 0x4 + 0x1 * -0x127,
    trigger_limit = -0x6 * -0x71 + -0x95 * 0x5 + 0x1 * 0x43;

function clamp(_0x33653e, _0x17694a, _0x117a89) {
    return Math['max'](_0x17694a, Math['min'](_0x117a89, _0x33653e));
}
var idk = Globals['Realtime'](),
    idk2 = ![],
    fl_switch = ![],
    altfakelag = -0x19de + 0x10ac + 0x932;

function fakelag() {
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']()) || !UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Better Fakelag']) || UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap'])) return;
    var _0x27c91c = Entity['GetLocalPlayer'](),
        _0x51ceb9 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Choke Limit']),
        _0xd2acc5 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Send Limit']),
        _0x5a60b9 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Limit']),
        _0x52e36c = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Trigger Limit']),
        _0x5672e2 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Minimum']),
        _0x59b932 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'First Value']),
        _0x3f7acc = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Second Value']),
        _0x37a4f1 = Entity['GetProp'](_0x27c91c, 'CBasePlayer', 'm_vecVelocity[0]'),
        _0x48252f = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Switch Delay']),
        _0x445cc9 = Math['abs'](_0x37a4f1[-0xbe6 * 0x1 + 0x70c * -0x3 + 0x210a]),
        _0x34b594 = Math['abs'](_0x37a4f1[-0x1754 + 0xa7 * -0x1b + 0x28f2 * 0x1]),
        _0x11a2cd = Math['abs'](_0x37a4f1[0x2348 + -0x1f7 * -0x3 + 0x3 * -0xdb9]),
        _0x3672d8 = Math['sqrt'](_0x445cc9 * _0x445cc9 + _0x34b594 * _0x34b594 + _0x11a2cd * _0x11a2cd);
    switch (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Fakelag mode'])) {
        case 0x1 * -0x1edd + 0x41 * 0x2c + 0x13b1:
            limit = -0x2483 + -0x7 * -0x524 + 0x95, trigger_limit = 0xac * 0x3a + 0x1 * 0x2f + -0x1 * 0x2719;
            break;
        case -0x68 + -0xe * 0x4a + 0x475:
            trigger_limit = _0x52e36c, limit = random_int(_0x5672e2, _0x5a60b9);
            break;
        case -0x1239 + 0x1 * -0x1743 + 0x2 * 0x14bf:
            trigger_limit = _0x52e36c, shit(altfakelag, _0x51ceb9 - (0x7 * -0x3ae + -0x3 * -0x5ba + 0x895)) ? (UserCMD[Globals['ChokedCommands']() < 0x1d1e + -0x1de8 * 0x1 + -0xd7 * -0x1 ? 'Choke' : 'Send'](), altfakelag++) : altfakelag < _0x51ceb9 + _0xd2acc5 ? (UserCMD['Send'](), altfakelag++) : altfakelag = 0x15 * 0x24 + -0x1 * 0x10bb + 0xdc7;
            break;
        case -0x2416 + 0x1e15 * 0x1 + 0x604:
            trigger_limit = _0x3f7acc > _0x59b932 ? _0x3f7acc : _0x59b932;
            fl_switch && idk + _0x48252f < Globals['Realtime']() && (limit = _0x59b932, idk = Globals['Realtime']());
            !fl_switch && idk + _0x48252f < Globals['Realtime']() && (limit = _0x3f7acc, idk = Globals['Realtime']());
            fl_switch = !fl_switch;
            break;
        case 0x8 * 0x1c4 + -0x1267 * 0x1 + -0x44b * -0x1:
            trigger_limit = _0x52e36c, limit = Math['ceil'](_0x3672d8 / (0xfa4 + 0xf0b + -7842.2)) > 0x22c2 + 0x21 * 0x113 + -0x29 * 0x1b6 ? 0x5e * -0x22 + -0x8b9 * -0x1 + 0x3d3 : Math['ceil'](_0x3672d8 / (0x3d * -0x1f + 0x1f7 + 1400.8));
            break;
        default:
            return;
            break;
    }
    UI['SetValue'](['Rage', 'Fake Lag', 'General', 'Limit'], limit), UI['SetValue'](['Rage', 'Fake Lag', 'General', 'Trigger limit'], trigger_limit);
}
Cheat['RegisterCallback']('CreateMove', 'fakelag');

function hp_2_on_dt() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'HP/2 on DT'])) return;
    if (Ragebot['GetTargets']() == '') return;
    var _0x47ec99 = Entity['GetLocalPlayer'](),
        _0x4f564c = Ragebot['GetTargets'](),
        _0x10cb5f = [],
        _0x4196b8 = [];
    for (e in _0x4f564c) {
        if ('vtgsg' !== 'vtgsg') {
            function _0x3be5af() {
                _0x14cad3[0x741 * -0x1 + -0x489 * 0x2 + 0x1053] = ![];
            }
        } else {
            if (!Entity['IsAlive'](_0x4f564c[e]) || Entity['IsDormant'](_0x4f564c[e]) || !Entity['IsValid'](_0x4f564c[e])) break;
            Ragebot['ForceTargetMinimumDamage'](_0x4f564c[e], Entity['GetProp'](_0x4f564c[e], 'CBasePlayer', 'm_iHealth') / (0x10 * 0xc7 + -0x1c63 * -0x1 + -0x183 * 0x1b));
        }
    }
}
Cheat['RegisterCallback']('CreateMove', 'hp_2_on_dt');

function onRender() {}
Cheat['RegisterCallback']('Draw', 'onRender');

function strafespeed() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Better Strafer'])) return;
    var _0x236a3c = Entity['GetLocalPlayer'](),
        _0x1c27f7 = Entity['GetProp'](_0x236a3c, 'CBasePlayer', 'm_vecVelocity[0]'),
        _0xb34b64 = Math['abs'](_0x1c27f7[-0x65 * 0x38 + 0x22d4 + -0xa * 0x146]),
        _0x452aee = Math['abs'](_0x1c27f7[0x407 + -0x1 * -0x168d + -0x1a93]),
        _0x6e8f0e = Math['abs'](_0x1c27f7[0x4d4 + -0x17eb + -0x1319 * -0x1]),
        _0x473b68 = Math['sqrt'](_0x452aee ** (0xe79 + -0x1 * -0x157d + -0xd * 0x2c4) + _0xb34b64 ** (-0x2 * 0x464 + -0x3 * 0x6cd + 0x1d31));
    UI['SetValue'](['Misc.', 'Movement', 'General', 'Turn speed'], 0x4 * 0x9 + 0x9ef + -0x9f5 + _0x473b68 < -0x263e + -0x2b * -0x85 + 0x1019 ? 0x5 * 0x76a + 0x219e + 0x233f * -0x2 : _0x473b68);
}
Cheat['RegisterCallback']('Draw', 'strafespeed');
var shot_data = [];

function player_hurt2() {
    attacker = Event['GetInt']('attacker'), attacker_entindex = Entity['GetEntityFromUserID'](attacker), victim = Event['GetInt']('userid'), victim_entindex = Entity['GetEntityFromUserID'](victim);
    if (attacker_entindex != Entity['GetLocalPlayer']()) return;
    shot_data = [!![], -0x5 * -0x26e + 0x1c4d + -0x2774, Event['GetString']('health')];
}

function on_paint() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Crosshair Hitmarker'])) return;
    var _0xc86215 = Global['GetScreenSize']();
    if (shot_data[0x221 + -0x13ee + -0x93 * -0x1f]) {
        shot_data[0x180e * -0x1 + -0x4 * 0x146 + 0x1d27] = shot_data[0x1 * -0xbbb + 0x3c5 * -0x1 + 0xf81] - (0x1bc9 + -0xdd0 + -0xdf4);
        shot_data[-0x55a + -0x1073 + 0x15ce] <= -0x770 + -0x125 * -0x4 + 0x2dc && (shot_data[0x2270 + 0x1 * 0x1cb5 + -0x3f25] = ![]);
        var _0x1da3ea = 0x1b99 + -0x181c + -0x7 * 0x7f,
            _0x1e51d8 = _0x1da3ea + (-0x3d1 + 0xdd4 + -0x9fd),
            _0x438144 = [0x3eb * 0x2 + 0x3 * 0x9c + -0x8ab, 0x8ad + 0x14d9 + -0x1d86, -0x1de2 + 0x1a83 + -0x35f * -0x1, shot_data[0x1abe + 0x133d + -0x2dfa]],
            _0x456f08 = [-0xb3a * -0x2 + -0x212f + 0xbba, -0x6d * 0x27 + -0x17a * 0x2 + -0x36d * -0x6, -0x1009 * -0x1 + -0xd3 * -0x1 + -0xfdd, shot_data[-0x1a93 + -0x6df + 0x1 * 0x2173]],
            _0x30b3af = shot_data[0xc2 * -0x6 + 0x1a3b + -0x15ad] <= 0x209 + 0x363 * -0x8 + -0x5 * -0x503 ? _0x438144 : _0x456f08;
        Render['Line'](_0xc86215[-0x246 * -0x10 + 0x13e3 * 0x1 + -0x3843] / (0x29 * -0x52 + 0x1510 + -0x7ec) - _0x1e51d8, _0xc86215[0xb33 + 0x13 * 0x17 + 0x16f * -0x9] / (0x11b0 + -0xc5a * -0x2 + -0x2a62) - _0x1e51d8, _0xc86215[0xf17 + -0x1dca + 0xeb3] / (0x1d1c + -0x206e + 0x354) - _0x1da3ea, _0xc86215[-0x1c20 + 0x45 * -0x3 + -0xe78 * -0x2] / (0x16af + -0x19eb + -0x33e * -0x1) - _0x1da3ea, _0x30b3af), Render['Line'](_0xc86215[0xa * 0x3a5 + -0x79e + -0x1cd4] / (0x2262 + -0x6f * -0x11 + 0x1 * -0x29bf) - _0x1e51d8, _0xc86215[-0x1 * 0xc79 + -0x25fa + 0x3274] / (0x95 * 0x1 + -0x1 * 0xed2 + -0x7 * -0x209) + _0x1e51d8, _0xc86215[0x5 * 0x5cf + 0x983 + -0x268e] / (0x115f * -0x2 + 0x129 * -0x12 + -0x1bd1 * -0x2) - _0x1da3ea, _0xc86215[0x205c + 0xa25 + -0x2a80] / (0x1d4f + -0x26c + -0x1ae1) + _0x1da3ea, _0x30b3af), Render['Line'](_0xc86215[-0x9 * 0x401 + 0x1562 + 0xea7] / (0x62 * -0x34 + -0x9 * 0x1ed + 0x253f) + _0x1e51d8, _0xc86215[0x221 * 0x12 + -0x51f + 0x7 * -0x4be] / (-0x334 + -0x169a + 0x8 * 0x33a) + _0x1e51d8, _0xc86215[0x1c1a + 0x1 * 0x1e03 + -0x3a1d] / (-0x5c * 0x39 + -0xe * -0xdf + 0x84c) + _0x1da3ea, _0xc86215[0x25de + 0x1 * 0x9c7 + -0x2fa4 * 0x1] / (-0x147c + 0x1a * 0x2c + 0x1006) + _0x1da3ea, _0x30b3af), Render['Line'](_0xc86215[0x1784 + 0x710 * 0x1 + -0x1e94] / (0x2387 + -0x18c9 + -0xe5 * 0xc) + _0x1e51d8, _0xc86215[0x1 * 0xb55 + 0x1 * -0x254f + 0x19fb] / (0x3 * -0x37b + 0x1e9c + -0x1429) - _0x1e51d8, _0xc86215[-0x5fc * -0x3 + -0x49d * 0x1 + -0xd57] / (-0x2e1 + 0x21bf + -0x4 * 0x7b7) + _0x1da3ea, _0xc86215[-0x1d7e + 0x9 * 0x21a + 0xa95] / (0xe5 * 0x1 + 0x2 * 0x51e + -0xb1f) - _0x1da3ea, _0x30b3af);
    }
}
Cheat['RegisterCallback']('Draw', 'on_paint'), Cheat['RegisterCallback']('player_hurt', 'player_hurt2');
const keybinds_x = UI['AddSliderInt'](path, 'keybinds_x', -0x12 * 0xb + -0x225b + -0x11 * -0x211, Global['GetScreenSize']()[-0x1 * 0x201 + 0x112a + -0xf29]),
    keybinds_y = UI['AddSliderInt'](path, 'keybinds_y', 0x31 * 0x2b + -0x4a9 * 0x7 + 0x1864, Global['GetScreenSize']()[0x1dd8 + 0x11bf + -0x2 * 0x17cb]);

function in_bounds(_0xebfd0f, _0x263d3a, _0x4df2e8, _0xaf77c2, _0x5cccc0) {
    return _0xebfd0f[0xd75 + -0x3 * -0x359 + -0x1780] > _0x263d3a && _0xebfd0f[-0x7a9 + 0x25ec + 0x1 * -0x1e42] > _0x4df2e8 && _0xebfd0f[-0x10 * 0x89 + -0x1 * 0x15c3 + -0x1 * -0x1e53] < _0xaf77c2 && _0xebfd0f[-0x1 * -0x11a7 + -0x1a57 + 0x8b1] < _0x5cccc0;
}

function xy() {
    UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x'], -0x2dc * 0xd + 0x1 * -0x1733 + 0x3c5f), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y'], -0x2 * 0x653 + -0xc3f + -0x1 * -0x18e5), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_x'], -0x2026 + 0x117b + 0xeab), UI['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_y'], -0x1a * -0x163 + -0x11b3 + -0x125b), UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y']) == 0x127d * 0x2 + -0x7 * -0x3fb + -0x3 * 0x159d && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x']) == -0x11 * 0x1f2 + 0x1bb3 + 0x37 * 0x19 && (UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x'], 0x1 * -0x20a7 + 0x1 * -0x10c9 + 0x3364), UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y'], 0x1369 * -0x1 + 0x1 * 0x26a + 0x12f3)), UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_x']) == -0x47 * 0xb + 0x2520 + -0x2213 && UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_y']) == -0xcc + 0xd * 0x2f + -0x197 && (UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_y'], -0x1c4f + -0x1 * -0x16d6 + 0x76d), UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_x'], 0x10f * 0xd + 0x4 * 0x377 + -0x19ab));
}
var colorhotkeys = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent']),
    bright = [];

function draw_pstate() {
    var _0x2220e3 = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent']),
        _0x120565 = [_0x2220e3[0x1068 + -0x13 * -0x19c + 0x7c * -0x61] > -0xb87 + -0x1a30 + 0x79f * 0x5 ? _0x2220e3[0x1966 + 0x7d * 0x4a + -0x1 * 0x3d88] - (0xd48 + 0x186a + -0x254e) : _0x2220e3[0x1e57 + -0x1e7 * 0x3 + -0x18a2], _0x2220e3[-0x25b5 + -0x1b05 + 0x40bb] > 0x506 + -0x2271 + -0x24b * -0xd ? _0x2220e3[-0x1524 + -0x5d * 0x1 + -0x1582 * -0x1] - (-0x10e1 + -0x12b8 + 0x3 * 0xbff) : _0x2220e3[0x1 * -0x192f + 0xf7c + 0x9b4], _0x2220e3[0x2b3 * 0xb + 0x1 * 0x409 + 0x34 * -0xa6] > 0x1d24 + 0x1a0a * -0x1 + -0x2b6 ? _0x2220e3[-0x11f7 + -0x3 * -0x2d7 + 0x974] - (0x6 * -0x4dc + 0x1d2f + 0x5d) : _0x2220e3[0x1b49 + -0x1c46 + 0xff], _0x2220e3[0xa * 0x3c4 + -0xff1 + -0x1 * 0x15b4] > 0x25f0 + -0x6d * -0xd + 0x29 * -0x10d ? _0x2220e3[-0xd9d + -0x3 * 0xa06 + 0x292 * 0x11] - (0xc5 * 0x20 + 0xd48 + -0x2584) : _0x2220e3[0x17a9 + -0x15c * 0x10 + 0x1b * -0x12]];
    bright = [_0x2220e3[-0x222c + -0x3 * -0x5ae + 0x1122] < -0x1ca1 + 0x9bc + 0x13b2 ? _0x2220e3[0x79 * -0x19 + -0xc40 + 0x1811 * 0x1] + (-0x10ca + 0x2397 * 0x1 + 0xb * -0x1b1) : -0x5 * 0x55 + -0x3c7 * 0x9 + 0x355 * 0xb, _0x2220e3[0x222e + -0x260f * -0x1 + -0x10c * 0x45] < 0x37 * -0x18 + 0x2162 + -0x1b6d ? _0x2220e3[0x122e + 0x1 * -0x1b8c + 0x95f] + (0x8 * 0x185 + -0x69b * 0x2 + 0xa * 0x20) : -0x26be + 0x6a5 + -0x846 * -0x4, _0x2220e3[-0x18ad * -0x1 + -0x2 * 0x34a + -0x1217] < -0x1 * -0x166b + 0x1 * 0xe6f + -0x240d * 0x1 ? _0x2220e3[0xf9 * 0x3 + -0x1 * -0x164a + 0x1933 * -0x1] + (0x7ca * -0x4 + 0x1 * -0x21fb + 0x4155) : 0xc68 + 0x28 * -0x6b + 0x54f, _0x2220e3[0x1 * -0x1d9d + -0x910 + 0x26b0] < -0x1ede + -0x1 * -0x1558 + -0xa53 * -0x1 ? _0x2220e3[-0x1029 * 0x2 + -0xb47 * -0x1 + 0x150e] + (0xbde * 0x1 + -0x3 * 0x97 + -0xc3 * 0xd) : -0xb5e + -0x9 * -0x182 + 0x67 * -0x3];
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x22ba72 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x']),
        _0x18e3a4 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y']);
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Player State Indicators'])) return;
    font = Render['AddFont']('VERDANAB.TTF', -0x1 * -0x11c5 + -0xf51 + -0x26a, 0x2331 + -0x6 * -0x5e7 + -0x42b3 * 0x1), font1 = Render['AddFont']('ARIALBD.TTF', -0xb3a + -0x259a * -0x1 + -0x1a58, 0x1099 + -0x71b * -0x3 + -0x2202);
    var _0x3688c5 = Local['GetFakeYaw'](),
        _0x4a6e0f = Local['GetRealYaw']();
    if (_0x3688c5 < -0x2339 + -0x233 * -0xd + 0x6a2) {
        if ('csLrD' === 'csLrD') _0x3688c5 = -0x59 * -0x43 + 0xd6b + 0x234e * -0x1 + _0x3688c5;
        else {
            function _0x267e81() {
                _0x5181f1['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x'], 0x511 + -0x1 * -0xc95 + -0x62 * 0x29), _0x365d50['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y'], -0x9 * -0x378 + 0x11 * 0xea + -0x2cce);
            }
        }
    }
    _0x4a6e0f < 0xf * 0x1f6 + -0x617 + -0x1753 && (_0x4a6e0f = 0x4 * -0x601 + 0x1818 + -0x11 * -0x14 + _0x4a6e0f);
    angle = _0x3688c5 - _0x4a6e0f;
    if (Math['abs'](angle) > -0x5fd * -0x6 + -0xda1 + -0x155d) {
        if ('bahtb' === 'bahtb') _0x4a6e0f > _0x3688c5 ? angle = 0x161 * 0x5 + 0xc36 + -0x11b3 + angle : angle = angle - (-0x11f * 0x12 + -0x3 * 0x4e4 + 0x2442);
        else {
            function _0x2ff382() {
                return _0x5487b1['ForceTargetMinimumDamage'](_0x737e5a, _0x362fcc / (0x118b + -0x24c2 + 0x1339) + (-0x13c2 + 0x744 + 0x1 * 0xc7f)), !![];
            }
        }
    }
    angle = angle / (-0x1325 + -0xa62 + 0x1d89);
    var _0x33a166 = Globals['ChokedCommands'](),
        _0x32819c = Entity['GetProp'](Entity['GetLocalPlayer'](), 'CBasePlayer', 'm_flDuckAmount'),
        _0x1135a0 = Exploit['GetCharge']();
    Render['GradientRect'](_0x22ba72, _0x18e3a4 - (0xbfc + 0x44 + -0xc21), -0x5 * 0x71 + -0x1 * 0x1c3 + 0x2a * 0x1d, 0x697 * -0x2 + -0x27f + 4030.5, 0xe7 * 0x8 + -0x3b2 * -0x1 + -0x7f * 0x16, [0x159b * 0x1 + 0x1be5 + -0x3180, -0x2552 * 0x1 + 0x1b05 + 0x36f * 0x3, -0x1450 + 0xa * 0x2f6 + 0xe * -0xaa, -0x164a + -0x8fb + 0x2012 * 0x1], [0x1 * -0x1be5 + 0x10fe + 0xae7, 0x12c6 + -0x14b * -0xe + 0x760 * -0x5, 0x1 * 0x14d + -0x1 * -0x34a + -0x5 * 0xeb, 0x2d7 + -0x16d5 + 0x1435]), Render['FilledRect'](_0x22ba72, _0x18e3a4 - (0xd0c + 0xb * -0x3b + -0xa75 * 0x1), 0x3 * -0x905 + -0xa15 + 0x25ee, -0x63 * -0x20 + 0x1c2c + 0x141b * -0x2, [0x11e2 + -0x24a3 + 0x12c1 * 0x1, 0x9 * 0x8d + -0xa05 + 0x510, 0x1 * -0x1d65 + 0x1 * 0x13d2 + 0x993, 0x114e + -0x1d3 * -0x5 + 0x5 * -0x53e]), Render['FilledRect'](_0x22ba72 + (-0x1acc + -0x1478 + -0xfde * -0x3), _0x18e3a4 + (-0x257f + -0x1b5 * -0xb + 0x12ef), -0x104 * 0xf + -0xa0b + -0x1 * -0x19ab, 0x1ed3 * 0x1 + 0x1ae8 * 0x1 + -0x39b7, [-0x14b8 + -0x17 * 0x51 + 0x1bff, 0xca * 0x29 + -0x1 * 0x2e7 + -0x1d73, 0x1 * 0x2365 + 0x241e + 0x1 * -0x4783, 0x2427 + 0x5d * -0x2b + -0x7 * 0x2e7]), Render['FilledRect'](_0x22ba72 + (0x6e + 0x22ef + -0x2307), _0x18e3a4 + (-0x1 * 0x1a49 + -0x380 + 0x1 * 0x1ded), -0xd22 * -0x2 + 0x10 * -0xb5 + -0xe90, 0xe * 0x21e + -0xf2d + -0xe73, [0x90f * -0x1 + 0x198e + -0x107f, -0x44 * -0xd + -0x89b + 0x527, -0x1 * 0x1f4b + -0x1711 + 0x3e2 * 0xe, 0x21f9 * 0x1 + 0xc * -0x337 + 0x2 * 0x269]), Render['FilledRect'](_0x22ba72 + (-0xea + -0xb6 + 0x1f6), _0x18e3a4 + (-0x12f * -0x21 + -0x2309 * -0x1 + -0x4a09), -0xc62 + -0x1cd * 0x1 + 0xe93, 0x1 * -0x4c5 + 0x1778 + 0x12af * -0x1, [-0x3a * 0x7f + -0x13eb * 0x1 + 0x30b1, 0xa45 + -0x13af + 0x96a, -0xac1 * 0x1 + 0x70a + -0x3 * -0x13d, -0x587 + -0x1 * 0x241 + 0x17 * 0x59]), Render['FilledRect'](_0x22ba72 + (0x1 * -0x765 + 0xb65 * -0x3 + -0x4a * -0x91), _0x18e3a4 - (0x1 * -0x1953 + 0x224a + -0x8f2), -0xa9e + 0x9fb + 0x107, -0xcf * 0x1 + 0x5 * 0x52f + -0x1918, [0x1 * -0x13c6 + 0x1f86 + -0xbc0, 0x2072 + 0x1 * -0x7e2 + -0x1890, 0x15c3 + -0xc67 + 0x257 * -0x4, 0x1c20 + -0x1 * -0x1a8a + -0x3673]), Render['FilledRect'](_0x22ba72 + (0x1ad + -0x1 * -0x1520 + -0x1677), _0x18e3a4 + (0x1ff5 + 0xb2 * -0x31 + 0x254), (_0x1135a0 - (-0x915 + 0x15 * 0x96 + -824.8)) * ((0xed3 + -0x6 * 0x31c + 0x439) / (0x346 * -0x3 + 0x203 + 1999.8)), 0xa49 * -0x1 + 0x1 * 0x1bdf + -0x1192, bright), Render['FilledRect'](_0x22ba72 + (-0xc6d + 0x132e * 0x2 + -0x1999), _0x18e3a4 + (0x1 * 0x409 + -0x8c9 + 0x4cf), (Math['abs'](angle) > -0x17e + 0x1c3 + -0x1 * 0x9 ? 0x43b * -0x5 + -0x53e * 0x3 + 0x251d : Math['abs'](angle)) * ((0x1aa + -0x12cc + -0x1186 * -0x1) / (0x980 * 0x2 + 0x260e * 0x1 + -0x7 * 0x81e)), 0xa8 + 0x4d * 0x4f + -0x1 * 0x1867, bright), Render['FilledRect'](_0x22ba72 + (0x1 * -0x1dc2 + -0x2209 + -0x1 * -0x4021), _0x18e3a4 - (-0x689 * 0x2 + -0x1079 + 0x16 * 0x158), _0x32819c * (0x7 * 0x25a + 0x1 * 0x13d5 + -0x5b * 0x65), 0xc4e + -0xc46 + -0x4, bright), Render['FilledRect'](_0x22ba72 + (-0xb1c + 0x3 * -0xbc5 + -0x2ec1 * -0x1), _0x18e3a4 + (-0x1 * 0x15ff + 0x593 + 0x108f), (_0x33a166 - (-0x46 * 0x65 + 0x29d * -0x2 + 0x20d9)) * ((-0x709 * -0x1 + 0xafd + -0x11a2) / (0x1bb * 0x10 + 0x6e2 + 0x2 * -0x1142)), 0x76 * 0x4f + -0x1129 + -0x3d9 * 0x5, bright), Render['GradientRect'](_0x22ba72, _0x18e3a4 - (-0x1 * -0x1935 + -0x2448 + 0xb33), 0x17 * -0x61 + -0x7dd + 0x37 * 0x4f, 0xc46 * 0x1 + 0x982 + 0xdf * -0x19, 0x1556 + -0x2263 + 0xd0e, _0x120565, _0x2220e3), Render['GradientRect'](_0x22ba72 + (-0x17 * -0x10d + -0x10 * 0x21 + -0x15b6), _0x18e3a4 - (-0x4a4 + -0x1 * 0x1339 + 0x17fd), 0x1f76 * 0x1 + -0x20d8 + 0x1c7, 0x2500 + -0x93 * 0x4 + -0x22b3, -0x2 * 0x12f2 + 0x7 * -0x225 + 0x34e8, _0x2220e3, _0x120565), Render['String'](_0x22ba72 + (0x13c1 + -0xbe7 * 0x1 + -0x2 * 0x3e0) + Render['TextSize']('shoppy.gg/@heven', font)[0x1c * 0xa7 + 0x67 * -0x2b + 0xd * -0x13] / (-0x1 * 0x2507 + -0x9b7 + 0x2ec0) + (-0x2e * 0x93 + -0x23ba + -0x8 * -0x7c7), _0x18e3a4 - (0x1bc2 + -0x1 * 0x1e87 + 0x2e5), 0x241 * 0x1 + -0x5 * 0x5e9 + -0x1b4d * -0x1, 'shoppy.gg/@heven', [0x967 + 0x1fc2 + 0x1415 * -0x2, -0x5c + 0x9 * -0x315 + -0x3a3 * -0x8, 0x21b + 0x605 + 0x721 * -0x1, 0x1290 + 0x4ec * 0x6 + -0xfb3 * 0x3], font), Render['String'](_0x22ba72 + (0x8d * 0x1b + -0x2106 * 0x1 + -0x1 * -0x1232), _0x18e3a4 - (0x19a1 * -0x1 + 0x17c7 + -0x2 * -0xf1), 0x92f * 0x4 + -0x345 * -0x8 + 0x32 * -0x142, 'STAND HEIGHT', [-0xc87 + 0x1 * -0x1ada + 0x2860, -0x10 * 0x1a9 + -0x1560 + 0x30ef, -0x1 * 0x24e + -0x4 * 0x754 + 0x209d, 0x3b * -0x1d + 0x1d6 * 0xb + -0xc84], font1), Render['String'](_0x22ba72 + (-0x7da + -0x22 * -0x7 + 0x6f7), _0x18e3a4 + (0x21c9 + 0x49 * 0x57 + -0x1d46 * 0x2), -0x137d * -0x1 + -0x1c1f + 0xaa * 0xd, 'DESYNC', [-0x68 + 0x1e90 + -0x1d29, 0x1051 + 0x102d * 0x1 + -0xb * 0x2dd, -0x2 * 0x977 + 0x6 * -0x224 + 0x20c5, -0x1 * 0x1633 + -0x52 * 0x34 + -0x1 * -0x27da], font1), Render['String'](_0x22ba72 + (0x3a * 0x76 + -0x8 * -0x27 + -0x1 * 0x1be9), _0x18e3a4 + (0xee3 + -0x3 * 0x1f3 + -0x8ea), 0x1eb * -0x1 + -0x43d + 0x314 * 0x2, 'FAKELAG', [-0x216 + -0x52 * 0x47 + 0x19d3, 0xbaf + -0x3 * 0x7a7 + 0xc45, -0x357 * -0xa + 0x124d + 0xa * -0x512, 0x139a + 0x20fb + -0x3396], font1), Render['String'](_0x22ba72 + (-0x118a + 0x1 * 0x1e1 + -0xc9 * -0x14), _0x18e3a4 + (-0x197a + 0x133c * 0x1 + 0x1e * 0x37), 0x21d * -0xb + 0x17 * 0x23 + 0x141a, 'DT CHARGE', [-0x142f + 0x37 * 0x89 + 0x841 * -0x1, -0x103f + -0x15f4 + 0x2732 * 0x1, -0x105f + -0x77 + 0x11d5, 0x1 * 0x1f87 + 0xdfc + -0x2c84], font1);
    if (Input['IsKeyPressed'](-0x1b55 + 0x1d47 + -0x1f1)) {
        if ('enFwR' === 'enFwR') {
            const _0x262ef6 = Input['GetCursorPosition']();
            if (in_bounds(_0x262ef6, _0x22ba72, _0x18e3a4 - (0x6 * 0x10b + 0x9cb + -0xfe5), _0x22ba72 + (0x25ba + 0x1 * -0xd77 + -0x7d3 * 0x3), _0x18e3a4 - (0x2243 + -0x2388 + 0x159))) {
                if (UI['IsMenuOpen']() == ![]) return;
                UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x'], _0x262ef6[0x1649 + -0xf2c + -0x3 * 0x25f] - (-0xd * -0x109 + -0x2c * 0x49 + 0x6 * -0x16)), UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y'], _0x262ef6[-0x10d4 + -0x1 * -0x1472 + 0x39d * -0x1] + (-0x5 * -0x5ed + 0x1a0e + 0x3791 * -0x1));
            }
        } else {
            function _0x521c6a() {
                _0x1c4f6a['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'], -0x4e9 * -0x4 + 0x6 * 0x309 + 0x1 * -0x25d9), _0x45883b['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'DT Improvement'], -0x2106 + -0x2427 + 0x73 * 0x9a), _0x2dccb0['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance'], 0x1f4f + 0x1564 + -0x34b2), _0x129f06['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Noscope hitchance'], _0x219c76['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance'])), _0x22f13f['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'In-air hitchance'], _0x376337['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'])), _0x4bda12['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs'], -0x17 * -0x10d + 0xe0 * -0x19 + -0x24a), _0x29f667['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Weapons'], _0x362afa['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safepoint on limbs']) ? -0x8d4 + 0x1568 + -0xc93 * 0x1 : 0x2603 + -0x2230 + 0x59 * -0xb), _0x5be52e['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Safe AWP'], 0x17a2 + 0xbd7 + 0xe3 * -0x28), _0x4b5d1b['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting'], -0x7 * 0x164 + 0x3 * 0xaab + 0xc * -0x1db), _0x208909['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Targeting'], _0x4e8e1f['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Custom Ragebot Targeting']) ? 0x4b2 * -0x7 + 0x21d * 0x6 + -0x3 * -0x6bb : -0x1c21 + 0xbb9 + -0x38 * -0x4b), _0x453f95['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'HP/2 on DT'], -0xcc * -0xe + 0x26 * -0xe6 + 0x16fd);
            }
        }
    }
}
Cheat['RegisterCallback']('Draw', 'draw_pstate');
var ebanaya_hueta = ![],
    text = '';

function watermark() {
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Watermark'])) return;
    var _0x50c7b9 = new Date(),
        _0xc165d = _0x50c7b9['getHours'](),
        _0x45aec5 = _0x50c7b9['getMinutes'](),
        _0x4c6862 = _0x50c7b9['getSeconds'](),
        _0x5a36a3 = Render['AddFont']('ARIALBD.TTF', 0xe0e * 0x2 + 0x2 * 0x317 + -0x10 * 0x224, -0x16c4 + -0x3 * 0xa65 + 0x1 * 0x39db),
        _0x570d2a = Render['GetScreenSize'](),
        _0x47b91e = Cheat['GetUsername'](),
        _0x14caa8 = _0xc165d <= -0x1 * -0x71e + 0x3e2 + -0xaf7 ? '0' + _0x50c7b9['getHours']() + ':' : _0x50c7b9['getHours']() + ':',
        _0x3c16a4 = _0x45aec5 <= -0x1 * -0x127d + 0x1334 + -0x25a8 ? '0' + _0x50c7b9['getMinutes']() + ':' : _0x50c7b9['getMinutes']() + ':',
        _0x42fae1 = _0x4c6862 <= 0x1dbb + -0x43c + -0x1976 ? '0' + _0x50c7b9['getSeconds']() : _0x50c7b9['getSeconds']();
    const _0x1d9e8a = Globals['Tickrate'](),
        _0x241b64 = Math['round'](Entity['GetProp'](Entity['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing'))['toString'](),
        _0x32ad1b = Math['floor']((-0xd87 * 0x1 + -0x2 * -0x21f + 0x94a) / Global['Frametime']());
    var _0x1ea487 = -0x9 * 0x337 + -0x83 * 0x23 + -0x2 * -0x176c;
    if (!World['GetServerString']()) ebanaya_hueta = !![];
    else ebanaya_hueta = ![];
    ebanaya_hueta ? text = 'Heaven Yaw [OWNED] | ' + _0x47b91e + (' | ') + _0x14caa8 + _0x3c16a4 + _0x42fae1 : text = 'Heaven Yaw [OWNED] | ' + _0x47b91e + (' | ') + ('ping : ') + _0x241b64 + (' ms | ') + _0x1d9e8a + ('tick | ') + _0x14caa8 + _0x3c16a4 + _0x42fae1;
    var _0x4bcca0 = Render['TextSize'](text, _0x5a36a3),
        _0x3532b9 = Math['min'](_0x4bcca0[-0x11cb + -0x2 * -0x471 + 0x8e9] / (-0x4c7 + -0x1b * -0x37 + -0x15 * 0xc)) * (-0x1ed2 + 0x12c4 + 0xc18);
    Render['FilledRect'](_0x570d2a[-0x1c0b + -0x3 * 0xc6f + -0x11 * -0x3d8] - _0x3532b9 - (-0x1 * -0x205f + 0x140 + 0x2195 * -0x1), 0x1839 + -0x1193 + 0x1 * -0x69a, _0x3532b9 + (-0xba * -0x17 + -0x1386 + 0x2d4), _0x4bcca0[-0x151 * 0x17 + 0x1 * 0x17e1 + 0x667] + (0xd33 * 0x1 + 0x994 + 0x1d * -0xc9), [-0x1 * 0x197f + 0x19 * -0x121 + 0x35b8, -0x1754 + 0x209 * -0x1 + 0x195d * 0x1, -0x2060 + -0x353 + 0x23b3, 0xa23 * 0x1 + -0x1b2e + 0x1142]), Render['String'](_0x570d2a[0x1fc0 * -0x1 + 0x151b + -0x221 * -0x5] - _0x3532b9 / (0x1 * 0xf40 + 0x972 + -0x18b0) - (0x83 + -0xd * 0x2f3 + 0x25dc), 0x25c3 + 0x14be * -0x1 + -4345.5, 0x31 * -0x58 + 0x182 * -0xe + 0x25f5, text, [0x1e34 + 0x7 * -0x26f + 0x30b * -0x4, -0x16ce + -0x225 + 0x19f2, -0x40 * 0x40 + 0x9f8 + 0x707, -0xb86 + 0x245 + 0xa40], _0x5a36a3), Render['FilledRect'](_0x570d2a[-0x74 * 0x26 + 0x2 * -0xc3d + 0x29b2] - _0x3532b9 - (-0x5 * -0x6f8 + -0x32f * 0x3 + 0x86b * -0x3), -0x1ab4 + -0xdc5 + 0x2883, _0x3532b9 + (0x71 * 0x3b + -0x16f * -0xb + -0x29cc), 0xb2f * -0x1 + 0x35 * -0x67 + 0x2084, bright), Render['FilledRect'](_0x570d2a[0x26e7 * 0x1 + 0xa15 + 0x294 * -0x13] - _0x3532b9 - (-0x2 * -0xb66 + 0x3 * 0xc8e + 0xc * -0x509), 0x725 * -0x2 + 0x3 * 0x3 + -0x2 * -0x725, _0x3532b9 + (-0x2f * -0x2b + -0x154e + -0x7 * -0x1eb), 0x61 * 0x47 + -0x27c + -0x186a, [0x3 * -0x47b + -0xd44 + -0x3 * -0x8e7, 0x9f * -0x35 + -0x2547 + 0x4632, 0x92 * -0x6 + -0xa * -0x1cc + -0xc4 * 0x13, 0x20cb + -0xbbd + -0x42b * 0x5]);
}
Cheat['RegisterCallback']('Draw', 'watermark');
const x1337 = UI['AddSliderInt'](path, 'Hotkeys_x', 0x1 * -0x1d82 + 0x2b * 0xb + 0x1ba9, Global['GetScreenSize']()[0x16bd + 0x25 * 0x59 + -0x28b * 0xe]),
    y1337 = UI['AddSliderInt'](path, 'Hotkeys_y', 0x48b + -0x6 * 0x2a5 + -0xd * -0xdf, Global['GetScreenSize']()[0xde6 + 0x1e3e + -0x2c23 * 0x1]);
var h = new Array(),
    alpha1337 = 0x2075 + 0x1013 + -0x3088,
    maxwidth = -0xde4 + -0x1 * -0x1429 + 0x6b * -0xf,
    swalpha = -0x116f * 0x2 + -0x1bd1 + 0x1 * 0x3eaf,
    fdalpha = -0x61 * -0x21 + 0x9 * -0x30b + 0xee2,
    apalpha = 0x2 * -0x9d2 + -0x62 * -0x54 + -0xc84,
    aialpha = -0x209a + -0x5af + 0x2649,
    spalpha = 0xbe4 + -0x6 * 0x60d + 0x186a,
    fbalpha = 0xa4d * 0x1 + 0x1 * -0x23c5 + -0x65e * -0x4,
    dtalpha = 0xd * 0x203 + -0x11 * 0x1e9 + -0x652 * -0x1,
    hsalpha = -0x9d0 + -0x5d4 + 0x11e * 0xe,
    doalpha = 0x2192 * 0x1 + 0xcf8 * -0x2 + -0x1 * 0x7a2,
    menualpha = -0xac7 + -0x2070 + 0xd * 0x353,
    textalpha = 0x1 * 0x39 + -0x252 * -0x5 + -0xbd3,
    freestand_alpha = -0x2351 * -0x1 + -0xf2d + -0x1424,
    jitter_alpha = -0x1 * 0xe6b + 0x910 * 0x2 + -0x3b5,
    anti_brute_alpha = 0x149 * -0x14 + -0x1f98 + 0x394c;
xy();

function in_bounds(_0x5e262b, _0x5c892d, _0x2a8095, _0x449afb, _0xbfccbc) {
    return _0x5e262b[-0x2373 + -0x116 * 0x7 + 0x67 * 0x6b] > _0x5c892d && _0x5e262b[0x2 * -0x1249 + 0x1 * -0x1c24 + 0x40b7] > _0x2a8095 && _0x5e262b[-0x38 * 0x1a + 0x1f * 0x45 + -0x2ab * 0x1] < _0x449afb && _0x5e262b[0x1453 + -0xbcf + -0x883] < _0xbfccbc;
}

function main_hotkeys() {
    if (World['GetServerString']() == '' || !Entity['IsAlive'](Entity['GetLocalPlayer']())) return;
    var _0x1adafc = UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Backward Jitter']);
    if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Keybinds'])) return;
    var _0x329abb = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent']),
        _0x5f5074 = [_0x329abb[-0x159 * 0x1 + -0x10c * 0x1 + -0x265 * -0x1] > 0x36 * -0x97 + 0x149 * -0x5 + 0x26ab ? _0x329abb[0x1 * -0x7ca + -0x17f * 0xd + 0x1b3d] - (0x2056 + -0x11a9 * 0x1 + -0xe49) : _0x329abb[-0x2 * 0x3f + -0x7 * -0x11f + -0x75b], _0x329abb[-0x21e1 + -0x1ba1 + 0x3d83 * 0x1] > -0x1c * 0xd + 0x957 + -0x2f * 0x29 ? _0x329abb[-0xcfe + 0x211c + -0x141d * 0x1] - (-0x271 * 0x3 + -0x18fe + 0x20b5) : _0x329abb[-0x2 * 0x79e + 0x1 * 0x869 + 0x6d4], _0x329abb[0x26 + -0x26ad + 0x2689] > 0x1541 * -0x1 + -0x123 + 0x16c8 ? _0x329abb[-0xdff * -0x1 + 0x26e8 + -0x34e5] - (-0x1493 + 0x7cc * -0x5 + 0x3bf3) : _0x329abb[-0x1905 + -0x107 * 0x1 + 0x1a0e], _0x329abb[0x23cf * -0x1 + -0x1 * 0x227 + 0x1 * 0x25f9] > 0xde + 0x2001 + 0x5 * -0x67f ? _0x329abb[-0x1186 + -0x112e + 0x22b7] - (-0x32 * 0x32 + -0x7c3 + 0x11eb) : _0x329abb[0x9f5 * 0x2 + 0x2371 + -0x3758 * 0x1]];
    const _0x197002 = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_x']),
        _0x37631a = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_y']);
    colorhotkeys = [colorhotkeys[-0x5 * -0x33c + -0x1aca + 0xa9e], colorhotkeys[0x2510 + 0x1 * -0x1c8f + -0x10 * 0x88], colorhotkeys[0x21d9 + 0x218c + -0xd * 0x52f], -0x1053 * -0x1 + -0x24d7 * 0x1 + 0x14ca];
    var _0x1a194b = Render['AddFont']('ARIALBD.TTF', 0xb * -0x1b7 + -0x3 * -0x882 + -0x235 * 0x3, 0x389 * -0x6 + -0xd9b + 0x26b9),
        _0x18acd0 = (-0x1d79 + -0x9d * -0x9 + 0xbfe * 0x2) * Globals['Frametime'](),
        _0x2a605b = 0x2e3 * 0x4 + 0xf5b + -0x1a9c * 0x1,
        _0x38be19 = 0x15d3 + -0x212e + 0x9 * 0x143;
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk'])) swalpha = Math['min'](swalpha + _0x18acd0, -0x40 * -0x62 + -0x167 * -0x15 + -0x2 * 0x1af9);
    else {
        swalpha = swalpha - _0x18acd0;
        if (swalpha < 0x16e6 + 0x1b * -0x155 + 0xd11) swalpha = -0xd11 + -0x1f4d * -0x1 + -0x123c;
        swalpha == 0x23c1 + 0xbad + 0x2f6e * -0x1 && h['splice'](h['indexOf']('Slow walk'));
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Fake duck'])) fdalpha = Math['min'](fdalpha + _0x18acd0, 0x3b * 0x58 + -0x14b + 0x4bf * -0x4);
    else {
        fdalpha = fdalpha - _0x18acd0;
        if (fdalpha < 0x1 * -0x2191 + -0x19eb + 0x3b7c) fdalpha = 0x7f * 0x27 + 0x6b1 + -0x1a0a;
        fdalpha == -0x1a24 + 0x25f6 + -0x11 * 0xb2 && h['splice'](h['indexOf']('Duck peek assist'));
    }
    if (UI['IsMenuOpen']()) {
        if ('KSTgh' === 'KSTgh') menualpha = Math['min'](menualpha + _0x18acd0, -0x1f5b + -0x5 * 0x2e7 + -0x1 * -0x2ddf);
        else {
            function _0x2be4a7() {
                _0x35b179['IgnoreTarget'](_0x1c0625), _0x31a6a4['ForceTarget'](_0x501e79);
            }
        }
    } else {
        menualpha = menualpha - _0x18acd0;
        if (menualpha < -0x875 + 0x540 + -0x1 * -0x335) menualpha = -0xb9 + 0x113c + 0x3 * -0x581;
        menualpha == 0x206 + -0x1819 * 0x1 + -0x1 * -0x1613 && h['splice'](h['indexOf']('Menu Opened'));
    }
    if (UI['GetValue'](['Misc.', 'Keys', 'Auto peek'])) apalpha = Math['min'](apalpha + _0x18acd0, -0x56 * -0x71 + -0x1c1e + -0x9d7);
    else {
        apalpha = apalpha - _0x18acd0;
        if (apalpha < 0x1c22 + 0x2b8 + 0xb * -0x2ce) apalpha = 0x1ea2 + 0x26d7 * 0x1 + -0x4579;
        apalpha == -0x20c + -0x10a2 + 0x12ae && h['splice'](h['indexOf']('Auto peek'));
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'])) aialpha = Math['min'](aialpha + _0x18acd0, 0x194a + 0x1099 * 0x1 + -0x29e2);
    else {
        aialpha = aialpha - _0x18acd0;
        if (aialpha < -0x2c * -0x2d + -0x2 * -0xbb4 + -0xf92 * 0x2) aialpha = 0xcd + -0x1 * 0x7a6 + 0x6d9;
        aialpha == -0x1ab8 + 0x16 * 0x139 + -0x2e && h['splice'](h['indexOf']('Anti-aim inverter'));
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'])) aialpha = Math['min'](aialpha + _0x18acd0, -0x106 * 0x3 + 0x1956 + -0x29 * 0x8b);
    else {
        aialpha = aialpha - _0x18acd0;
        if (aialpha < -0x1d * -0x1e + 0x2561 + 0x3b5 * -0xb) aialpha = -0x21c0 + -0x720 * 0x5 + 0x4560;
        aialpha == -0x18a3 + -0xb2 * -0x1 + 0x17f1 && h['splice'](h['indexOf']('Inverter'));
    }
    if (UI['GetValue'](['Rage', 'General', 'Key assignment', 'Force safe point'])) spalpha = Math['min'](spalpha + _0x18acd0, 0x26 * 0xcf + 0x82b * 0x1 + 0x2 * -0x1372);
    else {
        spalpha = spalpha - _0x18acd0;
        if (spalpha < 0x4a0 + -0x1951 * -0x1 + -0x5 * 0x5fd) spalpha = -0x1f78 + -0x10ae + -0x2 * -0x1813;
        if (spalpha == -0x23e0 + -0x2 * -0x9e5 + 0x47 * 0x3a) {
            if ('fSFuf' === 'DEaEZ') {
                function _0x309c18() {
                    _0xa2a405 = _0x9110cc * ((-0x1 * -0x1864 + -0x126f + -0x5f4) / (-0xfe1 + 0x2 * 0x46f + 1795.5)), _0x37748e = _0x5af601 - _0x4df802;
                }
            } else h['splice'](h['indexOf']('Safe point override'));
        }
    }
    if (UI['GetValue'](['Rage', 'General', 'Key assignment', 'Force body aim'])) fbalpha = Math['min'](fbalpha + _0x18acd0, -0x1acd + -0x226e + -0x1e9e * -0x2);
    else {
        fbalpha = fbalpha - _0x18acd0;
        if (fbalpha < 0x23 * 0x106 + -0x2b2 + -0x2120) fbalpha = -0x1451 * -0x1 + 0x1108 + -0x2559 * 0x1;
        fbalpha == 0x1 * -0x134f + -0x9 * 0x297 + 0x2a9e && h['splice'](h['indexOf']('Force body aim'));
    }
    if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap'])) dtalpha = Math['min'](dtalpha + _0x18acd0, -0x2c5 + -0x52c * 0x1 + 0xe2 * 0x9);
    else {
        if ('wLhis' !== 'wLhis') {
            function _0x36996f() {
                _0x493e9a['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Indicators'], 0x18af + 0x1c52 + -0x3501), _0x36d3d2['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Arrows'], -0x19fa + -0x1 * -0x29d + 0x1 * 0x175d), _0x5d0dce['SetEnabled'](['Config', 'SUBTAB_MGR', 'Heaven Yaw', 'Heaven Yaw', 'Enable Desync Circle'], 0x1902 + -0x10e5 + -0x81d), _0x2ab6a3['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator'], -0x4 * -0x311 + 0x4c6 + -0x110a), _0x341dcd['SetEnabled'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Min damage indicator color'], 0xfd7 * -0x2 + -0x72 * -0x13 + 0x1 * 0x1738);
            }
        } else {
            dtalpha = dtalpha - _0x18acd0;
            if (dtalpha < 0x409 * -0x7 + 0x12b5 + 0x98a) dtalpha = 0xe * -0x26f + -0x1 * -0x7b5 + 0x1a5d;
            dtalpha == 0x1361 + 0x23b * -0x2 + -0xeeb && h['splice'](h['indexOf']('Double tap'));
        }
    }
    if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots'])) hsalpha = Math['min'](hsalpha + _0x18acd0, -0x2 * 0x12b5 + -0x1 * 0x115f + 0x36ca);
    else {
        hsalpha = hsalpha - _0x18acd0;
        if (hsalpha < -0x1 * -0x1ecd + -0x5 * 0xc9 + -0xa0 * 0x2b) hsalpha = 0x167 * -0xd + 0x1e2 * 0xe + -0x821;
        hsalpha == -0xd70 + 0x1a44 + -0xcd4 * 0x1 && h['splice'](h['indexOf']('Hide shots'));
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Damage Override'])) doalpha = Math['min'](doalpha + _0x18acd0, -0xaad + 0x17 * -0x112 + 0xfb * 0x24);
    else {
        if ('iWtZL' === 'PSgcS') {
            function _0x226bb0() {
                _0xa2f25b = _0x269d9f + _0x17878a(_0x514343['GetString']('weapon'));
            }
        } else {
            doalpha = doalpha - _0x18acd0;
            if (doalpha < 0x5 * 0x24b + 0x111f * 0x1 + -0x1c96) doalpha = 0x14b * 0xd + 0x15 * 0x4d + -0x1720;
            doalpha == 0xf67 + 0xecf + -0x1e36 && h['splice'](h['indexOf']('Damage override'));
        }
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Anti-Brute'])) anti_brute_alpha = Math['min'](anti_brute_alpha + _0x18acd0, 0x2 * 0x509 + -0x2 * 0xc5f + 0xead);
    else {
        anti_brute_alpha = anti_brute_alpha - _0x18acd0;
        if (anti_brute_alpha < 0xf1d * -0x2 + 0x257 * 0x1 + 0xb * 0x289) anti_brute_alpha = 0x5fb + 0x5 * 0x55c + -0x20c7;
        anti_brute_alpha == -0x3 * -0xc5e + 0x16b0 + 0x9f7 * -0x6 && h['splice'](h['indexOf']('Anti-Brute'));
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Backward Jitter'])) jitter_alpha = Math['min'](jitter_alpha + _0x18acd0, -0x20a0 + -0x139 * 0xe + -0x2d * -0x11b);
    else {
        jitter_alpha = jitter_alpha - _0x18acd0;
        if (jitter_alpha < 0x17bf * 0x1 + 0x11dd + -0x299c) jitter_alpha = 0xa * 0xd9 + 0x830 + -0x10aa;
        jitter_alpha == -0x206c + -0x1bd + 0xf * 0x247 && h['splice'](h['indexOf']('Backward Jitter'));
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand'])) freestand_alpha = Math['min'](freestand_alpha + _0x18acd0, -0x8f3 + 0x100a + 0x2 * -0x38b);
    else {
        freestand_alpha = freestand_alpha - _0x18acd0;
        if (freestand_alpha < 0x1a43 + -0x361 * 0x4 + -0xcbf) freestand_alpha = -0x24 * -0xc + -0xbd8 + -0x5 * -0x208;
        if (freestand_alpha == 0x2 * 0x95 + -0x77f * -0x3 + 0x17a7 * -0x1) {
            if ('AFmld' !== 'cztBU') h['splice'](h['indexOf']('Freestand'));
            else {
                function _0xc91d22() {
                    _0x2b5e5b['splice'](_0x43f466['indexOf']('Auto peek'));
                }
            }
        }
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Slow walk'])) {
        if ('pqTPY' === 'pqTPY') {
            if (h['indexOf']('Slow walk') == -(0x14f6 + 0x1dd5 + -0xc5 * 0x42)) h['push']('Slow walk');
        } else {
            function _0x5df4ba() {
                _0x43dd1c = _0x3bf77b['Curtime']() + (-0x1 * 0xb5c + 0x1 * 0x2617 + -0x1 * 0x1ab1);
            }
        }
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Fake duck'])) {
        if (h['indexOf']('Duck peek assist') == -(-0x12de + -0x21a6 + -0xa81 * -0x5)) h['push']('Duck peek assist');
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Fake duck'])) {
        if ('IFzUQ' !== 'kmALS') {
            if (h['indexOf']('Duck peek assist') == -(0x115 * 0x16 + 0x39e * 0x4 + 0x2645 * -0x1)) h['push']('Duck peek assist');
        } else {
            function _0x4ba389() {
                _0xc7ab8a['SetOverride'](-0xc * 0x18 + -0x1 * 0x2199 + 0x1 * 0x22b9);
                return;
            }
        }
    }
    if (UI['IsMenuOpen']()) {
        if (h['indexOf']('Menu Opened') == -(0x881 * 0x3 + -0x2 * 0x1256 + 0x2 * 0x595)) h['push']('Menu Opened');
    }
    if (UI['GetValue'](['Misc.', 'Keys', 'Auto peek'])) {
        if ('LpEUw' === 'LpEUw') {
            if (h['indexOf']('Auto peek') == -(-0x67f * 0x1 + 0x6 * -0x3fd + 0x1e6e)) h['push']('Auto peek');
        } else {
            function _0x2df68e() {
                _0x525682['splice'](_0x3c8df3['indexOf']('Inverter'));
            }
        }
    }
    if (UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'])) {
        if (h['indexOf']('Anti-aim inverter') == -(-0x1957 + -0x206a + 0x39c2 * 0x1)) h['push']('Anti-aim inverter');
    }
    if (UI['GetValue'](['Rage', 'General', 'Key assignment', 'Force safe point'])) {
        if (h['indexOf']('Safe point override') == -(-0x175b + 0x1 * 0xec2 + 0x2de * 0x3)) h['push']('Safe point override');
    }
    if (UI['GetValue'](['Rage', 'General', 'Key assignment', 'Force body aim'])) {
        if (h['indexOf']('Force body aim') == -(0x1 * 0x12c1 + 0xa2f + -0x1cef)) h['push']('Force body aim');
    }
    if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap'])) {
        if ('JxiWV' === 'xFOkj') {
            function _0x5a0902() {
                if (!_0x3c67d1['path']) throw new _0x36ebf4('[Menu] This element doesn\'t exist!');
                const _0x4a3403 = _0x3d596f;
                _0x3d7439['SetValue']['apply'](null, this['concat'](_0x4a3403['path'], _0x25d441));
            }
        } else {
            if (h['indexOf']('Double tap') == -(-0xd * 0x22f + 0xb * 0xe3 + 0x12a3)) h['push']('Double tap');
        }
    }
    if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots'])) {
        if (h['indexOf']('Hide shots') == -(0x1 * 0xd69 + -0x1 * 0x1981 + -0xa3 * -0x13)) h['push']('Hide shots');
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Damage Override'])) {
        if (h['indexOf']('Damage override') == -(-0x688 * 0x1 + 0x1 * 0x1a35 + -0x13ac)) h['push']('Damage override');
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Backward Jitter'])) {
        if ('mNBvb' === 'mNBvb') {
            if (h['indexOf']('Backward Jitter') == -(0x5 * -0x698 + 0x9 * -0x298 + 0x3851)) h['push']('Backward Jitter');
        } else {
            function _0x13ef8c() {
                _0x177709 = _0x1de0a4['min'](_0x39391c + _0x1ae537, 0x1 * 0xd5 + 0x2494 + 0x3 * -0xc78);
            }
        }
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Freestand'])) {
        if (h['indexOf']('Freestand') == -(0x1 * -0x1922 + 0x4a9 * 0x5 + 0x1d6)) h['push']('Freestand');
    }
    if (UI['GetValue'](['Config', 'Scripts', 'Keys', 'JS Keybinds', 'Anti-Brute'])) {
        if (h['indexOf']('Anti-Bruteforce') == -(0x7df + 0x396 * -0x2 + 0x1 * -0xb2)) h['push']('Anti-Bruteforce');
    }
    if (h['length'] > -0x841 * 0x3 + -0x1011 * 0x1 + 0x28d4) alpha1337 = Math['min'](alpha1337 + _0x18acd0, -0x259c * 0x1 + -0x22 * -0x92 + 0x5 * 0x3a5);
    else {
        alpha1337 = alpha1337 - _0x18acd0;
        if (alpha1337 < 0x1bea + 0xa72 + -0x265c) alpha1337 = 0xbb0 + -0x152b * -0x1 + 0xd * -0x287;
    }
    for (i = -0x24ff + 0x1 * -0x259d + 0x4a9c; i < h['length']; i++) {
        if ('AGXnw' !== 'yeLgb') Render['TextSize'](h[i], _0x1a194b)[-0xa22 + -0x58f * -0x2 + -0xfc] > _0x38be19 && (_0x38be19 = Render['TextSize'](h[i], _0x1a194b)[-0x2b * 0xa8 + -0x16ce + 0x3306]);
        else {
            function _0xf313f4() {
                _0x4244ff['SetOverride'](-0x1c * 0x122 + -0x98e * -0x4 + 0x68 * -0x10), _0x1a0a48['SetValue'](['Rage', 'Anti Aim', 'Directions', 'Yaw offset'], _0x148d3a);
            }
        }
    }
    if (_0x38be19 == -0x1 * -0x17b2 + 0x1 * -0x11ef + 0x127 * -0x5) _0x38be19 = -0x4c7 + -0x1837 + 0x1d30;
    _0x2a605b = _0x2a605b + _0x38be19;
    if (alpha1337 > 0x1721 + -0x1aa2 + -0x3 * -0x12b) {
        Render['GradientRect'](_0x197002, _0x37631a + (-0x786 * 0x5 + 0x1e1f + 0x1 * 0x783), _0x2a605b / (-0x72c + -0x1734 + 0x1e62 * 0x1), 0x7 * -0x535 + -0x148 * 0x8 + 11956.5, 0x6e7 + 0x1c24 + -0x230a, [_0x5f5074[-0x6f7 * 0x3 + -0x9df + -0x7b1 * -0x4], _0x5f5074[-0x71 * -0x1 + -0x267e + -0x260e * -0x1], _0x5f5074[0x26ef + -0x3c * 0x7 + -0x2549], 0x17b8 + -0xfc5 * -0x1 + -0x29 * 0xf4], _0x329abb), Render['GradientRect'](_0x197002 + _0x2a605b / (-0x1 * -0x19da + -0x53b + -0x149d), _0x37631a + (-0xc51 + 0x1a82 + -0x13 * 0xbf), _0x2a605b / (0x20a8 + 0x1 * -0xc2d + -0x1479), 0x1 * 0x2058 + 0x37 * -0x2 + -8168.5, -0x2 * -0x12b + 0x1 * 0x2109 + -0x235e, _0x329abb, [_0x5f5074[-0x2008 + 0x1f9c + 0xc * 0x9], _0x5f5074[0x1ba9 * -0x1 + 0x1bdf * 0x1 + 0x35 * -0x1], _0x5f5074[-0x1a96 + -0x485 + -0x375 * -0x9], -0x6f8 + -0x14c4 + 0x1c25]), Render['GradientRect'](_0x197002, _0x37631a + (0x8 * -0x4b2 + 0x93c + 0x1c59), _0x2a605b, -0x98d + 0x67e + 0x321, 0x1c95 + 0x7fa + 0x248f * -0x1, [0xe44 + -0x1044 + 0x211, 0x1 * 0x1f5 + 0x2 * -0xf0c + 0x70d * 0x4, 0x951 + -0xec + -0x215 * 0x4, alpha1337 * (0x3 * 0x326 + 0x2589 + -0x2dfc)], [0x2 * -0x266 + 0x12cc + 0x29 * -0x57, -0xa89 + 0x147 + 0x4d * 0x1f, -0x7d3 * -0x3 + 0x1 * 0xf7c + -0x26e4, alpha1337 * (-0x2126 + -0x1085 * -0x1 + 0x10e7 * 0x1)]), Render['String'](_0x197002 + _0x2a605b / (-0x2 * 0x9b5 + -0xf03 + -0x29 * -0xd7) - Render['TextSize']('Hotkeys', _0x1a194b)[-0x24a7 * 0x1 + 0x147 + 0x2360] / (-0x61 * 0x31 + 0x8c5 * 0x1 + 0x9ce) + (-0x127b * -0x1 + -0x78d * 0x2 + -0x35f), _0x37631a + (0xcb9 + 0x2397 * -0x1 + -0x215 * -0xb), -0x179c + 0x5e * -0x2e + 0x6c0 * 0x6, 'Hotkeys', [-0x254c + -0x1357 + 0x38a3, -0x1afe + -0x5 * -0x51c + 0xb9 * 0x2, -0x1a45 + -0x1f57 + 0x2 * 0x1cce, alpha1337 * (-0x1 * -0x21be + -0x53 * -0x2 + -0x53 * 0x67) / (0xf6b * 0x2 + 0x1 * 0x1354 + -12840.7)], _0x1a194b), Render['String'](_0x197002 + _0x2a605b / (-0x1f55 + -0xb84 + 0x1 * 0x2adb) - Render['TextSize']('Hotkeys', _0x1a194b)[0xe41 + 0x254c + -0x338d] / (-0x7f1 * -0x4 + -0x74 + 0x2 * -0xfa7) + (0x1837 + -0x818 * 0x1 + -0x1 * 0x101e), _0x37631a + (0xec1 + 0x1c2f + -0x2ae8 * 0x1), -0x1110 + -0x20c8 + 0x31d8, 'Hotkeys', [0x110b + -0x2266 + 0x125a, 0x1d22 + -0x1 * -0x136b + -0x7ed * 0x6, 0x99 * 0x2d + -0x44a + 0x1cd * -0xc, alpha1337 * (0x1 * 0x10e7 + -0x1133 + 0x14b)], _0x1a194b);
        for (i = -0x5 * -0x353 + -0x9e * 0x2c + 0xa89; i < h['length']; i++) {
            switch (h[i]) {
                case 'Slow walk':
                    Render['FilledRect'](_0x197002, _0x37631a + (0x199e + 0xd8a + 0x49 * -0x89) + (0x358 + 0xd28 + -0x106e) * i, _0x2a605b, -0x1 * 0x23b1 + 0x2451 + -0x8e * 0x1, [-0xd97 * -0x2 + -0x105a + -0x91 * 0x13, -0x76d + -0x14ce * 0x1 + -0x1c4c * -0x1, -0x29 * 0xdf + 0x62 * 0x2f + 0x11ca, Math['min'](colorhotkeys[-0x26a8 + 0x1f77 + 0x1 * 0x734], Math['min'](swalpha * (0x564 + -0x1011 + -0x14c * -0x9), colorhotkeys[-0x970 * 0x3 + 0x3e2 * 0x8 + -0x2bd]))]), Render['String'](_0x197002 + (0x3d1 + -0x11af + 0xde1), _0x37631a + (0x1dce + 0x84 * 0x23 + 0x19 * -0x1e9) + (-0x116 + -0x7e9 + 0x911) * i, -0x1 * 0x242e + 0x1f40 + 0x4ee, h[i], [-0x8a5 * 0x1 + -0x21dc + -0x27 * -0x117, 0x1704 + -0xb6b + -0x1 * 0xb99, -0x1 * -0x41b + 0x51 * 0x53 + -0x1e5e, swalpha * (0x2529 + -0x1b06 + -0xd * 0xb4) / (-0x1773 + -0x1ae4 + 12888.3)], _0x1a194b), Render['String'](_0x197002 + (0x1f7b + 0x9 * -0x233 + 0xbae * -0x1), _0x37631a + (-0xb26 + -0x7 * -0x269 + -0x5a0) + (0x3 * 0x59 + -0xfa6 + -0xead * -0x1) * i, 0x1301 + 0x2fa + 0x1 * -0x15fb, h[i], [-0x10ba * 0x2 + -0x3f5 * 0x5 + 0x363c, -0x7a8 + -0x5ff * 0x3 + 0x1aa4, -0xb5f + 0x253c + -0x18de, swalpha * (-0x9e8 + -0x536 * 0x4 + -0x12d * -0x1b)], _0x1a194b), Render['String'](_0x197002 - (-0x15 * -0x189 + 0x1 * -0x1dc1 + -0xd3 * 0x3) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[-0xeaa + -0x16b4 + 0x255e], _0x37631a + (-0xc5 * -0x1 + -0x1c9a + 0x1bee) + (-0x257c + -0x1539 + -0x1 * -0x3ac7) * i, -0x1616 + -0x1 * 0x987 + 0x1f9d, '[holding]', [0x1ca7 + 0x1 * 0x1772 + -0x1 * 0x3419, -0x1 * -0xdd9 + 0x1 * 0x21f3 + -0x2fcc, 0x5c0 * -0x1 + -0x2379 * 0x1 + 0x2939, swalpha * (-0x95f + -0x1 * 0x48c + 0x775 * 0x2) / (0x2268 + -0x162 + -8452.7)], _0x1a194b), Render['String'](_0x197002 - (0xbe3 + -0x17f3 + -0x406 * -0x3) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[0xdf6 + -0x8 * 0x4bc + 0x1 * 0x17ea], _0x37631a + (-0x912 + 0x1dcd * 0x1 + -0x14a2) + (0x107 * 0x1b + -0x26c5 * -0x1 + -0x10 * 0x427) * i, 0x1f * 0xb8 + 0x2561 + 0x9 * -0x6a1, '[holding]', [0x1840 + 0x12a0 + -0x1 * 0x29e1, 0xb * -0x11d + -0x24d1 + 0x320f * 0x1, 0x120a + -0x2a * 0x2f + -0x1 * 0x955, swalpha * (0x2263 * 0x1 + -0x1110 + 0x14 * -0xd1)], _0x1a194b);
                    break;
                case 'Anti-Bruteforce':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x10d3 + -0x442 + 0x152c) + (-0x7e2 + -0x1 * -0x313 + 0x4e1) * i, _0x2a605b, 0xa4 * -0x7 + 0x1a * 0x107 + -0x1628, [0x7b * -0x1c + -0x18a5 + 0x262a, 0x24 * -0xeb + 0x7a * -0x1 + 0x2197, 0x1 * 0x17d7 + -0x19b1 * -0x1 + -0x1 * 0x3177, Math['min'](colorhotkeys[-0x3d * 0x17 + -0x1c13 + 0x2191], Math['min'](anti_brute_alpha * (0x1 * 0x158a + 0x1 * 0x95 + -0x1520 * 0x1), colorhotkeys[-0xeb * 0x1d + 0x1 * -0x175 + -0x95d * -0x3]))]), Render['String'](_0x197002 + (0x70 + -0x9a0 + -0x5 * -0x1d7), _0x37631a + (0x382 * 0x5 + -0x47 * 0xa + -0xeab * 0x1) + (-0x19ec + -0x3 * 0x91 + 0x1bb1) * i, -0x3ba + 0x1f89 + -0x1bcf, h[i], [0x190c + -0x3cf * -0x4 + -0x2848, 0x925 * -0x1 + 0x13b1 + -0xa8c, -0x16d1 * -0x1 + -0x8d0 + -0x5 * 0x2cd, anti_brute_alpha * (0x3 * 0x705 + -0xaf2 * -0x2 + -0x5 * 0x864) / (-0x1 * 0x5d1 + 0xa3b + -1128.7)], _0x1a194b), Render['String'](_0x197002 + (0x13d6 + -0x1 * 0x1d + -0x1 * 0x13b7), _0x37631a + (-0x291 * -0x8 + 0x3b * -0x9d + -0x1c0 * -0x9) + (-0xfa8 + -0x971 * 0x3 + 0x2c0d) * i, 0x12a1 + -0x1d05 + 0xa64, h[i], [-0x1 * 0xd39 + -0x254b + 0x3383 * 0x1, -0x29 * 0x39 + 0x1 * 0x27d + -0x187 * -0x5, 0x147c + -0x407 + -0xf76, anti_brute_alpha * (0x216b + 0x44 * 0x89 + -0x44d0)], _0x1a194b), Render['String'](_0x197002 - (-0x232d + -0x4cd * -0x2 + 0x51e * 0x5) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[0x6d0 + 0x81 * -0xa + -0x1c6], _0x37631a + (0x101b * 0x2 + 0x12f1 + -0x2 * 0x1987) + (0x2358 + -0x26fd * -0x1 + 0x4a43 * -0x1) * i, -0x243f + 0x1fd + 0x2242, '[enabled]', [-0x1fa9 * -0x1 + -0x10e5 + 0xc * -0x13b, -0x229d + 0xb47 * 0x3 + 0x19 * 0x8, 0x124a * -0x1 + -0x1b30 + 0x2d7a, anti_brute_alpha * (0x3 + 0x1 * -0x9db + -0xb9 * -0xf) / (0x1 * 0x118d + -0x9f8 + -1939.7)], _0x1a194b), Render['String'](_0x197002 - (-0x1a8b + -0x1 * 0x1cc4 + -0x77 * -0x77) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[-0x24df + -0x10 * 0x2b + 0x13 * 0x215], _0x37631a + (-0x2 * 0x127c + -0x1759 * -0x1 + 0xdb8) + (0x130c + 0x1139 * 0x1 + 0xc11 * -0x3) * i, -0x22 * 0x2b + -0x1a70 + -0xa * -0x337, '[enabled]', [0x7c3 * 0x5 + 0x110a + -0x36da, -0x64f + 0x79 + -0x1 * -0x6d5, 0x2d3 * 0x5 + -0x1c7 * 0x3 + 0x299 * -0x3, anti_brute_alpha * (0x1 * -0x2033 + 0xd77 + 0x13bb * 0x1)], _0x1a194b);
                    break;
                case 'Freestand':
                    Render['FilledRect'](_0x197002, _0x37631a + (0x2 * 0xb32 + 0x3 * 0x2e1 + -0x1ef0) + (0x6 * 0x565 + -0xa9 * 0x3 + -0x1e51) * i, _0x2a605b, -0x100 * 0x9 + 0x22a7 + -0xb1 * 0x25, [0x74e + -0x1 * 0x1729 + 0xfec, -0x2d * -0x7f + -0x151 * 0x10 + -0x22 * 0x9, -0x1f82 + -0x3 * -0xaf6 + -0x14f, Math['min'](colorhotkeys[0x5 * 0x5f + -0x5e + -0x2 * 0xbd], Math['min'](freestand_alpha * (-0x1a04 + -0x13a1 * -0x1 + 0x12 * 0x69), colorhotkeys[0x1a31 + 0x17 * 0x12b + -0x350b]))]), Render['String'](_0x197002 + (-0x7 * -0x2e1 + -0x237f + 0xf5b), _0x37631a + (0x5ff + 0xe * 0x222 + -0x23c2) + (0x3 * 0x42 + 0x9e1 + -0x3f * 0x2b) * i, -0x3 * 0x303 + -0x4bd + 0x52 * 0x2b, h[i], [-0x23 * 0x35 + -0x23fc + -0x62d * -0x7, 0x383 + 0x55 * 0x1b + -0xc7a, -0xb5f + -0x1b75 + 0x26d4, freestand_alpha * (-0x11b3 + 0x16a2 * -0x1 + 0x2954) / (-0xb4c + -0xb * -0x11b + -219.7)], _0x1a194b), Render['String'](_0x197002 + (0x197b + -0x182a + -0x43 * 0x5), _0x37631a + (0x1244 + 0x1 * 0x83e + -0x1a69) + (0x1300 * 0x2 + -0xf36 + -0x16b8) * i, -0xc1 * -0x10 + -0x3 * -0x69d + -0x1fe7, h[i], [0x1776 + -0xa * -0x4 + -0x169f, -0x4ff * -0x3 + -0x19d1 + 0xbd3, 0x36f + 0x1fba + -0x222a, freestand_alpha * (0x2 * 0x63a + -0x5 * -0x769 + 0x377 * -0xe)], _0x1a194b), Render['String'](_0x197002 - (0x1 * 0x1c82 + -0xa16 * -0x1 + -0x2695) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[-0x14cf + 0x1083 * 0x1 + 0x44c], _0x37631a + (0x3e + 0x1 * -0x2337 + 0x2312) + (0x9e + -0x106 * -0x19 + -0x29d * 0xa) * i, -0x264f + 0xf4c + 0x1703, '[enabled]', [0x3bc + 0xe95 + -0x9 * 0x209, 0x3 * -0x4db + 0x29 * -0xd5 + 0x30ae, -0x1e48 + 0x5fb + 0x184d, freestand_alpha * (-0x13d6 + -0x208d + 0x3562) / (-0xa4a * -0x1 + 0x52d * 0x2 + -5282.7)], _0x1a194b), Render['String'](_0x197002 - (0x1 * -0x2528 + 0x1ebc + 0x66e) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[0x5f * 0x2a + -0x5cc + 0xb3 * -0xe], _0x37631a + (0x55d * -0x1 + 0xa13 + -0x49d) + (0x289 * 0x4 + -0x553 * 0x5 + 0x108d) * i, -0xc6d + 0xc46 + 0x3 * 0xd, '[enabled]', [-0x2b * 0x16 + 0x4cb * -0x2 + 0xe47, 0x1 * 0x13d + 0xd8f + 0x1 * -0xdcd, 0x17ac + 0x130 * -0x20 + 0xf53, freestand_alpha * (-0x26cf * 0x1 + -0x1 * -0x1af3 + 0xcdb)], _0x1a194b);
                    break;
                case 'Backward Jitter':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x20a0 + -0x2ba * -0x5 + 0x1 * 0x1315) + (-0x314 * 0x4 + 0xd0a * 0x1 + 0xe * -0xc) * i, _0x2a605b, 0x1096 + 0x2400 + -0x3484, [0x68 + -0x21ea + 0x2193 * 0x1, 0x156b * 0x1 + 0x14b6 + -0x8 * 0x542, -0x56 * -0xd + 0x1d4b * 0x1 + -0x4 * 0x866, Math['min'](colorhotkeys[-0x1 * 0xbf5 + 0x1746 + -0x2 * 0x5a7], Math['min'](jitter_alpha * (0x243c + 0x233a + -0x4677), colorhotkeys[-0x121f + 0xbf8 + -0x315 * -0x2]))]), Render['String'](_0x197002 + (-0x1fe5 * -0x1 + 0x24b * 0x2 + 0x185 * -0x18), _0x37631a + (0x2089 * -0x1 + -0xa94 + -0x1 * -0x2b36) + (-0x3 * 0x8a5 + 0xe00 + 0xc01 * 0x1) * i, 0x905 + -0x79c + -0x1 * 0x169, h[i], [0x57 * -0x17 + -0x2b * -0xb5 + -0x19d * 0xe, -0x21 * -0x1d + 0x26d + -0x315 * 0x2, 0x78 * 0x46 + 0xca5 + -0x2d75, jitter_alpha * (-0x21af + -0xf02 + 0x31b0) / (-0x1 * -0x1487 + 0x1206 + -9867.7)], _0x1a194b), Render['String'](_0x197002 + (0x122b + 0x55b * -0x4 + 0x343), _0x37631a + (0x1672 + -0x3fb + -0x125e) + (-0xabc + -0x21 * 0x83 + 0x1bb1) * i, -0x1 * 0x4bd + -0x866 + 0x1 * 0xd23, h[i], [0xca1 + 0xa9b + 0x1 * -0x163d, -0x1a6f + -0x174a * -0x1 + 0x109 * 0x4, 0x234e + 0x77 * 0x2 + -0x233d, jitter_alpha * (-0xacd + 0xb5 + -0xb17 * -0x1)], _0x1a194b), Render['String'](_0x197002 - (-0x1d80 + -0x11e1 + 0x2 * 0x17b2) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[0x1967 * -0x1 + 0x56 * 0x56 + -0x37d], _0x37631a + (0x5 * 0x5bd + 0xf9a + -0x2c32) + (-0x356 * -0x1 + 0xcb * -0x2f + 0x2201) * i, -0x1262 + -0x22a6 + -0x4 * -0xd42, '[enabled]', [0xa5 * -0x8 + -0x1af2 + 0xe * 0x24b, -0x21cf * 0x1 + -0xfd1 * 0x1 + -0x1 * -0x31a0, 0x245d + 0x1215 + -0x3672, jitter_alpha * (0x7 * 0x26b + -0x1256 + -0x8 * -0x4d) / (0x12dc + 0x2065 * -0x1 + 3466.3)], _0x1a194b), Render['String'](_0x197002 - (-0xb7f + -0x1398 + -0x1f19 * -0x1) + _0x2a605b - Render['TextSize']('[enabled]', _0x1a194b)[0x12f * 0x1a + 0x1f9e + -0x3e64], _0x37631a + (0x1fc1 + -0x1ed + -0x1dbb) + (0x988 + 0x375 + -0xceb) * i, -0x19dd + 0x108d + 0x950, '[enabled]', [-0x23e3 + -0x1 * 0x2056 + 0x28 * 0x1bb, 0x26d8 + -0x1 * 0x38c + -0x224d, 0x1 * 0x12e6 + 0x6c2 + -0x1 * 0x18a9, jitter_alpha * (0x846 * -0x2 + 0x19ee + 0x71 * -0x13)], _0x1a194b);
                    break;
                case 'Duck peek assist':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x141 * 0x1f + -0x12d4 * -0x2 + 0x14e) + (-0x243b + -0x205b * 0x1 + 0x44a8) * i, _0x2a605b, -0x1717 * -0x1 + 0x66 * 0x37 + -0x1 * 0x2cef, [0x93b + -0x1 * -0x23df + -0x2d09, 0x2419 * 0x1 + -0x1 * -0x975 + 0x919 * -0x5, -0x2496 + -0xb7 * -0xb + -0x1cca * -0x1, Math['min'](colorhotkeys[-0x215a + -0xfe1 + 0x313e], Math['min'](fdalpha * (-0x11dd + -0x259d * 0x1 + 0x3879), colorhotkeys[-0xea4 * 0x1 + -0x181d + 0x26c4 * 0x1]))]), Render['String'](_0x197002 + (-0x7cc + 0x8c * 0x1 + 0xb * 0xa9), _0x37631a + (-0x1629 * -0x1 + -0x1b96 + 0xca * 0x7) + (0x15e * 0x2 + -0x16e3 + -0x1f * -0xa7) * i, 0xb26 * 0x2 + -0xa53 + -0xbf9 * 0x1, h[i], [0x17fb + -0x1658 + -0x1a3, 0x57 * 0x2b + -0x235a + 0x1 * 0x14bd, -0x1750 + 0x1c69 * 0x1 + -0x519 * 0x1, fdalpha * (0x38c + -0x1 * -0xbb6 + 0x3 * -0x4c1) / (-0x2 * -0x121e + 0x1d * -0x116 + -1212.7)], _0x1a194b), Render['String'](_0x197002 + (0x8 * 0x2b4 + -0x4b3 * 0x3 + -0x785), _0x37631a + (-0xc1 * 0x1 + 0x1 * -0x1f26 + 0x2000 * 0x1) + (-0x58 * 0x68 + -0x1 * -0x5d2 + 0x1e00) * i, 0x2353 + 0x21aa + -0x44fd, h[i], [-0x1 * -0xa8c + 0x137 + -0xac4 * 0x1, 0x2031 + 0xb3 * 0x2f + -0x400f, -0x1921 + -0x4d * -0x2f + 0xbfd, fdalpha * (-0x15a2 + -0x1 * 0x1e36 + -0x1f5 * -0x1b)], _0x1a194b), Render['String'](_0x197002 - (-0x16e2 + -0x8d + 0x1772) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[0x3fb * 0x2 + -0x48c + -0x36a], _0x37631a + (0x1 * -0xa73 + 0x2 * -0x1047 + -0x4ca * -0x9) + (-0xb16 + 0xb26 + 0x2 * 0x1) * i, -0x8ef * -0x2 + 0x249 + 0xb * -0x1d5, '[holding]', [0x7 * -0x2b7 + 0x1354 + -0x1 * 0x53, 0x1 * -0x50b + -0x1 * 0x11d9 + -0x14 * -0x125, -0x11d1 + 0x1 * -0x445 + 0xb * 0x202, fdalpha * (-0xbf * 0xa + -0xaae * -0x1 + -0x239 * 0x1) / (-0x1243 + -0x59c + 6112.3)], _0x1a194b), Render['String'](_0x197002 - (0x335 * 0x1 + 0xab3 + -0xde6) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[-0xf1 + -0x19b7 + -0x6aa * -0x4], _0x37631a + (-0x1876 + 0xcec * 0x1 + -0xba3 * -0x1) + (-0x2643 * -0x1 + -0x22d3 + -0x35e) * i, -0x24e9 + 0x2375 * 0x1 + -0x4 * -0x5d, '[holding]', [-0x1b03 + 0x828 + -0x4d * -0x42, 0x191 * -0xc + 0x3 * 0x14f + 0x7ef * 0x2, -0xf74 + 0x3 * -0xca7 + -0x8 * -0x6cd, fdalpha * (-0x1 * 0x1efd + -0x2625 + 0x4621)], _0x1a194b);
                    break;
                case 'Auto peek':
                    Render['FilledRect'](_0x197002, _0x37631a + (0x9d3 + 0x182e + -0x2 * 0x10f5) + (0x1e15 + -0xd26 + 0x10dd * -0x1) * i, _0x2a605b, -0x1 * 0x2aa + 0x4d * 0x66 + 0x3fe * -0x7, [-0x1d4c + -0x173 + 0x1ed0, 0x1 * -0xc20 + -0x1443 + -0x1 * -0x2074, 0x7 * -0x1e7 + -0x4 * 0x8dd + 0x30d6, Math['min'](colorhotkeys[-0x1 * 0x65b + 0x269b * 0x1 + 0x3f * -0x83], Math['min'](apalpha * (0xe09 + 0x22b2 + 0x2f * -0x104), colorhotkeys[0x748 + 0x1c64 + -0x23a9]))]), Render['String'](_0x197002 + (0x2 * 0x10f2 + 0x4 * 0x5ed + -0x1 * 0x3995), _0x37631a + (-0x1 * 0x1922 + 0xffc + -0x3 * -0x315) + (0x198 + 0x48b * 0x2 + 0x61 * -0x1c) * i, -0x781 + 0x1b11 + -0x1390, h[i], [-0x64 * 0xf + -0x1 * -0x227c + -0x1ca0, -0x67a + -0x5 * 0x704 + 0x298e, 0x57b + 0x27 * 0xbf + 0x1 * -0x2294, apalpha * (-0x2449 + -0x23e2 + 0x492a) / (-0x3d6 + -0x1676 + 6733.3)], _0x1a194b), Render['String'](_0x197002 + (-0x1519 + -0x1 * 0x2225 + -0x220 * -0x1a), _0x37631a + (-0x7c9 * 0x3 + -0xeab * -0x1 + 0x8c9) + (-0x1063 * -0x2 + 0xad2 + -0x2b86) * i, -0x1 * 0x24df + -0x8e5 + 0x2dc4, h[i], [-0x615 * 0x3 + 0x1 * -0x612 + 0x1950, -0x1df2 * 0x1 + 0x184 * 0x9 + 0x114d * 0x1, -0x2053 + 0x1f9b + -0x1 * -0x1b7, apalpha * (0x19bc + 0x99a * -0x1 + -0xf23)], _0x1a194b), Render['String'](_0x197002 - (-0x123b + 0x2019 + 0xddb * -0x1) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[-0x1 * -0x1dd3 + -0xb9 * 0xe + -0x13b5], _0x37631a + (-0x110f + -0x1536 + 0x265e) + (0x68a * -0x3 + -0x216 + 0x742 * 0x3) * i, 0x2a * -0x4a + -0x1d3 * 0x3 + 0x1f5 * 0x9, '[toggled]', [0x1 * -0x399 + 0x20be + 0x9b7 * -0x3, 0x1 * 0x1021 + 0xe84 * -0x1 + -0x19d, -0x837 + -0xaa5 * 0x2 + 0x1d81, apalpha * (0x1cba + -0x2d8 + -0x18e3) / (0x258e + -0x32a + -8802.7)], _0x1a194b), Render['String'](_0x197002 - (-0x1 * 0x1583 + -0x1 * 0x1628 + 0x2bad) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x124e + 0x3e4 + 0x3 * -0x766], _0x37631a + (0x1cc + -0x5cf + 0x41c) + (0x2 * 0x53c + -0x853 + -0x9 * 0x3b) * i, -0x187 * -0xa + 0x1 * -0x1357 + 0x411, '[toggled]', [0x170f + 0x213 * -0xd + 0x1 * 0x4e7, 0xe48 + -0x630 * 0x2 + -0xe9, -0x1758 + -0x172d + 0x2f84, apalpha * (-0x861 + -0x1b97 + 0x24f7 * 0x1)], _0x1a194b);
                    break;
                case 'Anti-aim inverter':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x5b * 0x7 + 0x3d * 0x6c + 0x9c * -0x26) + (0xb6 * 0x26 + 0xf4d + -0xe15 * 0x3) * i, _0x2a605b, 0x9f * 0x39 + -0x17d3 + -0xb82, [0xb8c * 0x2 + 0x1508 + 0x2c0f * -0x1, 0x2427 + 0x2652 + 0x129a * -0x4, -0x7 * 0x4a + -0x17e3 * 0x1 + 0x19fa, Math['min'](colorhotkeys[0xe * -0xc8 + 0x164d + -0xb5a], Math['min'](aialpha * (0x19c0 + 0xa2a * -0x1 + 0xf9 * -0xf), colorhotkeys[0x1 * -0xb89 + -0x7 * 0x56 + 0x2 * 0x6f3]))]), Render['String'](_0x197002 + (-0x1763 + -0x13 * 0x17d + -0x1 * -0x33ad), _0x37631a + (0x1 * -0xb21 + -0x1499 * 0x1 + 0x1fd3) + (0x49 * -0x7b + -0x2 * -0xb11 + 0xd03) * i, 0x1 * 0x2647 + -0x3 * -0x9c1 + 0x46 * -0xf7, h[i], [0x20 * 0xbc + 0x1 * 0x20e3 + -0xb47 * 0x5, -0x1 * 0x17cc + -0x7 * -0x15 + -0x91 * -0x29, 0x8fe * 0x1 + -0x1 * 0x1399 + 0xa9b, aialpha * (0xbe6 + 0x3d * -0x67 + -0xda4 * -0x1) / (-0x1 * 0x158b + -0x34 * -0x52 + 1252.3)], _0x1a194b), Render['String'](_0x197002 + (0xc3 * 0x27 + -0x6b9 + -0x16fa), _0x37631a + (-0xb1 + -0xa51 + 0x1 * 0xb1b) + (-0xe * -0x22b + 0xdf * 0x1d + -0x1 * 0x378b) * i, -0x19cf * -0x1 + -0x530 * 0x6 + 0x551, h[i], [-0x124 * 0xf + 0x1c31 + -0xa16, 0x2 * 0xb7 + -0x48b + 0x107 * 0x4, -0xf6b * 0x2 + 0x2 * 0x3ce + 0x1839, aialpha * (-0x22ef + 0x215d + 0x291)], _0x1a194b), Render['String'](_0x197002 - (0xee5 * 0x1 + 0x4 * -0x8bd + -0x1412 * -0x1) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[-0x1 * 0x2249 + 0x101e + 0x1 * 0x122b], _0x37631a + (0x7 * -0x3b5 + -0x448 * 0x9 + 0x4094) + (-0x44d * -0x1 + 0xe61 + -0x1 * 0x129c) * i, -0x1646 * -0x1 + 0x206 * 0xd + -0x3094 * 0x1, '[toggled]', [0x2f * -0xd3 + 0x39 * -0x19 + 0x2c4e, -0x2 * -0x10bb + -0x1a5c * 0x1 + 0x3 * -0x25e, 0x6ca + 0x6 * -0x3cb + 0x49 * 0x38, aialpha * (0x1b45 + 0x1 * -0x1475 + -0x5d1) / (0x44 * -0x1b + 0xb15 * -0x1 + 4674.3)], _0x1a194b), Render['String'](_0x197002 - (0x322 + -0x2233 + 0x1f13) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x1db0 + 0xaf5 * 0x3 + -0x1 * 0x3e8f], _0x37631a + (0x991 + 0x1 * -0x1229 + -0x8b1 * -0x1) + (-0x13f0 + -0x31 * 0x2 + 0x1464) * i, 0xc1 + -0x1 * -0x49d + -0x55e, '[toggled]', [0x2f * -0xc1 + -0x5af + 0x2a1d, -0x122a + -0x3 * -0xbca + 0x567 * -0x3, 0x26e4 + 0x11 * -0x2d + -0x22e8, aialpha * (-0x1 * 0x47 + 0x19b8 + -0x1872)], _0x1a194b);
                    break;
                case 'Safe point override':
                    Render['FilledRect'](_0x197002, _0x37631a + (0xd * 0x2f5 + -0x1a70 + -0xbea) + (-0x13 * 0x1e7 + -0xd1 * -0x9 + 0x2e3 * 0xa) * i, _0x2a605b, 0x16 * 0x1c3 + 0x17f9 * -0x1 + -0x1 * 0xeb7, [-0x2467 + -0x1101 + 0x3579, -0x193d + 0x11 * 0xda + 0x16 * 0x7e, -0xed4 + -0x1f4d + -0x51 * -0x92, Math['min'](colorhotkeys[-0x105d + -0x462 + 0x2 * 0xa61], Math['min'](spalpha * (-0x2160 + -0x13d * -0x7 + 0x19b4), colorhotkeys[0x2 * -0x353 + 0xd3 * 0x21 + 0xb * -0x1de]))]), Render['String'](_0x197002 + (0x1f3e + -0x18e * -0x19 + -0x4619), _0x37631a + (0x2 * 0x6db + 0x3 * -0x218 + 0x755 * -0x1) + (0x139 + 0x1 * 0xb82 + -0xca9) * i, 0x19bb + 0x11 + -0xd * 0x1fc, h[i], [0xe73 + -0x918 + -0x55b, 0x67f * 0x6 + -0xb9 * 0x34 + 0xb3 * -0x2, -0x685 * -0x4 + -0xa90 + -0x14b * 0xc, spalpha * (0xcf6 + -0x11ef + 0x1 * 0x5f8) / (0x1 * -0x13d5 + 0x949 + 2701.3)], _0x1a194b), Render['String'](_0x197002 + (0x1 * 0x2450 + -0x2165 + -0x2e9), _0x37631a + (0x1db3 * 0x1 + -0x1f6b + 0x1d1) + (-0x1 * -0x1a6d + 0x19 * 0x10d + -0x34a0) * i, -0x1a1f + -0x1 * 0xf6a + -0x1f * -0x157, h[i], [-0xc1d * 0x3 + 0x1 * -0x2b3 + 0x2809 * 0x1, 0x157b + -0xd00 * 0x3 + 0x4a1 * 0x4, -0x1474 + 0x29f * 0xd + -0x328 * 0x4, spalpha * (0x19f5 + -0x1fec + -0x51 * -0x16)], _0x1a194b), Render['String'](_0x197002 - (-0x112f + -0x32 * 0x73 + -0xd38 * -0x3) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x12df + -0xaaa + -0x835], _0x37631a + (0x2 * 0x83f + -0x1de * 0x1 + -0xe87) + (-0x756 + 0x55c * 0x2 + -0x350) * i, 0xab9 * -0x1 + -0x1c88 + 0x1 * 0x2741, '[toggled]', [-0x20dd + -0x21d9 * 0x1 + -0x1 * -0x42b6, -0x1163 + 0x218 * -0x5 + 0x1bdb, 0x8f2 * -0x1 + -0x9ae + 0x8 * 0x254, spalpha * (-0xb * -0x28f + 0x3aa * -0x7 + 0xc * -0x20) / (-0x1d * -0x19 + -0xf7 * 0x28 + 9156.3)], _0x1a194b), Render['String'](_0x197002 - (-0x207 + -0x824 + 0x1 * 0xa2d) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[-0x29f + -0xa25 + -0x4c * -0x2b], _0x37631a + (-0x7b * 0x1d + -0x2e * 0x30 + 0x16a8) + (-0xd6 + 0x4 * 0x452 + 0x20 * -0x83) * i, -0x1691 + 0x1ef2 + 0xf * -0x8f, '[toggled]', [0xcd9 + 0x391 + -0xf6b, 0xd8 * -0xf + -0x33 * 0x2f + 0x3 * 0x7ac, -0x429 + 0x2a7 * 0x1 + 0x1 * 0x281, spalpha * (0x5 * -0x288 + -0x1 * -0xd61 + 0x7 * 0xa)], _0x1a194b);
                    break;
                case 'Force body aim':
                    Render['FilledRect'](_0x197002, _0x37631a + (0x1402 + 0x2217 + -0x3602) + (0x1 * 0x1e44 + 0x8 * -0x45f + 0x4c6) * i, _0x2a605b, 0xccf * 0x1 + 0xaf8 + -0x17b5, [0x123 * 0x1f + 0x24ef * -0x1 + 0x1c3, -0xcc5 + -0xae1 + 0x17b7, 0x35b * -0xb + -0xaf * 0xa + -0x4 * -0xaf4, Math['min'](colorhotkeys[0x162 * -0x8 + 0x8e * 0x15 + -0x93], Math['min'](fbalpha * (-0x5 * 0x17f + -0xc0b * -0x1 + -0x391), colorhotkeys[-0x823 * -0x1 + -0x9ca + 0x1aa]))]), Render['String'](_0x197002 + (0x1308 + 0x800 + -0x1b05 * 0x1), _0x37631a + (-0x5 * -0x1bb + 0x1 * 0x20ed + 0x11f * -0x25) + (0x1bbf + 0xc13 + -0x27c0) * i, 0x7 * 0xc6 + 0x832 * 0x1 + -0xd9c, h[i], [-0x21 * 0x11a + 0x25 * -0x37 + 0x2c4d, 0x23bf + -0x186e + -0xb51, 0x239d + -0x6d0 + -0x65 * 0x49, fbalpha * (0xe4d + -0xe1f + -0xb * -0x13) / (0x95 * -0x3e + -0xc5 * -0x31 + -413.7)], _0x1a194b), Render['String'](_0x197002 + (-0x4 * 0x106 + -0x1c10 + 0x202a), _0x37631a + (0xad2 + -0x2 * -0xf5c + -0x2971) + (0x9e * -0x8 + 0x1dae * -0x1 + 0x22b0) * i, 0x16e2 + -0x1524 + -0x1be, h[i], [0x4 * -0x1bf + 0xdc0 + -0x5c5, 0x489 + 0xa3f + -0xdc9, -0xb3 * 0x20 + 0x22dc * 0x1 + 0x11 * -0xad, fbalpha * (-0x252c + -0x1357 + 0x3982)], _0x1a194b), Render['String'](_0x197002 - (-0x257a + -0x109 + 0x2686) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[-0x1a54 + 0x178d * 0x1 + -0x9 * -0x4f], _0x37631a + (-0x1579 + 0x50a + 0x1 * 0x1088) + (-0x170e + 0xfcf + 0x751) * i, 0x2076 + -0x2 * 0x425 + 0xe * -0x1ba, '[holding]', [-0x4f3 + 0x185d + -0x2c6 * 0x7, 0x2 * 0xa35 + 0x66 * -0x55 + 0x1ec * 0x7, 0x806 + 0x8f7 + -0x1 * 0x10fd, fbalpha * (0x1d98 + -0xea * -0x10 + -0x2b39) / (-0x14af + 0x98 * 0x8 + 4080.3)], _0x1a194b), Render['String'](_0x197002 - (0x861 * -0x1 + 0xb52 + -0x1 * 0x2ef) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[0x10c * -0x2 + 0xe77 + 0x1 * -0xc5f], _0x37631a + (-0xf7 + -0xa86 + 0x5cb * 0x2) + (-0x47a + -0xd54 * -0x2 + 0x4 * -0x587) * i, 0x3 * -0x2d9 + 0x25 * -0x79 + 0x1a08 * 0x1, '[holding]', [0x1be1 + 0x1ca * -0xb + -0x2 * 0x39a, -0x11 * 0x43 + 0x1648 + -0x10d6, 0x25b * -0x9 + 0xacf * 0x1 + 0xb * 0x109, fbalpha * (0xfe5 * 0x1 + 0x144e + -0x5de * 0x6)], _0x1a194b);
                    break;
                case 'Double tap':
                    Render['FilledRect'](_0x197002, _0x37631a + (0x242f + -0x22cb * -0x1 + -0x46e3) + (-0x151 * -0x19 + 0x24ed * 0x1 + -0x45c4) * i, _0x2a605b, -0xf2 * -0x29 + -0x2006 + 0x6aa * -0x1, [0x2dd * 0x5 + 0x4a2 * -0x8 + 0x16d0 * 0x1, -0x1bf7 * 0x1 + 0x65f * -0x2 + 0x266 * 0x11, -0x2140 + 0xbdf + -0x5 * -0x44a, Math['min'](colorhotkeys[-0x9 * 0x2b3 + -0x186a + 0x30b8], Math['min'](dtalpha * (-0x1fa2 + 0xc98 * -0x3 + 0xe15 * 0x5), colorhotkeys[-0x1f04 + -0x1d8 + 0x11 * 0x1ef]))]), Render['String'](_0x197002 + (-0x4cd * -0x1 + -0x162e * -0x1 + 0x4 * -0x6be), _0x37631a + (0x21 * -0x107 + -0xeb6 + 0x30b6) + (-0x763 * 0x5 + -0x8b6 + 0x2db7) * i, 0x5 * 0x749 + -0x1 * 0x1f34 + 0xbf * -0x7, h[i], [0x5 * 0xcb + 0x1226 + -0x161d, -0x5d7 + -0x5ce + 0xba5, -0x128 * 0x1e + 0x869 + 0xd9 * 0x1f, dtalpha * (0x285 * 0x1 + -0x25d4 + 0x2 * 0x1227) / (0x4 * 0x233 + -0x17c + -1870.7)], _0x1a194b), Render['String'](_0x197002 + (0x1a9b * 0x1 + 0x1855 + 0x52 * -0x9f), _0x37631a + (0x186e + 0x232 * 0xd + -0x34df) + (-0x1 * 0x191f + 0x1 * 0x18a9 + -0x1 * -0x88) * i, -0x29 * 0xca + 0x2 * -0xe75 + 0x3d44, h[i], [-0x1730 * 0x1 + -0x3 * -0xc25 + -0xc40, 0x10f * 0xe + 0x55d * -0x7 + 0x17 * 0x108, -0x888 + -0x824 + 0x1 * 0x11ab, dtalpha * (0x9a9 * 0x4 + 0x1 * -0x8ad + -0x1cf8)], _0x1a194b), Render['String'](_0x197002 - (-0x174a + -0x1003 * 0x1 + 0x25 * 0x110) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[-0x1 * -0x26c9 + 0x14d4 + -0x3b9d], _0x37631a + (-0x2c1 + 0x1 * 0x1529 + -0x124f) + (0x166 + 0x24d6 + -0x5 * 0x7a2) * i, -0xa97 * 0x3 + 0x1e6 * -0x13 + 0x43d7, '[toggled]', [-0x59 * 0x5c + 0x1 * -0x1cc1 + 0x3cbd, 0x188b + -0x3 * 0xa09 + 0x590, -0xa2c + -0x1abb * -0x1 + -0x108f * 0x1, dtalpha * (0xae * -0x16 + 0x1 * 0x141b + -0x428) / (-0xde * -0x3 + -0xe4b * -0x1 + -4323.7)], _0x1a194b), Render['String'](_0x197002 - (0x1cc2 * -0x1 + -0x488 + 0x214c) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x22f2 + -0x1372 + -0x1 * 0xf80], _0x37631a + (-0x8a6 + -0x1d9b + 0x265a) + (0x9d * -0x2b + -0x1fb7 * -0x1 + -0x546) * i, -0x1298 + -0x82d + 0x4d * 0x59, '[toggled]', [0x5 * -0x237 + 0x47 * -0x44 + -0x4a * -0x6b, 0x6 * 0xc + 0x476 + 0x89 * -0x7, 0x35 * -0x7 + 0xb71 + 0x31 * -0x2f, dtalpha * (0xa * -0x2f5 + 0xed9 + 0xfb8)], _0x1a194b);
                    break;
                case 'Hide shots':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0xc7 * -0x23 + -0xfd7 + -0xb47) + (-0xd6 * 0x10 + -0x1 * 0x1966 + -0x9b6 * -0x4) * i, _0x2a605b, 0x1dc0 + -0x2 * 0xbd5 + -0x604, [0x990 + -0x25 * -0xc5 + -0x25f8, 0x2204 + -0x1a * -0x9d + -0x31e5, -0x7e0 + 0x2d4 * 0x5 + 0x633 * -0x1, Math['min'](colorhotkeys[0x25e + -0x1d45 + 0x1aea * 0x1], Math['min'](hsalpha * (0x19ff + -0x9 * -0x20b + -0x1d * 0x17f), colorhotkeys[-0x20e0 * -0x1 + 0x14f0 + -0x35cd]))]), Render['String'](_0x197002 + (0x517 * -0x2 + 0x1809 + -0xdd8), _0x37631a + (-0x1bc2 + 0xd * -0x2f2 + 0x4225) + (-0x15f0 + 0x4 * -0x4d5 + 0x2956) * i, -0x9b * 0x2 + 0x1407 + -0x12d1, h[i], [-0x1cfa + 0x1 * 0x1f75 + -0x1 * 0x27b, 0x1f41 * -0x1 + 0x14c * 0xb + 0x10fd * 0x1, 0x9ab + 0x1fa7 + -0x7b * 0x56, hsalpha * (-0x5 * 0x20b + -0x20bc + 0x2bf2) / (0x231d + 0x3 * -0xf6 + -8249.7)], _0x1a194b), Render['String'](_0x197002 + (0x753 * 0x4 + -0x2035 + 0x2eb), _0x37631a + (-0xc23 * 0x1 + -0x1c * 0x59 + 0x128 * 0x13) + (0x19 * -0x163 + 0x6fd + 0xc * 0x250) * i, 0x163b + -0x2663 + -0xbc * -0x16, h[i], [0x249 * 0xd + 0x26b * 0x5 + -0x28cd, 0x166f * -0x1 + 0xb8 * -0x1 + 0x1826, -0x3 * -0x823 + 0x1774 + -0x1 * 0x2ede, hsalpha * (-0x1a31 + -0x3f8 + -0x7ca * -0x4)], _0x1a194b), Render['String'](_0x197002 - (0x153e + -0x2306 + 0xdcb) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x1 * 0x1ef9 + 0x5c * -0x3e + -0x8b1], _0x37631a + (-0x2 * -0xa47 + 0x6 * -0x558 + -0xb9b * -0x1) + (-0x4 * 0x366 + -0x6f6 + 0x14a0) * i, 0x133f + -0x2 * -0xafa + -0x1 * 0x2933, '[toggled]', [0x399 * 0x9 + 0x16b1 + 0x173 * -0x26, -0x404 * 0x1 + -0x329 + 0x72d, -0x19d6 + 0xdcb * -0x2 + -0x1a * -0x20e, hsalpha * (-0x923 + 0x11e6 + 0x1c * -0x47) / (0x1823 + -0x1794 + -141.7)], _0x1a194b), Render['String'](_0x197002 - (-0x1ce2 + -0x4 * -0x7ff + -0x318) + _0x2a605b - Render['TextSize']('[toggled]', _0x1a194b)[0x1521 + 0x3a2 + -0x18c3], _0x37631a + (-0x117d * 0x1 + 0x252b + -0x9 * 0x22d) + (-0x10d * -0x14 + -0x1699 + 0x1a7) * i, 0x1 * 0x2149 + -0xefd * 0x1 + -0x124c, '[toggled]', [-0x62e * 0x2 + -0x73 * 0x8 + 0x10f3, 0x155d + 0x1e9 + -0x1 * 0x1647, -0x55a + 0x79d * 0x2 + -0x8e1, hsalpha * (0x1497 * -0x1 + 0x1 * 0x252f + -0x533 * 0x3)], _0x1a194b);
                    break;
                case 'Damage override':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x1ec9 + 0xe41 + 0x109f) + (-0x172b + 0x1e58 + -0x71b) * i, _0x2a605b, 0x1 * 0xbad + 0x1b99 + 0x1a * -0x182, [0x19 * 0x101 + -0xef0 + 0x4 * -0x286, 0x1 * 0x939 + -0xb7b + -0x253 * -0x1, -0x22a0 + -0xeea + 0x319b, Math['min'](colorhotkeys[-0x1312 * -0x1 + -0x1 * -0x10d + -0x141c], Math['min'](doalpha * (-0x15e1 * -0x1 + -0xdab * 0x1 + -0x1 * 0x737), colorhotkeys[0x203f + -0x1 * 0x2425 + 0x3e9 * 0x1]))]), Render['String'](_0x197002 + (0xdfe + -0x1bf2 + 0xdf7), _0x37631a + (-0x1f * -0xd1 + -0xb82 + 0x4 * -0x36d) + (-0x1 * -0x211 + 0x25e8 + 0x9 * -0x46f) * i, 0x619 + 0x13 * -0x8d + 0x45e, h[i], [-0x4be * 0x7 + -0x1744 + -0x92 * -0x63, 0x1e27 + -0x1702 + -0x725, 0xe59 * -0x2 + 0xe * 0x20f + -0x20, doalpha * (-0x1fe7 + -0x24b2 + 0x4598) / (0x3 * -0x685 + 0x1cb7 + -2342.7)], _0x1a194b), Render['String'](_0x197002 + (0x2 * -0x1ea + -0x7 * -0x1de + 0x93c * -0x1), _0x37631a + (0x6b2 * -0x4 + -0x830 + 0x2311) + (0x9 * -0x358 + -0x853 + -0x267d * -0x1) * i, 0x1813 + -0x1 * 0xe9 + 0x172a * -0x1, h[i], [0x171 + 0x6e * -0x2 + 0x1 * 0x6a, 0x1 * -0x24cd + 0x1ba + -0x201 * -0x12, 0x19dc + 0x35 * 0x83 + -0x33fc, doalpha * (-0x1290 + -0x1b8b + 0x2f1a)], _0x1a194b), Render['String'](_0x197002 - (-0x535 * -0x1 + -0x33 * 0x3a + 0x65c) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[-0x1d84 + -0x6af + 0x2433 * 0x1], _0x37631a + (0x2 * 0xdca + 0x1d00 + -0x1 * 0x387b) + (-0x9d2 * 0x1 + -0x15b * -0x10 + -0xbcc) * i, 0xfaa + -0x15 * -0x16f + -0x2dc5, '[holding]', [-0x1 * -0x14b1 + 0x3a4 + 0x1 * -0x1855, -0x2099 + -0x53b * -0x6 + -0x1 * -0x137, 0x1 * -0x2408 + 0x2f9 + 0x111 * 0x1f, doalpha * (-0x6f * -0x7 + -0x1e64 + 0x26 * 0xbf) / (0x1 * 0x2018 + 0x4a8 * 0x8 + -17750.7)], _0x1a194b), Render['String'](_0x197002 - (-0xbbb + -0x1 * -0x9e6 + 0x1d7) + _0x2a605b - Render['TextSize']('[holding]', _0x1a194b)[0x5aa * -0x5 + -0xa2 + 0x1cf4], _0x37631a + (-0x12a + 0x21fe + -0x13 * 0x1b9) + (-0x1237 * 0x1 + 0x7 * -0x1d8 + 0x1f31) * i, 0x14fa + -0x10 * 0x8e + -0xc1a, '[holding]', [-0x24aa + -0xb * -0x24b + -0x10 * -0xc7, 0x2263 * -0x1 + 0x2b * -0x4c + 0x3026, -0x5dd * -0x1 + 0x13bb + -0x3 * 0x833, doalpha * (0x19aa + 0x2253 + 0x2 * -0x1d7f)], _0x1a194b);
                    break;
                case 'Menu Opened':
                    Render['FilledRect'](_0x197002, _0x37631a + (-0x2 * -0x9a3 + 0x71 * -0x47 + -0x614 * -0x2) + (-0x6d3 + -0x1e4c + 0x2531) * i, _0x2a605b, 0x9b7 + 0x1 * -0xaff + 0x15a, [0x6e * -0x4f + -0x1ddf + 0x1ff1 * 0x2, 0x24bf + 0xdfd + 0x7 * -0x73d, 0x377 * -0x6 + 0x1 * -0x1ac2 + 0x2f9d, Math['min'](colorhotkeys[-0x2 * 0x62 + -0x3 * 0x691 + 0x147a], Math['min'](menualpha * (-0x1ecd + -0x1d47 * -0x1 + 0x285), colorhotkeys[0x1 * -0x13f9 + 0x251 * -0x7 + 0x2433]))]), Render['String'](_0x197002 + (-0x7 * 0x317 + -0x43a + -0xb * -0x25a), _0x37631a + (-0x5 * 0x209 + -0x1a4a + -0x10 * -0x249) + (-0xb * 0x1ec + -0xd * 0x209 + -0x2fab * -0x1) * i, 0x1457 + -0xb4 * 0xc + -0x115 * 0xb, h[i], [-0x126 * -0x1d + 0x3 * -0x2ed + -0x82d * 0x3, 0x444 + -0x11 * -0xbb + 0x1 * -0x10af, 0x2329 + 0x345 + -0x2 * 0x1337, menualpha * (-0x1801 + 0x558 + 0x13a8) / (-0xcef + 0x19 * -0xb5 + 7837.3)], _0x1a194b), Render['String'](_0x197002 + (0x13d6 + -0x39a * 0x5 + -0x1d2), _0x37631a + (0x1 * 0x122b + -0x9 * 0x333 + 0xab9) + (0x5 * -0x17f + -0xcbc * -0x3 + 0x1ea7 * -0x1) * i, 0x71 * 0x13 + 0xb3 + 0x916 * -0x1, h[i], [-0x10b * 0xb + -0x17 * 0x48 + 0x6 * 0x328, -0x664 * 0x2 + -0xe3 * 0x7 + -0x2 * -0x9fe, 0x1 * 0x1291 + -0x171 * 0x9 + -0x499, menualpha * (0xd * 0x38 + 0x18fb + 0x1 * -0x1ad4)], _0x1a194b), Render['String'](_0x197002 - (0xb29 * -0x1 + 0x3 * 0x773 + -0xb2d) + _0x2a605b - Render['TextSize']('[--]', _0x1a194b)[0x2 * 0xeb3 + -0x10 * -0x18e + -0x3646], _0x37631a + (-0x119f * 0x1 + 0x9fc + 0x7bc) + (-0xf5e + -0x119f + 0x210f) * i, -0xd * 0x24d + 0x36 * -0x90 + 0xfd * 0x3d, '[--]', [-0x2015 + 0x2396 + -0x381, -0xe9 + 0x8 * -0x49d + 0x25d1, 0x1 * -0x18df + -0xbdd + -0x1 * -0x24bc, menualpha * (0x6 * -0x584 + -0x3d5 * 0x6 + 0x3915) / (-0x5 * -0x4eb + -0x2002 + 1900.3)], _0x1a194b), Render['String'](_0x197002 - (-0x9c3 + 0x1 * 0xbd5 + -0x210) + _0x2a605b - Render['TextSize']('[--]', _0x1a194b)[0x92a + 0xe9b * 0x2 + -0x133 * 0x20], _0x37631a + (-0x1963 + -0x108a + 0x2a06) + (0x1b5c + -0x1288 + -0x76 * 0x13) * i, 0x1a43 + 0x1 * -0x563 + 0xa7 * -0x20, '[--]', [0x38 * 0x89 + -0xe47 + -0x63 * 0x26, -0x1108 + -0xf * 0x243 + -0x5f * -0x8c, -0x2 + -0xc99 + -0x1 * -0xd9a, menualpha * (0x1700 + 0x1b45 + -0x3146)], _0x1a194b);
            }
        }
    }
    if (Global['IsKeyPressed'](0x1913 * 0x1 + -0x2328 + -0x2 * -0x50b) && UI['IsMenuOpen']()) {
        const _0x24c099 = Global['GetCursorPosition']();
        in_bounds(_0x24c099, _0x197002, _0x37631a, _0x197002 + _0x2a605b, _0x37631a + (0x2465 + -0xeca + 0x1 * -0x157d)) && (UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_x'], _0x24c099[0x2 * -0x1057 + -0x1 * 0x22a3 + 0x13 * 0x38b] - _0x2a605b / (-0x718 * -0x2 + 0x156e + -0x239c)), UI['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Hotkeys_y'], _0x24c099[-0x16c5 + 0x204 + 0x2 * 0xa61] - (-0x151 * 0x1d + -0x1 * 0x2647 + 0x13c * 0x3e)));
    }
}
Global['RegisterCallback']('Draw', 'main_hotkeys');
const x = Render['GetScreenSize']()[0x1a9d + -0x1 * -0x3da + -0x2c5 * 0xb] / (-0x1550 + -0x1 * -0x239e + -0xddb),
    y = Render['GetScreenSize']()[0x3b0 + 0x202f + -0x23de] / (0xf2b + 0x1 * 0xe6b + -7572.87);
Render['GradientSkeet'] = function(_0x322621, _0x4a4a2c, _0x1e0869, _0x4f2529, _0x23b2c3, _0x234923, _0x5bec09) {
    Render['GradientRect'](_0x322621, _0x4a4a2c - (-0x1f91 * -0x1 + -0x10f * 0x17 + -0x734 * 0x1), _0x1e0869 / (0x1 * 0x8bf + -0x1212 + 0x957), _0x4f2529, _0x23b2c3, _0x5bec09, _0x234923), Render['GradientRect'](_0x322621 + _0x1e0869 / (0x2f * -0x2b + 0x1 * 0x6bb + 0x12e), _0x4a4a2c - (0x135a * 0x2 + -0x1 * -0x11ec + -0x389c * 0x1), _0x1e0869 / (-0x11 * -0x22d + 0x3 * -0x55 + 0x2 * -0x11fd), _0x4f2529, _0x23b2c3, _0x234923, _0x5bec09);
}, Render['Arc'] = function(_0x1c9cc3, _0x2ef88b, _0x46b242, _0xcfcc0b, _0x1ab93d, _0x3b1872, _0x151416) {
    for (var _0x249a11 = _0x1ab93d; _0x249a11 < _0x1ab93d + _0x3b1872; _0x249a11++) {
        const _0x12a03d = _0x249a11 * Math['PI'] / (0x3 * 0xa5b + 0xf4b + -0xf38 * 0x3);
        Render['Line'](_0x1c9cc3 + Math['cos'](_0x12a03d) * _0x46b242, _0x2ef88b + Math['sin'](_0x12a03d) * _0x46b242, _0x1c9cc3 + Math['cos'](_0x12a03d) * _0xcfcc0b, _0x2ef88b + Math['sin'](_0x12a03d) * _0xcfcc0b, _0x151416);
    }
};
const get_distance = function(_0x1ead90, _0x10e6ca) {
        var _0x3363d8 = _0x1ead90[-0x1ae9 * 0x1 + 0x1 * 0x4a8 + 0x1641],
            _0x466bfc = _0x1ead90[-0x625 + 0x1c55 * -0x1 + 0x227b],
            _0x1fdc40 = _0x1ead90[-0x234e + 0x20c5 * -0x1 + -0x1d * -0x259],
            _0x48c169 = _0x10e6ca[-0xa9f * -0x2 + 0x1c9 * 0xf + -0x13 * 0x287],
            _0x14ce5a = _0x10e6ca[0x1576 + 0x18de + -0x2e53],
            _0x5b2726 = _0x10e6ca[-0xf22 + -0x2 * -0x57d + 0xd * 0x52],
            _0x3d6ef8 = _0x3363d8 - _0x48c169,
            _0x40ae72 = _0x466bfc - _0x14ce5a,
            _0x10a534 = _0x1fdc40 - _0x5b2726;
        return Math['sqrt'](_0x3d6ef8 * _0x3d6ef8 + _0x40ae72 * _0x40ae72 + _0x10a534 * _0x10a534);
    },
    get_bombsite = function(_0x4421fe) {
        return Entity['GetProp'](_0x4421fe, 'CPlantedC4', 'm_nBombSite') ? 'B - ' : 'A - ';
    },
    get_velocity = function(_0x176fe8) {
        const _0x388a13 = Entity['GetProp'](_0x176fe8, 'CBasePlayer', 'm_vecVelocity[0]');
        return Math['sqrt'](_0x388a13[-0xbd0 + -0x2 * 0x117 + -0x18e * -0x9] * _0x388a13[-0x207f + -0xfd4 + -0x1 * -0x3053] + _0x388a13[0x4b7 * -0x4 + 0x12d7 + 0x6] * _0x388a13[0x2 * 0xefd + 0x1 * 0x24f2 + -0x1 * 0x42eb]);
    };
var planting = ![],
    fill = -0x1c47 + 0x13 * 0x87 + 0x6 * 0x30b,
    isbomb = -0x6 * -0x3a4 + -0x1 * -0x227f + 0x3857 * -0x1,
    bombsiteonplant = '',
    on_plant_time;
const on_paint1 = function() {
        if (!UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Skeet-styled indicators'])) return;
        const _0x3c63d4 = Math['round'](get_velocity(Entity['GetLocalPlayer']()))['toString'](),
            _0x246825 = Render['AddFont']('calibrib.ttf', -0x1 * 0x2236 + 0x67 * -0x47 + 0x6f * 0x91, 0x9be * -0x4 + 0x1 * 0x1aaa + 0xcb2);
        var _0x31ffc1, _0x5425d0, _0x537a2c, _0x175af3, _0xfbc920, _0x4fb79b = [];
        if (UI['GetValue'](['Config', 'Scripts', 'JS Keybinds', 'Damage Override'])) _0x5425d0 = 0x1018 + -0xcf * -0x3 + -0x2 * 0x931;
        else _0x5425d0 = 0x1498 + 0x16b3 + 0x1 * -0x2b4b;
        if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap'])) _0x537a2c = -0x1 * -0xa9 + -0x8db + 0x855;
        else _0x537a2c = 0xc40 + -0x1327 + 0x6e7;
        if (_0x3c63d4 > -0x19f9 * 0x1 + -0xa37 + 0x252f && Entity['IsAlive'](Entity['GetLocalPlayer']())) _0xfbc920 = 0xe5 * -0xe + -0xb4 * -0xf + 0x21d;
        else _0xfbc920 = 0x10 * -0x5c + -0x1ec8 + 0x1c * 0x14e;
        if (UI['GetValue'](['Rage', 'General', 'General', 'Key assignment', 'Force safe point'])) _0x31ffc1 = 0x1 * 0x257a + 0x28f * -0x2 + -0x1 * 0x2039;
        else _0x31ffc1 = 0x1 * -0xabb + -0x1940 + -0x3d * -0x97;
        if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots'])) _0x175af3 = -0x17bd * -0x1 + -0xa3a + -0x8 * 0x1ac;
        else _0x175af3 = -0xc50 + 0x13e * -0x19 + -0x319 * -0xe;
        if (Entity['IsAlive'](Entity['GetLocalPlayer']())) {
            if ('wMcAW' !== 'wMcAW') {
                function _0x2e0e2d() {
                    if (_0x45a7c8['IsMenuOpen']() == ![]) return;
                    _0x23bdb5['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_x'], _0xed1dbc[-0xa9 * -0x13 + -0x1e0b * -0x1 + 0x2e * -0xed] - (-0x1 * 0x249e + 0xd1a + 0x17e9)), _0x21b488['SetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'keybinds_y'], _0x31a11e[-0x165 + -0x1 * -0x1ba3 + 0x8bf * -0x3] + (0x10d6 + 0x1 * 0xceb + -0x1da3));
                }
            } else {
                if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap'])) {
                    Render['String'](x, y + (-0x2b * -0x36 + 0x5 * -0x5ea + 0x1481) - (-0x2d1 + -0x1 * 0x611 + 0xa40) + (-0x20b9 * 0x1 + 0xcf1 * 0x3 + -0x4 * 0x175) - _0x31ffc1 - _0xfbc920 - isbomb, -0x1 * 0x13d9 + 0x662 + -0xd77 * -0x1, 'DT', [-0x455 * 0x3 + 0xa95 * 0x1 + 0x7f * 0x5, -0x78 + -0xc8f + 0xd18 * 0x1, 0x1 * 0x1c6e + 0x2c6 + -0x1f23, 0x1333 + 0x9c8 + -0x1bfc], _0x246825);
                    if (Exploit['GetCharge']()['toFixed'](-0xa4f + -0x1dc0 + 0x8 * 0x502) >= 0x3a0 + -0x103f + 0x65 * 0x20) Render['String'](x, y - (-0x856 * 0x3 + 0x1300 + 0x2 * 0x3b0) + (0xbee + 0x989 * 0x4 + 0x2 * -0x18e6) - _0x31ffc1 - _0xfbc920 - isbomb, 0x7 * 0x17d + 0x182e + -0x2299, 'DT', [-0x82c + -0x7a9 + -0x6 * -0x2ce, 0x353 + 0x2085 + 0x32b * -0xb, -0x1 * 0xe18 + -0x3ce * -0x2 + 0x1 * 0x77b, 0xd * 0x17d + 0x137b * -0x1 + 0x121], _0x246825);
                    else Render['String'](x, y - (0x73a * -0x5 + 0x6 * 0x28 + 0x2490) + (0x149d * 0x1 + -0x1 * 0x1ec7 + -0x14e * -0x8) - _0x31ffc1 - _0xfbc920 - isbomb, 0x1 * -0x1229 + 0x185 * -0x17 + 0x351c, 'DT', [0x28f * -0x4 + -0x2ca * 0x2 + 0x10cf, 0x17af * -0x1 + -0x11c9 + -0x2979 * -0x1, 0x1476 + -0x3 * -0x31a + -0x1dc3, 0x17ce + 0x98 * 0x1 + 0x1 * -0x1767], _0x246825);
                }
                UI['GetValue'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'Fake duck']) && (Render['String'](x, y + (-0x147a + 0x1ef * 0x1 + 0x946 * 0x2) - (-0x22fa + -0x4a * 0x7f + 0x2487 * 0x2) + (-0x1 * -0x2246 + -0x2 * 0xf53 + -0x35a) - _0x31ffc1 - _0x537a2c - _0xfbc920 - isbomb, -0x176d + 0x1 * 0x8b + 0x65 * 0x3a, 'DUCK', [-0x1505 + -0x268d + 0x3ba3, -0xb55 + 0x3d0 + 0x3cb * 0x2, 0x1091 + 0x6 * 0x218 + -0x1d10, 0x24f * -0x1 + 0x1 * -0x1d6d + -0xab * -0x31], _0x246825), Render['String'](x, y - (0x2 * -0x103c + -0x172c + -0x2 * -0x1c81) + (0xcee * -0x3 + -0x208f + -0xe53 * -0x5) - _0x31ffc1 - _0x537a2c - _0xfbc920 - isbomb, -0x97f + -0x83 * -0x12 + 0x49, 'DUCK', [0xefc + -0x259 * -0x9 + -0x231e, -0xa59 + -0x3 * 0x4eb + -0x189 * -0x11, -0x753 + -0x2 * -0x71 + 0x770, -0x2 * 0x3a + -0x7f * -0x42 + -0x1f4b], _0x246825));
                UI['GetValue'](['Rage', 'General', 'General', 'Key assignment', 'Force safe point']) && (Render['String'](x, y + (-0x638 * -0x4 + -0x5f * 0x43 + -0x2) - (0x17db + 0x5fe + -0x13d * 0x17) + (-0x23a + 0x1224 + -0xfa4) - _0xfbc920, 0x26ad * -0x1 + -0x1192 + 0x79 * 0x77, 'SAFE', [-0x208d + -0xb6b + 0x2c09, -0xee * 0x18 + 0x7fa + 0xe67, 0x13c7 + 0x1e5 * 0x11 + -0x33eb, 0x1 * -0x1920 + -0x2 * 0x1231 + -0x3e81 * -0x1], _0x246825), Render['String'](x, y - (-0x1 * 0x2443 + -0x1468 + -0x1 * -0x3a09) + (0xd7 * 0xf + 0x9a9 * -0x1 + -0x2aa) - _0xfbc920, 0x21fe + -0xb2 * -0x9 + -0x2840, 'SAFE', [-0x32 * 0x7d + 0xb34 + 0xdba, -0xf + -0x1d47 + 0x1e19, 0x43 * -0x9 + 0x1f05 + 0x2 * -0xe4d, 0x3a * 0x2e + -0x59 * -0x2b + -0x1860], _0x246825));
                if (_0x3c63d4 > 0x96b + -0x5a0 * -0x4 + -0x1ec4) {
                    if (UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Double tap']) || UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots'])) {
                        if ('rliro' === 'GMhuD') {
                            function _0x3863e9() {
                                _0x53644d['shift'](), _0x161f63['shift'](), _0x4d71eb['shift']();
                            }
                        } else _0x4fb79b[0x54b * 0x7 + 0x17 * -0x14b + -0x750] = 0x252b + 0x1065 * 0x1 + 0x3491 * -0x1, _0x4fb79b[-0x1735 + 0x205c + 0x926 * -0x1] = 0x2 * 0x93f + -0x22 * 0x11 + 0x103c * -0x1, _0x4fb79b[0x1f0 + 0xddd + -0xfcb] = 0xdb * 0x1 + 0x2de + 0x3b9 * -0x1;
                    } else _0x4fb79b[0x7e6 + -0x1f04 + 0x171e] = -0x1acf + -0x14c3 + 0x3016, _0x4fb79b[0x1e80 + 0x152 + -0x5 * 0x65d] = 0xd * 0x4e + -0x3dd * -0x3 + -0xeca, _0x4fb79b[-0xff + -0x1 * 0x109d + 0x16 * 0xcd] = 0xcb1 + -0x5c * -0x3 + -0x79 * 0x1d;
                } else _0x4fb79b[-0x1 * -0x886 + 0x1c6c + -0x24f2 * 0x1] = 0x1b3a + -0x27c + -0x17bf * 0x1, _0x4fb79b[-0xc5c + -0x1043 + -0x728 * -0x4] = 0x1 * 0x432 + 0x3df * 0x7 + -0x1f4b, _0x4fb79b[-0x1df6 + 0x1db7 + 0x5 * 0xd] = 0x22d3 + 0x2 * -0x656 + -0x1627;
                _0x3c63d4 > 0xe6f + 0x1 * 0x1ddd + -0x2b4d * 0x1 && (Render['String'](x, y + (-0x1896 + 0x1 * -0x1b7 + 0x1a4e) - (-0xca8 + -0x7a4 + 0x15aa) + (-0xc09 + 0x1 * 0xd16 + 0xc7 * -0x1), 0x34 * -0xd + -0x143b + 0x16df, 'LC', [-0x12d5 * 0x2 + -0x202e + 0x45e9, -0xc * -0xdf + 0x1140 + -0x19 * 0x11b, -0x2161 + 0x1 * -0xba5 + 0x2d17, 0xd * -0x24 + -0x497 + 0x1 * 0x76a], _0x246825), Render['String'](x, y - (-0x119 * 0xb + -0x18a8 + 0x2619) + (0x1db + -0x23eb + 0x2256), 0x31f + -0x1c41 * 0x1 + 0x1922, 'LC', [_0x4fb79b[-0x1e18 + 0x1 * 0xd8f + 0x1089], _0x4fb79b[-0x76d + 0x88f * -0x3 + 0x71 * 0x4b], _0x4fb79b[0x9d * 0x17 + 0x22c8 + 0x3 * -0x104b], -0xa29 + -0x1baf + 0x26d7], _0x246825)), UI['GetValue'](['Config', 'Scripts', 'JS Keybinds', 'Damage Override']) && (Render['String'](x, y + (-0x1cf2 + 0x265a + -0x967) - (0x112 * 0x5 + 0x8 * -0x3c1 + 0x1a0c) + (0x250 * 0x9 + 0x1 * 0x1114 + -0x257b) + _0x175af3, -0x1ecd + -0x2498 + -0x77d * -0x9, 'DMG', [-0xa0 + 0x24bc + -0x240b, -0xa43 + 0xfc0 + -0x56c * 0x1, -0x1ae4 + 0x1ff + 0x429 * 0x6, 0x29 * -0xe9 + 0x1e * -0x19 + -0x1 * -0x293e], _0x246825), Render['String'](x, y - (-0x1950 + 0xf1 * -0x29 + 0x4147) + (0x544 * 0x6 + 0x221 * -0x11 + 0x502) + _0x175af3, -0x16f * -0x10 + -0x1 * 0x1c6a + 0x57a, 'DMG', [0xc * -0x77 + 0x1725 + -0x110d, -0x2cb + -0xf6d + -0x1 * -0x12fb, 0x435 * 0x1 + 0x12bc + -0x16e1, -0x9a7 + -0x6 * 0x4e3 + 0x27f8], _0x246825)), UI['GetValue'](['Rage', 'Exploits', 'Keys', 'Key assignment', 'Hide shots']) && (Render['String'](x, y + (-0x4f * 0x9 + 0xd9 * -0x2c + 0x2814) - (-0x1 * -0xa6d + 0x36 * -0x95 + -0x165f * -0x1) + (0x43c + -0x72d + -0x35a * -0x1), 0x17e * 0x7 + 0x10e * -0x15 + 0xbb4, 'ONSHOT', [0x416 + 0x137d * 0x1 + -0x162 * 0x11, -0x1b55 * -0x1 + -0x49 * -0xd + -0x1ef9, -0xb * 0x6b + 0x2089 + -0x1bdf, -0x19f4 + 0x11 * 0x15a + 0x3f9], _0x246825), Render['String'](x, y - (-0x196a + -0x2 * 0x4c7 + 0x2456 * 0x1) + (0x70f + -0x1a6d + 0x13c7), 0x1b0a + 0x327 + -0x1e31 * 0x1, 'ONSHOT', [-0x1423 + 0xe0b + -0x3 * -0x234, -0x697 + 0x247f + -0x1d25, 0x62f * 0x1 + -0x1204 + 0x3f7 * 0x3, -0x6e0 + 0x157f + -0xda0], _0x246825)), UI['GetValue'](['Misc.', 'Helpers', 'General', 'Extended backtracking']) && (Render['String'](x, y + (0x2 * 0x427 + -0x1faf + -0x29 * -0x92) - (0x5 * -0x48a + 0x2559 * -0x1 + 0x3d69) + (0x2 * -0xe7b + -0x1 * 0xe57 + 0x2bb6) + _0x175af3 + _0x5425d0 + (0xd85 + -0x22c2 + -0x1 * -0x153d), 0x1 * 0x1e07 + -0x1b71 + -0x14b * 0x2, 'PING', [0xa1 * -0x2c + 0x242 * -0x1 + 0x1dff, -0xed7 + -0x24f2 + 0x33da, -0x165d + 0x356 + 0x1318, 0xb56 * -0x1 + 0xf9a + -0x345], _0x246825), Render['String'](x, y - (-0x1908 + -0x34f + -0x1fb * -0xf) + (0x1 * -0x1009 + -0x842 * -0x1 + 0x2 * 0x418) + _0x175af3 + _0x5425d0 + (0x1 * -0x1583 + -0x1 * 0xb57 + -0x20da * -0x1), 0x3 * 0x7c3 + -0x1830 + 0x7 * 0x21, 'PING', [-0x1fba * -0x1 + 0x283 + -0xe6 * 0x25 - Entity['GetProp'](Entity['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (0x1 * 0x1297 + 0x6da + -0x6 * 0x41e) * (0x760 + -0xb87 + 0x463) * (-0x737 * -0x1 + -0xbc + -1656.70175438596), Entity['GetProp'](Entity['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (-0x1 * -0x11de + -0x2a4 * 0xa + 0x947) * (-0x1ef3 + 0x1e09 + 0x126) * (-0x4 * 0x2f1 + 0x1465 + -2205.57894736842), Entity['GetProp'](Entity['GetLocalPlayer'](), 'CPlayerResource', 'm_iPing') / (0x962 + 0x1ad3 + 0xa * -0x38c) * (-0x5 * 0x589 + 0x4e3 + 0x1706) * (0x9 * -0x67 + 0x1927 + -5511.77192982457), -0x2a6 + -0x2b * -0xde + -0x1b * 0x13f], _0x246825));
            }
        };
        fill = -0x15d0 + -0x1 * 0x148b + 10846.3 - (-0x1e4f + 0x1 * -0x1751 + 13731.3 + on_plant_time - Globals['Curtime']());
        if (fill > -0x1 * 0x9d5 + -0x2536 + 12046.3) fill = -0xe1f + 0xedf + -188.7;
        planting && (Render['String'](x, y + (-0x2 * -0x887 + 0x20bc + -0x31c9) - (-0x23ce + -0x1c61 + 0x1 * 0x418d) + (0x237 + -0x134 * 0xb + 0xb4b) - _0x31ffc1 - _0xfbc920, -0x123f * 0x1 + -0x1429 + -0x99a * -0x4, bombsiteonplant, [0x2 * 0xbc3 + 0x1 * 0x213f + 0x38c5 * -0x1, 0x1bd4 + -0x84a * -0x4 + -0xc * 0x515, 0x68c + 0x10ce + -0x175a, 0x1a54 * -0x1 + -0x1197 + 0x2cea], _0x246825), Render['String'](x, y - (-0x372 + 0x1cdd + 0x180d * -0x1) + (0x14 * -0x1e8 + -0x117c + -0x26e * -0x17) - _0x31ffc1 - _0xfbc920, -0x2218 + 0x2 * -0x1202 + 0x461c, bombsiteonplant, [-0x9 * 0x26b + -0xc * -0x10a + -0x1 * -0xa1d, 0x1ac7 + -0x15d6 + -0x1 * 0x419, -0x1992 * 0x1 + -0x3 * -0x8e9 + 0x1 * -0xb9, -0x28d + -0x1 * -0x2565 + -0x21d9], _0x246825), Render['Arc'](x + (-0xdf4 + 0x407 + -0xc * -0xdf), y - (0x1 * 0x13e1 + 0x167f + -0x28fd) + (-0x233e * -0x1 + -0x3b3 * 0x7 + -0x904) - _0x31ffc1 - _0xfbc920, 0x6ad * 0x2 + 0x1 * -0x1e47 + -0x21f * -0x8, -0x1ec * -0xf + -0x271 * -0xd + 0xf6 * -0x3f, 0x2 * 0x485 + -0x2525 + 0x1c1b, 0x1d * 0x10f + 0xd * 0x85 + 0xc * -0x301, [0x2b * -0xcf + 0x5 * 0x737 + -0x13d, -0x21a1 + -0x2269 + -0x13d * -0x37, 0x26bf + -0x1c61 + -0xa4d, 0x351 + 0x1f8f + -0x21e1]), Render['Arc'](x + (-0x1bd4 + -0x234e * -0x1 + -0x6f3 * 0x1), y - (-0x1 * -0x327 + 0x1f26 + -0x20ea) + (0x161 * -0x4 + 0x20e * -0xc + -0x1 * -0x1e81) - _0x31ffc1 - _0xfbc920, 0x3 * -0x9f4 + -0x19f * -0x7 + -0x1 * -0x128d, -0x3 * 0x89b + -0x5 * -0x20b + 0x7d1 * 0x2, -0x5 * 0x553 + 0x2 * 0x85 + 0x1995, fill / (-0x14b6 + -0x107f + 9528.3) * (0x107f + -0x1f01 + -0x2a * -0x61), [0x1e9 * -0x1 + -0x1472 + 0x175a, -0xf12 + 0x81e + -0x1 * -0x7f3, 0x1 * -0x96b + 0x94b + -0x29 * -0x7, -0x7d9 + 0x2e9 + 0xd9 * 0x7]));
        const _0x1fc2d0 = Entity['GetEntitiesByClassID'](-0x1 * 0x1aff + 0xbf6 + -0x29 * -0x61)[-0x15 * -0x5e + 0xee * -0xd + 0x20 * 0x23];
        if (_0x1fc2d0 == undefined) return;
        const _0x2aeabb = Entity['GetRenderOrigin'](Entity['GetLocalPlayer']()),
            _0xfdb5a0 = Entity['GetProp'](Entity['GetLocalPlayer'](), 'CCSPlayerResource', 'm_iArmor'),
            _0x34d2ca = Entity['GetProp'](Entity['GetLocalPlayer'](), 'CBasePlayer', 'm_iHealth'),
            _0x162f67 = Entity['GetRenderOrigin'](_0x1fc2d0),
            _0x5a6bea = get_distance(_0x162f67, _0x2aeabb),
            _0x2c7604 = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_bBombTicking'),
            _0x4017a1 = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_flC4Blow') - Globals['Curtime'](),
            _0x31c6e6 = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_flDefuseLength'),
            _0x455448 = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_flDefuseCountDown') - Globals['Curtime'](),
            _0x42176b = (Render['GetScreenSize']()[0x1773 + -0x644 + -0x112e] - (-0x5 * -0x6b1 + 0x1 * -0x189d + -0x8a6)) / _0x31c6e6 * _0x455448,
            _0x501cdb = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_hBombDefuser'),
            _0x1b17c6 = Entity['GetProp'](_0x1fc2d0, 'CPlantedC4', 'm_bBombDefused'),
            _0x166b1e = -0x1c79 + -0x1 * 0x2259 + 16532.7,
            _0x4eb0e0 = -0xcb1 + 0x889 + 1139.68,
            _0x20a66f = -0x6b * -0xb + 0x2e * -0xca + 8904.2,
            _0x130fe7 = (_0x5a6bea - _0x4eb0e0) / _0x20a66f,
            _0x43668f = _0x166b1e * Math['exp'](-_0x130fe7 * _0x130fe7);
        var _0x339594 = ![];
        if (_0xfdb5a0 > -0x15a6 + 0x118 + -0xa47 * -0x2) {
            if ('fieLi' !== 'fieLi') {
                function _0xf54034() {
                    _0x8ac242[0x163e + 0x2 * 0xa57 + -0x43 * 0xa4] -= _0x311058['Frametime']() * (-0x2cc + 0x1 * -0x1e1b + 0x233f), _0x1e0400[0x10 * 0x155 + -0x355 * 0x1 + -0x11fb] < 0x17e + -0x3b * -0x13 + -0x5df && (_0x454fa3['shift'](), _0x21abbc['shift'](), _0x228e84['shift']());
                }
            } else {
                var _0x500e74 = _0x43668f * (-0x1ce4 + 0xb83 * 0x1 + 4449.5),
                    _0x1f59ca = (_0x43668f - _0x500e74) * (0x217 * 0x5 + -0x5 * -0x633 + -10609.5);
                _0x1f59ca > _0xfdb5a0 && (_0xfdb5a0 = _0xfdb5a0 * ((-0x200 * -0x1 + -0xbc * -0x22 + 0x3b * -0x75) / (-0x99f + 0xf2e * -0x2 + 10235.5)), _0x500e74 = _0x43668f - _0x1f59ca), _0x43668f = _0x500e74;
            }
        }
        const _0x1535ee = Math['ceil'](_0x43668f);
        if (_0x1535ee >= _0x34d2ca) _0x339594 = !![];
        else _0x339594 = ![];
        _0x4017a1 = parseFloat(_0x4017a1['toPrecision'](-0x2 * -0xec3 + -0xeaf + -0x1a * 0x92));
        if (!_0x2c7604 || _0x1b17c6) return;
        if (_0x4017a1 >= -0x2 * -0xd6d + 0x16c0 + 0x3199 * -0x1) {
            if ('olFCa' === 'olFCa') Render['String'](x, y - (-0x4bd * 0x5 + 0x111c + 0x7f3) + (0x12fa * 0x2 + 0x74 + 0x1311 * -0x2) + (0x1 * 0x1e1b + -0x7 * -0x467 + -0x3ceb * 0x1) - _0x31ffc1 - _0xfbc920, -0x1 * -0x1997 + 0xb46 + -0x24dd, get_bombsite(_0x1fc2d0) + _0x4017a1['toFixed'](0x17b7 + 0x1 * 0x1ab7 + 0x10cf * -0x3) + 's', [-0x1 * 0x1d4b + 0x11bd * 0x1 + 0x1 * 0xb8e, 0x17 * -0x131 + 0x2f * -0xb2 + 0x3c15, -0x435 * -0x6 + -0x1 * -0x6d + -0x19ab, -0x677 * -0x3 + 0xef9 + -0x215f], _0x246825), Render['String'](x, y - (0x1 * -0x729 + 0x1 * 0x1d3f + -0x6e8 * 0x3) + (-0x956 + 0x4 * -0x283 + 0x13a8) - _0x31ffc1 - _0xfbc920, -0x1940 + -0x38 * 0x38 + -0xc * -0x320, get_bombsite(_0x1fc2d0) + _0x4017a1['toFixed'](0x1e95 + 0x1 * 0x322 + -0xa * 0x35f) + 's', [-0x1 * 0x133e + 0x81a + 0xc23, -0x2 * 0x157 + -0x1f39 + 0x22e6, -0x4 * -0x21e + 0x2133 + -0x28ac, 0x15a7 * 0x1 + -0x423 * -0x1 + -0x18cb], _0x246825);
            else {
                function _0x2c340b() {
                    var _0x169b5c = {};
                    _0x169b5c['path'] = _0x11aed3;
                    const _0x132d62 = _0x169b5c;
                    return _0x132d62;
                }
            }
        }
        _0x501cdb > 0x45d + 0x1d75 + -0x21d2 && (_0x4017a1 > _0x31c6e6 && _0x4017a1 >= 0x12e8 + 0x1623 + -10506.9 ? (Render['FilledRect'](-0x86 * -0x3 + 0x3a * -0x43 + 0xd9c, 0x14 * -0x1b6 + 0x1 * -0xf7b + 0x1091 * 0x3, -0x1489 + 0x3 * -0x9a7 + -0x8 * -0x631, 0x2d4 + -0x1acb * -0x1 + -0x7 * 0x3a1, [-0x1c1 * -0x2 + 0x4 * 0x31c + -0xfd9 * 0x1, 0x78b * -0x4 + 0x1 * 0x37 + 0x1e0e, -0x1544 + 0x1 * 0x8df + 0xc7e, 0x908 + -0x1dd3 + 0x1543 * 0x1]), Render['FilledRect'](-0x108c + -0x1 * -0xe97 + 0x1 * 0x1f5, -0x1 * -0x1bea + -0x26 * 0x106 + 0xf32 - _0x42176b, -0x265b + 0x6 * -0x5ba + 0x48c1, -0x2 * -0x471 + -0x185c + 0x13b2, [-0x6e + 0x5f3 + -0x54b, -0x1 * -0x45 + 0xd * -0x1c1 + 0x1747, 0x255c + -0x1 * 0x1c8b + 0x1 * -0x89b, 0x1c54 * 0x1 + -0xc43 + -0xf99]), Render['Rect'](-0x1fa4 + 0x20d4 + -0x130, -0x1a00 + 0x1b1 + 0x184f * 0x1, -0x1 * -0xadd + 0x3c9 * -0x5 + 0x81a, 0x1 * 0x16d3 + 0x3dc + -0x1677, [-0x1024 * -0x1 + -0x1a48 + 0x1 * 0xa3d, -0x1 * -0x1b37 + 0x2 * -0xad5 + -0x574, -0x41b * -0x6 + 0x1 * -0x6d0 + -0x15d * 0xd, -0x21dd + -0x1952 * -0x1 + -0x903 * -0x1])) : (Render['FilledRect'](0x480 * 0x6 + -0x93 + -0x1a6d, 0xf01 + -0x118f + 0x28e, -0x2225 + 0x200 + 0x6b * 0x4d, -0x2 * -0x1200 + 0x1270 + -0x3238, [-0xc61 * -0x3 + 0x122 * 0x14 + -0x3bb2, 0x12ea + -0x20f6 * 0x1 + 0xe25, 0x20e3 * -0x1 + 0xa25 + 0x16d7, -0xe01 + 0x29 * 0xe + 0xc3b]), Render['FilledRect'](0x1263 + -0xb94 + -0x6cf, -0x3 * -0x66 + 0x2395 * 0x1 + -0x208f - _0x42176b, 0x1 * 0xc13 + -0x55e * -0x7 + 0x583 * -0x9, -0x15ed + 0x9 * -0x27 + 0x1 * 0x1b84, [-0x4e * -0x75 + -0x1582 * 0x1 + 0x2 * -0x694, -0x93 + 0x660 + -0x5bb, 0x34c * 0x1 + 0x1196 + -0x14cf * 0x1, 0xcf7 + -0x1c6d + -0x2 * -0x7f7]), Render['Rect'](0xe6 * 0x8 + -0x475 + -0x2bb, 0x9 * -0x329 + 0x1 * 0x1879 + 0x3f8, 0x2ac + 0xf5c + -0x2 * 0x8ff, 0x34e * 0x6 + -0x25db + 0x163f, [0x68c + -0x1 * 0xc3f + 0x5cc, -0x1 * 0xb26 + -0x2377 + 0x2eb6, -0x191e + 0xb * -0x59 + 0x1d0a, -0x38 * -0x78 + -0xd * 0x16a + -0x766]))), Entity['IsAlive'](Entity['GetLocalPlayer']()) && (_0x339594 ? (Render['String'](x, y - (0x2405 + -0xe98 * 0x2 + 0x2 * -0x2cd) + (0xc0e * 0x2 + -0x1 * 0x9d9 + -0xe42) - _0x31ffc1 - _0xfbc920, 0x3 * 0x581 + 0x1c36 * -0x1 + -0x1 * -0xbb3, 'FATAL', [0x2f2 * 0xd + -0xf66 + -0x16e4, 0x1319 + 0xb7d * -0x3 + -0x1 * -0xf5e, -0x4a * -0x5c + -0x3fc + -0x169c, 0x1476 + -0x1a62 + 0x6eb], _0x246825), Render['String'](x, y - (0x10d2 + -0x1b3c + 0xba5) - _0x31ffc1 - _0xfbc920, 0x5b3 * -0x2 + 0x287 * -0x2 + 0x4e * 0x36, 'FATAL', [-0x48a * 0x4 + 0x10ce + 0x259 * 0x1, 0x1bf * -0xb + 0x2003 + -0xccd, 0xf69 + 0x514 + -0x147c, 0x1 * 0xb26 + 0x1f83 + -0x29aa], _0x246825)) : _0x43668f > -0xc5a + -0x12fd * -0x1 + -1698.5 ? (Render['String'](x, y - (0xf15 + -0x1098 + 0x1a * 0x1b) + (-0x255c + 0x92 * -0x2f + 0x402b) - _0x31ffc1 - _0xfbc920, 0x7ee + 0x21f4 + -0x3 * 0xdf6, '-' + _0x1535ee + (' HP'), [-0x12b9 + 0x1a16 + 0x41 * -0x1d, -0x1efc + -0x11d + -0x391 * -0x9, 0x138b * -0x1 + 0xcbc + 0x6cf * 0x1, 0x1aef + -0xd61 + -0xc8f], _0x246825), Render['String'](x, y - (-0x138 + 0x143 + 0x130) - _0x31ffc1 - _0xfbc920, 0x1ddb + -0x1dd7 + -0x4, '-' + _0x1535ee + (' HP'), [0x296 + -0x17 * 0x1b1 + 0x3 * 0xc61, 0x19 * 0xfb + 0x1826 + 0x2fd1 * -0x1, -0x235f + -0x1 * 0xa8a + -0x69f * -0x7, -0xcef + -0x1f23 + 0x2d11], _0x246825)) : (Render['String'](x, y - (0x139 + 0x13 * -0x125 + 0x15c1) + (-0xa59 + -0x13a1 + 0x5ff * 0x5) - _0x31ffc1 - _0xfbc920, 0xf7f * -0x1 + -0x2cb * 0x2 + 0x1515, 'SAFE', [0x2 * 0x2c0 + 0xc9 * -0xa + -0x7 * -0x56, -0xd9d + -0x3 * 0x4c + -0x1 * -0xe81, 0x1 * 0x21c + -0x1c10 + 0x1 * 0x19f4, -0x2 * -0x9a9 + -0x23cf + 0x117c], _0x246825), Render['String'](x, y - (0x61 * -0x67 + -0x13df * -0x1 + 0x1463) - _0x31ffc1 - _0xfbc920, -0x766 * -0x1 + -0xacf + 0x9 * 0x61, 'SAFE', [0x2012 + -0x490 * 0x7 + 0x62, -0xd8d + 0x1a9a + -0xc4a, 0x8c6 + -0x9 * 0x125 + 0x197, 0x5 * -0x76f + 0xf0f + 0x1c7 * 0xd], _0x246825)));
    },
    on_player_connect = function() {
        on_plant_time = 0x24c6 + 0x1d7 * 0x1 + -0x269d, fill = 0x1d * 0x37 + -0x2 * 0x1035 + -0x1a2f * -0x1, planting = ![];
        const _0x425e23 = Entity['GetEntitiesByClassID'](0x1 * 0xbc0 + -0x27 * 0x2 + -0xaf2)[-0x1a5 + 0x13e2 + -0x7 * 0x29b];
        if (_0x425e23 == undefined) return;
        const _0x1175ab = Entity['GetProp'](_0x425e23, 'CPlantedC4', 'm_bBombTicking');
        if (_0x1175ab) isbomb = -0x1323 + 0xf4a + 0x41f;
        else isbomb = 0x19 * -0x3d + -0x4 * -0x787 + -0x1827;
    },
    on_bomb_exploded = function() {
        isbomb = -0xb3 * -0xb + 0x1 * -0x20d2 + -0x397 * -0x7, on_plant_time = -0x101b + -0xd4 * 0x22 + 0x2c43, fill = 0x45 * -0x88 + 0xf * -0x43 + 0x2895, planting = ![];
    },
    on_bomb_abortplant = function() {
        isbomb = 0xa9d + -0x219b + 0x7aa * 0x3, on_plant_time = 0xa9 * 0x7 + 0x1f3c + -0x23db, fill = 0x1 * -0x1aa3 + -0x1 * 0x2e5 + 0x3c * 0x7e, planting = ![];
    },
    on_bomb_beginplant = function() {
        on_plant_time = Globals['Curtime'](), bombsite = Event['GetInt']('site');
        if (bombsite % (-0x161 * -0x5 + 0x282 + 0x5 * -0x1e1) == 0x1c9b + 0x1af2 + -0x378c) bombsiteonplant = 'Bombsite A';
        else bombsiteonplant = 'Bombsite B';
        isbomb = -0x7 * 0x2cf + 0x29e * -0x5 + 0x20e2, planting = !![];
    },
    on_bomb_defused = function() {
        isbomb = -0xcf * -0x29 + 0xf68 + -0x1f * 0x191, on_plant_time = -0x1096 * 0x1 + 0x4a * 0x4 + 0x9e * 0x19, fill = -0x1e2 + 0x116b + -0xf89, planting = ![];
    },
    on_round_start = function() {
        on_plant_time = -0x18d9 + -0x102c + 0x1 * 0x2905, fill = 0x217b + 0x11f * 0x1c + -0x40df, planting = ![], isbomb = 0x1 * 0x254d + 0xd7c + 0x1 * -0x32c9;
    },
    on_bomb_plant = function() {
        on_plant_time = 0x13af + -0x7 * -0x65 + 0x11 * -0x152, isbomb = 0x25 * -0x11 + -0x1 * 0x722 + 0x9dd, fill = 0x1110 + -0x2d * 0xd3 + 0x1407, planting = ![];
    };
Cheat['RegisterCallback']('Draw', 'on_paint1'), Cheat['RegisterCallback']('player_connect_full', 'on_player_connect'), Cheat['RegisterCallback']('bomb_abortplant', 'on_bomb_abortplant'), Cheat['RegisterCallback']('bomb_beginplant', 'on_bomb_beginplant'), Cheat['RegisterCallback']('bomb_defused', 'on_bomb_defused'), Cheat['RegisterCallback']('round_start', 'on_round_start'), Cheat['RegisterCallback']('bomb_planted', 'on_bomb_plant'), Cheat['RegisterCallback']('bomb_exploded', 'on_bomb_exploded'), w = 0x3 * -0x2cf + 0x7 * -0x31 + 0x8 * 0x15e, h2 = -0x23 * 0x73 + -0xef9 * 0x1 + 0x1ee4, access = 0x57c + 0x5f1 + 0x56 * -0x22, alpha = -0x177f + -0x8 * -0x18b + 0xb27, name1 = '', name2 = '', name3 = '', name4 = '', name5 = '', allweapon1 = '', allweapon2 = '', allweapon3 = '', allweapon4 = '', allweapon5 = '';
var time1337 = 0xe81 + -0x3f * -0x57 + 0x2 * -0x11f5,
    globalalpha = 0x1791 + -0xb03 + -0xc8e;

function draw3() {
    var _0x231aba = UI['GetColor'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Script Accent']),
        _0x2ec5cf = [_0x231aba[0x62b + -0xcbf * 0x1 + 0x694] > 0x45 + 0x2172 + -0x1 * 0x2153 ? _0x231aba[0xd * -0xcb + -0x12c4 + 0x1d13] - (0xd77 + -0x3d * -0x45 + -0x1d84) : _0x231aba[-0x16a * -0xf + 0x20ae + 0x1af2 * -0x2], _0x231aba[0x26e4 + 0x261a + -0x4cfd] > -0x2045 + -0x2639 + -0x56 * -0xd3 ? _0x231aba[0x92 * -0x20 + 0x2 * -0xb5a + 0x831 * 0x5] - (-0x18c2 + 0x3 * 0x7be + 0x1ec) : _0x231aba[0x16df + -0x334 * -0x1 + -0x1a12], _0x231aba[-0x6 * -0x49 + -0x49 * 0x7 + 0x4b] > 0x18a1 + 0x15af + -0x2dec ? _0x231aba[0x1 * 0xf20 + -0x2 * -0x71f + -0x1d5c] - (-0xbfd + 0x68 * -0x56 + 0x2f51) : _0x231aba[-0xb35 * -0x3 + -0x522 + -0x1 * 0x1c7b], _0x231aba[-0x22f5 + -0x1 * -0xae5 + 0x1813] > -0xe18 + 0x2 * -0x5c3 + 0x1a02 ? _0x231aba[-0xa9e + 0x2067 + 0x3a1 * -0x6] - (0x1f4c * 0x1 + 0x1102 + -0x2 * 0x17f5) : _0x231aba[0x25a7 + -0x43 * -0x6 + 0xe * -0x2cd]];
    if (Entity['IsAlive'](Entity['GetLocalPlayer']()) == ![]) return;
    x = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'X-pos']), y = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Y-pos']);
    var _0x1f4826 = (-0xc89 + 0x2304 + 0x2a * -0x89) * Globals['Frametime']();
    if (time1337 >= Globals['Curtime']()) {
        globalalpha = globalalpha + _0x1f4826;
        if (globalalpha > -0x15 * 0x1be + 0xcc + -0xb * -0x341) globalalpha = 0x1d0d + -0x568 + -0x17a4;
    } else {
        if (time1337 < Globals['Curtime']()) {
            globalalpha = globalalpha - _0x1f4826;
            if (globalalpha <= -0xcca + 0x1197 + 0x4cd * -0x1) globalalpha = 0xaf0 + 0x250e + 0x2ffe * -0x1;
        }
    }
    alpha = globalalpha * (0x4cc + -0x1885 * -0x1 + 0x3a * -0x7d);
    if (time1337 <= Globals['Curtime']()) return;
    font = Render['AddFont']('undefeated.ttf', 0x16c5 + 0x234d + -0x3a06, 0xb9c + -0xc45 + 0x239), Render['FilledRect'](x + (0x3 * 0xa25 + -0x6 * -0x65f + 0x1 * -0x4477), y + (0x1dd * 0xb + -0x1756 + 0x2de * 0x1), w - (-0x24be + 0xb77 + 0xe * 0x1cf), h2 - (0x119d + 0x11d6 + 0x2367 * -0x1), [0xb68 + 0x1 * 0x12b7 + -0x1e0c, -0x7 * 0x239 + 0x94d + 0x655, 0x762 + -0x21fc + 0x1 * 0x1aad, alpha > 0x7 * 0x55 + -0x167a + 0x14bd ? alpha - (-0x1591 + -0x1 * 0xfd9 + -0x100 * -0x26) : 0xed * -0x17 + 0x253e + 0x551 * -0x3]), Render['GradientRect'](x + (0x19ed + 0x1 * -0x1c14 + -0x1 * -0x259), y - (-0x1 * -0x1a72 + 0x1 * -0x1a18 + -0x57), w - (-0x16ae + 0x15be + 0xfb), -0x9 * 0x29a + 0x2 * -0x448 + 0x3 * 0xaac, 0x7f * 0x15 + 0x1 * 0xe2b + 0x419 * -0x6, [-0x2235 + -0x1 * 0x1369 + 0x359e, 0x267 + -0x52 * 0x9 + -0x7b * -0x1, -0xd6f + -0x1 * -0x22a8 + -0x1539, alpha], [-0x461 * 0x4 + 0xf6b * 0x1 + -0x22c * -0x1, 0x1fc3 + -0xcce + -0x971 * 0x2, 0x272 * -0x4 + 0x18f6 + 0x509 * -0x3, alpha > 0x25ee + 0x98e + -0x2ee6 ? alpha - (-0x54c + 0x1 * -0xd88 + 0x136a) : 0x671 + 0x127 * 0x3 + -0x2 * 0x4f3]), Render['GradientRect'](x + (0x277 + 0x3 * -0x9ad + 0x19 * 0x112), y - (-0x1 * 0xc73 + -0x1 * -0x1bd9 + -0xf62), (w - (0x20 * -0xdf + 0xe31 + 0xdb9)) / (-0x1 * 0x22bd + -0x1 * -0x3b + 0x2284), -0x1f82 + -0x1a06 + 0x3989, 0x7 * 0x473 + -0x1c46 + -0x16f * 0x2, [_0x2ec5cf[0xc0f + 0x209e + -0x2cad], _0x2ec5cf[-0x2066 + -0x5b * 0x35 + 0x7 * 0x752], _0x2ec5cf[0xca2 + -0xb1d * 0x1 + -0x183], alpha], [_0x231aba[-0x267a + -0x570 + -0x1 * -0x2bea], _0x231aba[-0x1 * 0x14c9 + 0x1530 + 0x22 * -0x3], _0x231aba[0x1 * -0x1217 + 0x2aa * 0xb + -0xb35], alpha]), Render['GradientRect'](x + (-0xd * 0x81 + -0x1 * 0x15c1 + 0x98 * 0x30) + (w - (0x210e + 0x4 * 0x2c7 + -0x161 * 0x20)) / (-0x10cc * -0x1 + 0x2133 + -0x31fd), y - (-0x1295 * 0x2 + 0xf1 * -0x15 + 0x38f3), (w - (0xa7b + 0x1416 + -0xa2d * 0x3)) / (0x347 * 0xb + -0xcf0 + -0x171b), -0x1d20 + 0x11b9 + 0xb68, 0x2 * 0xf67 + 0x1630 + -0x34fd, [_0x231aba[-0x1 * 0x1ad + -0x221d + 0x23ca], _0x231aba[0x1d4d + 0x1 * 0x23bc + 0x1042 * -0x4], _0x231aba[-0x23e4 + -0x1d9f * -0x1 + 0x647], alpha], [_0x2ec5cf[0x1e92 + -0x23d9 + 0x547], _0x2ec5cf[-0x60c * 0x3 + -0x49 * -0x1a + 0xabb], _0x2ec5cf[0x1a1a + -0xc04 + 0x385 * -0x4], alpha]), h2 = -0x1cc1 + -0x2d9 + 0x6e * 0x4a, y_y = y, x_x = x;
    name1 != '' && (Render['String'](x_x + (0xea8 + -0x1378 + 0x56b) - (0x13 * -0x18d + 0x1cc + 0xd * 0x228), y_y + (-0x2 * 0x167 + -0xae * 0x39 + 0x299c), 0x135 * 0x17 + -0x1 * -0x841 + 0x5 * -0x734, name1, [-0xd82 + 0x21b5 + -0x1 * 0x1334, -0xbf * 0xb + 0x7af + 0x185, 0x1d1 + 0x17 * -0x6c + 0x8e2, alpha], 0xf83 * 0x1 + 0x1c56 * 0x1 + -0x2bd8), allweapon1 != '' && Render['String'](x_x + (-0x2567 + 0xb21 + 0x1af5), y_y + (-0x7cf + -0x12c9 * -0x1 + -0xaea), -0x1b3d + -0x291 + -0xda * -0x23, allweapon1, [-0x1 * 0x259d + 0xc * 0x1e6 + 0xfd4, -0x18db + -0x477 * -0x1 + 0x1563, 0x134 + -0x1 * -0x67f + 0x3 * -0x23c, alpha], font));
    name2 != '' && (h = h + (0x13e7 + 0x5f8 + -0x19c6 * 0x1), Render['String'](x_x + (0x1cc7 + -0x16fd + 0x1 * -0x52f) - (0x1 * 0x8f6 + -0x1d76 + -0x1 * -0x14dd), y_y + (-0x2521 + 0xd * 0x146 + -0x3 * -0x6e1) + (-0xc4b + -0x349 + -0xfad * -0x1), -0x157f + 0xe37 * 0x2 + -0x6ef, name2, [-0x979 + 0x83 * 0x31 + 0xe9b * -0x1, 0x207 * -0x3 + -0x1501 + 0x1c15, 0x9bc + -0x2 * -0xba8 + -0x200d, alpha], 0x1f99 + 0x1a97 + -0x3a2f), allweapon2 != '' && Render['String'](x_x + (-0x2c0 + 0x15d6 + -0x1267), y_y + (0x166b + -0x210f + 0x2 * 0x55a) + (-0xa3d * -0x1 + 0x1982 + -0xea * 0x27), 0x1410 + 0x2 * 0x445 + 0x1c9a * -0x1, allweapon2, [0x1036 + -0x7 * -0x37a + -0x4b * 0x87, -0x574 * 0x5 + -0x13e4 + 0x3027, 0x1c75 * 0x1 + -0xe8d + 0x1 * -0xce9, alpha], font));
    name3 != '' && (h = h + (-0xd * 0x2ab + 0x1 * -0x1cb6 + 0x3f7e), Render['String'](x_x + (0x93b + -0x20b2 + 0x1812) - (0x20a6 + 0x898 + -0x5d7 * 0x7), y_y + (0x182d + 0x190e + -0x312b) + (0x23d3 + -0x1 * -0xce5 + -0x3086), -0x94a + -0x24b1 + -0x95 * -0x4f, name3, [-0x127 * 0xb + -0x18b * -0x2 + 0xa96, 0x136d * -0x1 + -0x405 + 0x1 * 0x1871, 0x13c4 + -0x1307 + 0x42 * 0x1, alpha], -0x7 * 0xf5 + -0x1476 + 0x72 * 0x3d), allweapon3 != '' && Render['String'](x_x + (-0x1 * -0x1726 + -0x3b * 0x62 + 0x1f), y_y + (0xe5 * 0x21 + -0x1 * 0x977 + -0x13fe) + (-0x1931 * -0x1 + 0x1fb1 + -0x38b * 0x10), 0x2 * 0x635 + -0x1e4 * 0x4 + 0x17 * -0x36, allweapon3, [-0x58b + 0x1 * 0x182d + -0x5 * 0x387, 0x19e2 + 0x161 * -0x1a + 0xaf7, 0x14 * 0xe6 + -0x1dd0 + -0x1 * -0xcd7, alpha], font));
    name4 != '' && (h = h + (0x347 * -0x1 + -0x26a4 + 0x1502 * 0x2), Render['String'](x_x + (0xd * 0x106 + -0x13d0 + 0x71d) - (-0x1 * -0x1228 + 0xecc + -0x2097), y_y + (-0x25a0 * 0x1 + -0x1b9 + -0x3 * -0xd23) + (-0x2338 + -0x1a * 0x130 + 0x4263), 0x2602 + 0xcee + -0xa30 * 0x5, name4, [0x194 + 0xf20 + -0x1 * 0xfb5, 0x1d * 0x151 + 0x49 * -0x1 + 0x1 * -0x24e5, 0x19 * 0x35 + -0x186e + 0xc * 0x1b0, alpha], -0x3 * -0x11c + -0x1435 + 0x10e2), allweapon4 != '' && Render['String'](x_x + (0x178 + -0x4d1 * -0x5 + -0x18de * 0x1), y_y + (-0x14b3 + -0xe7b * 0x1 + 0x1a * 0x15b) + (0x1cf2 + -0x4e * -0x1 + -0x1cf5), 0xb1e + 0x1f79 + -0x2a97, allweapon4, [-0x5a0 + -0x72e + 0x1 * 0xdcd, 0x25b3 + 0x24af * -0x1 + -0x5, 0x160a * 0x1 + -0x185 * 0x11 + -0x4ca * -0x1, alpha], font));
    if (name5 != '') {
        h = h + (0x1 * -0x9f7 + -0x1 * 0x86c + 0x127c), Render['String'](x_x + (0x2 * -0x12ea + -0x1387 * -0x2 + -0x9f) - (-0x1aa4 + -0x863 + -0x5e6 * -0x6), y_y + (-0x1700 + 0xbb0 + 0x1 * 0xb60) + (0x1 * 0x12be + 0x709 * 0x2 + 0x14c * -0x19), -0x41a + -0x140 + 0x55a, name5, [-0x1937 + -0x3 * 0x97 + -0x227 * -0xd, 0x20b1 * -0x1 + -0x1759 + 0x3909, -0x4 * 0x7ae + 0x27 * 0xa3 + -0x1 * -0x6e2, alpha], 0x3ed * -0x6 + -0x1 * 0x12af + -0x151f * -0x2);
        if (allweapon5 != '') {
            if ('IaODN' !== 'Khlaw') Render['String'](x_x + (0x143e + 0x2087 + 0xe2 * -0x3b), y_y + (0x48b * -0x3 + -0x247b + -0x2a4 * -0x13) + (-0xd54 + 0x11c8 + -0x410), -0x1549 + -0x820 + 0x1d69 * 0x1, allweapon5, [-0x2330 + -0x1c3c + 0x406b, 0xa07 + 0x910 + 0x1218 * -0x1, -0x1d4b + -0x566 * -0x7 + -0x780, alpha], font);
            else {
                function _0x55c46d() {
                    _0x279498 = _0x26db9b['GetTarget'](), _0x261b12 = _0x4e4dd1['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Noscope hitchance']), _0x5da2ce = _0x24195d['GetLocalPlayer'](), _0x43b4cf = _0x24694c['GetProp'](_0x2459ba, 'CCSPlayer', 'm_bIsScoped'), !_0x171ac1 && _0x2cafbd['ForceTargetHitchance'](_0x4d2520, _0x33ac7c);
                }
            }
        }
    }
}

function BuyLogs() {
    ent = Entity['GetName'](Entity['GetEntityFromUserID'](Event['GetInt']('userid'))), team = Event['GetInt']('team');
    if (team != Entity['GetProp'](Entity['GetLocalPlayer'](), 'CBaseEntity', 'm_iTeamNum')) {
        name1 == '' ? name1 = Entity['GetName'](Entity['GetEntityFromUserID'](Event['GetInt']('userid'))) : (name2 == '' && name1 != ent && (name2 = ent), name3 == '' && name2 != ent && (name1 != ent && (name3 = ent)), name4 == '' && name3 != ent && (name2 != ent && name1 != ent && (name4 = ent)), name5 == '' && name4 != ent && (name3 != ent && name2 != ent && (name1 != ent && (name5 = ent))));
        ent == name1 && (allweapon1 = allweapon1 + get_icon(Event['GetString']('weapon')));
        if (ent == name2) {
            if ('wLQtG' === 'YHAOj') {
                function _0x8b70e9() {
                    _0x265e2a['splice'](_0x12c3f5['indexOf']('Safe point override'));
                }
            } else allweapon2 = allweapon2 + get_icon(Event['GetString']('weapon'));
        }
        if (ent == name3) {
            if ('CvkTU' !== 'CvkTU') {
                function _0x969429() {
                    return -_0x300440[0x376 * -0x1 + -0x5c0 + 0x937] + _0x28f695[0x1abf + -0x1e16 + 0x1ac * 0x2];
                }
            } else allweapon3 = allweapon3 + get_icon(Event['GetString']('weapon'));
        }
        if (ent == name4) {
            if ('dpyLl' !== 'HjLol') allweapon4 = allweapon4 + get_icon(Event['GetString']('weapon'));
            else {
                function _0x1eb264() {
                    _0x265dbe = _0xd5f411;
                }
            }
        }
        ent == name5 && (allweapon5 = allweapon5 + get_icon(Event['GetString']('weapon')));
    }
}

function roundend() {
    name1 = '', name2 = '', name3 = '', name4 = '', name5 = '', allweapon1 = '', allweapon2 = '', allweapon3 = '', allweapon4 = '', allweapon5 = '';
}

function rountstart() {
    time = Globals['Curtime']() + (0x25b * 0xd + 0x2643 * -0x1 + 0x7ae);
}

function HSVtoRGB(_0xac9cbb, _0xd7a60d, _0x43fac5) {
    var _0x158836, _0x32cff9, _0x1eaf5d, _0x47e1f4, _0x187bc2, _0x23653a, _0x99f358, _0x4a98d7;
    _0x47e1f4 = Math['floor'](_0xac9cbb * (0xc77 * -0x2 + 0xaa5 + 0xe4f)), _0x187bc2 = _0xac9cbb * (0x31d + -0x2 * -0x135a + -0x29cb * 0x1) - _0x47e1f4, _0x23653a = _0x43fac5 * (-0x2309 + -0x909 + 0x2c13 - _0xd7a60d), _0x99f358 = _0x43fac5 * (0x2 * -0x363 + 0x3a6 * -0x2 + -0x3 * -0x4b1 - _0x187bc2 * _0xd7a60d), _0x4a98d7 = _0x43fac5 * (-0x64 + 0x12ae * 0x1 + -0x1 * 0x1249 - (0x1603 + 0x1598 * -0x1 + -0x35 * 0x2 - _0x187bc2) * _0xd7a60d);
    switch (_0x47e1f4 % (0x2451 + -0x24d0 + 0x7 * 0x13)) {
        case -0xd8 * 0x11 + -0x60 * 0x1f + 0x19f8:
            _0x158836 = _0x43fac5, _0x32cff9 = _0x4a98d7, _0x1eaf5d = _0x23653a;
            break;
        case 0xbf5 * 0x3 + 0x1195 + -0x11d1 * 0x3:
            _0x158836 = _0x99f358, _0x32cff9 = _0x43fac5, _0x1eaf5d = _0x23653a;
            break;
        case -0x14c5 + 0x32e + 0x35 * 0x55:
            _0x158836 = _0x23653a, _0x32cff9 = _0x43fac5, _0x1eaf5d = _0x4a98d7;
            break;
        case -0x1fe2 + 0xe * -0x9 + 0x2063:
            _0x158836 = _0x23653a, _0x32cff9 = _0x99f358, _0x1eaf5d = _0x43fac5;
            break;
        case 0x15 * 0xfb + -0xc * -0x324 + -0x3a43:
            _0x158836 = _0x4a98d7, _0x32cff9 = _0x23653a, _0x1eaf5d = _0x43fac5;
            break;
        case -0x9 * -0x9c + 0xfd0 + -0x1547:
            _0x158836 = _0x43fac5, _0x32cff9 = _0x23653a, _0x1eaf5d = _0x99f358;
            break;
    }
    var _0x294b0b = {};
    return _0x294b0b['r'] = Math['round'](_0x158836 * (-0x63b * -0x3 + 0x76 * -0x3b + 0x980)), _0x294b0b['g'] = Math['round'](_0x32cff9 * (0x1 * -0x104f + 0x12a1 + -0x153)), _0x294b0b['b'] = Math['round'](_0x1eaf5d * (0x5 * -0x65b + -0x1894 + 0x1 * 0x395a)), _0x294b0b;
}

function get_icon(_0x1823e9) {
    var _0x2aefa8 = '';
    switch (_0x1823e9) {
        case 'weapon_deagle':
            _0x2aefa8 = 'A';
            break;
        case 'weapon_elite':
            _0x2aefa8 = 'B';
            break;
        case 'weapon_fiveseven':
            _0x2aefa8 = 'C';
            break;
        case 'weapon_glock':
            _0x2aefa8 = 'D';
            break;
        case 'weapon_ak47':
            _0x2aefa8 = 'W';
            break;
        case 'weapon_aug':
            _0x2aefa8 = 'U';
            break;
        case 'weapon_awp':
            _0x2aefa8 = 'Z';
            break;
        case 'weapon_famas':
            _0x2aefa8 = 'R';
            break;
        case 'weapon_m249':
            _0x2aefa8 = 'g';
            break;
        case 'weapon_g3sg1':
            _0x2aefa8 = 'X';
            break;
        case 'weapon_galilar':
            _0x2aefa8 = 'Q';
            break;
        case 'weapon_m4a1':
            _0x2aefa8 = 'S';
            break;
        case 'weapon_m4a1_silencer':
            _0x2aefa8 = 'T';
            break;
        case 'weapon_mac10':
            _0x2aefa8 = 'K';
            break;
        case 'weapon_hkp2000':
            _0x2aefa8 = 'E';
            break;
        case 'weapon_mp5sd':
            _0x2aefa8 = 'N';
            break;
        case 'weapon_ump45':
            _0x2aefa8 = 'L';
            break;
        case 'weapon_xm1014':
            _0x2aefa8 = 'b';
            break;
        case 'weapon_bizon':
            _0x2aefa8 = 'M';
            break;
        case 'weapon_mag7':
            _0x2aefa8 = 'd';
            break;
        case 'weapon_negev':
            _0x2aefa8 = 'f';
            break;
        case 'weapon_sawedoff':
            _0x2aefa8 = 'c';
            break;
        case 'weapon_tec9':
            _0x2aefa8 = 'H';
            break;
        case 'weapon_taser':
            _0x2aefa8 = 'h';
            break;
        case 'weapon_p250':
            _0x2aefa8 = 'F';
            break;
        case 'weapon_mp7':
            _0x2aefa8 = 'N';
            break;
        case 'weapon_mp9':
            _0x2aefa8 = 'O';
            break;
        case 'weapon_nova':
            _0x2aefa8 = 'e';
            break;
        case 'weapon_p90':
            _0x2aefa8 = 'P';
            break;
        case 'weapon_scar20':
            _0x2aefa8 = 'Y';
            break;
        case 'weapon_sg556':
            _0x2aefa8 = 'V';
            break;
        case 'weapon_ssg08':
            _0x2aefa8 = 'a';
            break;
        case 'weapon_flashbang':
            _0x2aefa8 = 'i';
            break;
        case 'weapon_hegrenade':
            _0x2aefa8 = 'j';
            break;
        case 'weapon_smokegrenade':
            _0x2aefa8 = 'k';
            break;
        case 'weapon_molotov':
            _0x2aefa8 = 'l';
            break;
        case 'weapon_decoy':
            _0x2aefa8 = 'm';
            break;
        case 'weapon_incgrenade':
            _0x2aefa8 = 'n';
            break;
        case 'weapon_usp_silencer':
            _0x2aefa8 = 'G';
            break;
        case 'weapon_cz75a':
            _0x2aefa8 = 'I';
            break;
        case 'weapon_revolver':
            _0x2aefa8 = 'J';
            break;
        case 'item_assaultsuit':
            _0x2aefa8 = 'p';
            break;
        case 'item_kevlar':
            _0x2aefa8 = 'q';
            break;
        case 'item_defuser':
            _0x2aefa8 = 'r';
            break;
        default:
            _0x2aefa8 = '';
            break;
    }
    return _0x2aefa8;
}
Global['RegisterCallback']('item_purchase', 'BuyLogs'), Global['RegisterCallback']('round_end', 'roundend'), Global['RegisterCallback']('round_start', 'rountstart'), Global['RegisterCallback']('Draw', 'draw3'), hitboxes = ['generic', 'head', 'chest', 'stomach', 'left arm', 'right arm', 'left leg', 'right leg', '?'];
var shots = 0xd * -0x2e7 + -0x10bb + 0x1b3b * 0x2,
    predicthc = -0x1 * -0x25b6 + 0xa6a + -0x3020,
    safety = 0xbd5 + -0x12 * 0xad + 0x55,
    hitboxName = '',
    choked = 0xd61 * -0x1 + -0x25de + 0x1 * 0x333f,
    exploit = -0x9e6 + 0x1 * 0x1c37 + 0x1 * -0x1251,
    logs = [],
    logsct = [],
    logsalpha = [];

function getHitboxName(_0x3e9dd9) {
    switch (_0x3e9dd9) {
        case 0x91b + -0x2d7 * 0x6 + 0x7ef:
            hitboxName = 'head';
            break;
        case 0x659 + 0xe94 + -0x14ec:
            hitboxName = 'head';
            break;
        case -0x2672 + -0x11af + 0x3823:
            hitboxName = 'stomach';
            break;
        case 0x1 * 0x1069 + -0x1b7b + 0xb15:
            hitboxName = 'stomach';
            break;
        case 0x149 + -0x455 * -0x8 + -0x23ed:
            hitboxName = 'stomach';
            break;
        case -0x22d5 + 0x27f + 0x205b:
            hitboxName = 'chest';
            break;
        case 0x152 + 0xf96 + -0x2 * 0x871:
            hitboxName = 'chest';
            break;
        case -0x17ab + -0x7a5 + 0x1f57:
            hitboxName = 'left leg';
            break;
        case 0xb * -0x170 + 0x2d3 + 0xd05:
            hitboxName = 'right leg';
            break;
        case 0x22f3 + 0xdd3 + -0x30bd:
            hitboxName = 'left leg';
            break;
        case 0x25a5 + 0x1d7a + -0x4315 * 0x1:
            hitboxName = 'right leg';
            break;
        case 0x21b + -0x15e7 + -0x1 * -0x13d7:
            hitboxName = 'left leg';
            break;
        case -0x2275 + -0x17aa + 0x3a2b * 0x1:
            hitboxName = 'right leg';
            break;
        case -0x902 + 0x17 * 0x184 + 0x529 * -0x5:
            hitboxName = 'left arm';
            break;
        case 0x64d * 0x4 + 0x21b9 + -0x3adf:
            hitboxName = 'right arm';
            break;
        case -0x3 * -0x955 + -0x1 * 0x14ab + -0x745:
            hitboxName = 'left arm';
            break;
        case -0x9d4 + 0x1ea0 * 0x1 + 0x52f * -0x4:
            hitboxName = 'left arm';
            break;
        case 0x669 + -0x9fa + 0x3a2:
            hitboxName = 'right arm';
            break;
        case -0x198b + 0x399 + 0x2 * 0xb02:
            hitboxName = 'right arm';
            break;
        default:
            hitboxName = 'body';
    }
    return hitboxName;
}

function HitgroupName(_0x1ba40f) {
    return hitboxes[_0x1ba40f] || 'body';
}
var target = -(0x26 * -0xaf + 0x3d3 * 0x7 + 0xca * -0x1),
    shots_fired = 0x2a * 0x3 + 0x45 * -0x32 + 0xcfc,
    hits = -0xffd * -0x2 + -0x1 * -0x1d61 + -0x3d5b,
    lastUpdate = 0x2162 + 0x865 + -0x29c7,
    logged = ![];

function ragebot_fire() {
    predicthc = Event['GetInt']('hitchance'), safety = Event['GetInt']('safepoint'), hitboxName = getHitboxName(Event['GetInt']('hitbox')), exploit = (Event['GetInt']('exploit') + (0x19b9 + -0x2338 + 0x4c0 * 0x2))['toString'](), target = Event['GetInt']('target_index'), shots_fired++, logged = ![], lastUpdate = Globals['Curtime']();
}

function hitlog() {
    var _0x4b50ad = Entity['GetEntityFromUserID'](Event['GetInt']('userid')),
        _0x262085 = Entity['GetEntityFromUserID'](Event['GetInt']('attacker'));
    if (_0x262085 == Entity['GetLocalPlayer']() && _0x4b50ad == target) hits++;
    var _0x3abfda = 'Hit ';
    me = Entity['GetLocalPlayer'](), hitbox = Event['GetInt']('hitgroup'), target_damage = Event['GetInt']('dmg_health'), target_health = Event['GetInt']('health'), victim = Event['GetInt']('userid'), _0x262085 = Event['GetInt']('attacker'), weapon = Event['GetString']('weapon'), victimIndex = Entity['GetEntityFromUserID'](victim), attackerIndex = Entity['GetEntityFromUserID'](_0x262085), name = Entity['GetName'](victimIndex);
    var _0x105f69 = Globals['Tickcount']() % (-0x41c * -0x2 + -0x1a70 + 0x1249),
        _0x36b609 = '';
    if (exploit == 0x207d * -0x1 + -0x1 * -0x1c32 + 0x44d) _0x36b609 += 'T';
    _0x36b609 += 'B';
    if (hitbox == -0x95b + -0x7e7 + 0x1 * 0x1143) _0x36b609 += 'H';
    safety == 0x8e * 0x2b + 0xe38 + -0x2611 ? safety = 'true' : safety = 'false';
    if (weapon == 'hegrenade') _0x3abfda = 'Naded ';
    else {
        if (weapon == 'inferno') _0x3abfda = 'Burned ';
        else {
            if (weapon == 'knife') _0x3abfda = 'Knifed ';
        }
    }
    if (me == attackerIndex && me != victimIndex) {
        if ('wGieZ' !== 'YoNrm') Cheat['PrintColor']([-0x15f2 + -0x19ee + -0x3039 * -0x1, 0xb0b + -0x7ff * 0x1 + -0x295, -0x1540 + 0x849 * -0x4 + 0x1271 * 0x3, 0x79b * -0x1 + 0x1bc9 + -0x132f], '[onetap] '), _0x3abfda == 'Hit ' ? (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Chat Logging']) == -0x403 * -0x3 + -0x1 * 0x1371 + -0x769 * -0x1 && Cheat['PrintChat'](' \x08[\x03HEAVEN\x08] [\x0c' + shots['toString']() + ('\x08] ') + _0x3abfda + name + ('\'s \x0e') + HitgroupName(hitbox) + ('\x08 for \x07') + target_damage['toString']() + ('\x08 (') + target_health['toString']() + (' remaining) aimed=\x0d') + hitboxName + ('\x08(') + predicthc['toString']() + ('%%) safety=\x03') + safety + ('\x08 \x0a')), Cheat['Print']('[' + shots['toString']() + ('] ') + _0x3abfda + name + ('\'s ') + HitgroupName(hitbox) + (' for ') + target_damage['toString']() + (' (') + target_health['toString']() + (' remaining) aimed=') + hitboxName + '(' + predicthc['toString']() + ('%%) safety=') + safety + (' (') + _0x36b609 + (') (') + _0x105f69 + ':' + exploit + (')\x0a')), logs['push']('[' + shots['toString']() + ('] ') + _0x3abfda + name + ('\'s ') + HitgroupName(hitbox) + (' for ') + target_damage['toString']() + (' (') + target_health['toString']() + (' remaining) aimed=') + hitboxName + '(' + predicthc['toString']() + ('%%) safety=') + safety + (' (') + _0x36b609 + (') (') + _0x105f69 + ':' + exploit + ')')) : (Cheat['Print']('[' + shots['toString']() + ('] ') + _0x3abfda + name + ('\'s ') + HitgroupName(hitbox) + (' for ') + target_damage['toString']() + (' (') + target_health['toString']() + (' remaining) \x0a')), logs['push']('[' + shots['toString']() + ('] ') + _0x3abfda + name + ('\'s ') + HitgroupName(hitbox) + (' for ') + target_damage['toString']() + (' (') + target_health['toString']() + (' remaining)'))), logsct['push'](Globals['Curtime']()), logsalpha['push'](-0x1 * 0xa5d + -0x31 * 0x2b + 0x1397 * 0x1);
        else {
            function _0x5c6e7a() {
                _0x277e78 = 'true';
            }
        }
    }
    if (shots == 0x21 * 0x53 + -0x3 * -0x47d + -0x17c7) shots = -0x327 * -0x1 + 0x140a + -0x1731;
    else shots++;
}

function removelogs() {
    logs['length'] > 0xa27 * -0x3 + -0x4d5 * 0x7 + 0x404e && (logs['shift'](), logsct['shift'](), logsalpha['shift']()), logsct[0x1 * -0x1012 + 0x17b * 0x17 + -0x1 * 0x11fb] + (0x1 * 0x25e5 + -0x1b7c + -2658.5) < Globals['Curtime']() && (logsalpha[-0x1 * -0x14c6 + -0x5 * 0xb9 + 0x17 * -0xbf] -= Globals['Frametime']() * (-0x14d6 + 0x1fc2 + -0x894), logsalpha[-0xa2b + -0x1996 + 0x51 * 0x71] < -0x53b + -0x2a2 * 0x2 + 0xa7f && (logs['shift'](), logsct['shift'](), logsalpha['shift']()));
}

function onDraw() {
    if (!World['GetServerString']()) return;
    if (shots_fired > hits && Globals['Curtime']() - lastUpdate > 0x306 + 0x26 * -0xd6 + 7358.33) {
        if (Globals['Curtime']() - lastUpdate > 0xb8b * -0x3 + 0xfab + -0x12f7 * -0x1) {
            if ('oDHYW' === 'oDHYW') shots_fired = -0xbe8 + 0x8 * -0x97 + 0x10a0, hits = 0x1851 + 0x14fe + -0x2d4f;
            else {
                function _0x25312d() {
                    _0x4eff33['PrintChat'](' \x08[\x03HEAVEN\x08] [\x0c' + _0x4ae793['toString']() + ('\x08] ') + ('\x08Missed ') + _0x3ec518['GetName'](_0x4587d5) + ('\'s \x0e') + _0x259eea + ('\x08(') + _0x4ce84e['toString']() + ('%%) due to \x07') + _0x218d74 + ('\x08, safety=\x03') + _0x5a98b7 + ('\x08 '));
                }
            }
        }
        if (!logged) {
            var _0x3f42a8 = Globals['Tickcount']() % (0x2697 + -0xf9 * -0x17 + -0x3ce6 * 0x1);
            logged = !![];
            var _0x27b876 = 'true',
                _0x5d3346 = '?';
            safety == 0x880 + -0xc8b + 0x40b && (_0x27b876 = 'false');
            if (Entity['IsAlive'](target) == ![]) _0x5d3346 = 'death';
            else {
                if (Entity['IsAlive'](Entity['GetLocalPlayer']()) == ![]) _0x5d3346 = 'dead';
                else {
                    if (safety == !![] && predicthc < 0xc11 * 0x3 + 0x1 * -0x24c9 + -0x1 * -0xe2) _0x5d3346 = 'spread';
                    else {
                        if (safety == !![] && predicthc > -0x1 * -0x2359 + -0x1f82 + -0x1 * 0x38b) _0x5d3346 = 'prediction error';
                    }
                }
            }
            var _0x507410 = '';
            if (exploit == 0xc74 + 0x1 * 0x48b + -0x10fd) _0x507410 += 'T';
            _0x507410 += 'B', Cheat['PrintColor']([-0x75a * 0x1 + 0x27b + -0x2 * -0x29c, -0xd64 + -0x592 + 0x136d, 0x17 * 0xa9 + 0x4 * -0x75 + -0xc6c, -0xd * 0x17e + 0x1b * 0x113 + -0x89c], '[onetap] '), Cheat['Print']('[' + shots['toString']() + ('] ') + ('Missed ') + Entity['GetName'](target) + ('\'s ') + hitboxName + '(' + predicthc['toString']() + ('%%) due to ') + _0x5d3346 + (', safety=') + _0x27b876 + (' (') + _0x507410 + (') (') + _0x3f42a8 + ':' + exploit + (')\x0a')), logs['push']('[' + shots['toString']() + ('] ') + ('Missed ') + Entity['GetName'](target) + ('\'s ') + hitboxName + '(' + predicthc['toString']() + ('%%) due to ') + _0x5d3346 + (', safety=') + _0x27b876 + (' (') + _0x507410 + (') (') + _0x3f42a8 + ':' + exploit + ')');
            UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Enable Chat Logging']) == 0x48b * 0x5 + -0x262 * 0x1 + -0x1454 && Cheat['PrintChat'](' \x08[\x03HEAVEN\x08] [\x0c' + shots['toString']() + ('\x08] ') + ('\x08Missed ') + Entity['GetName'](target) + ('\'s \x0e') + hitboxName + ('\x08(') + predicthc['toString']() + ('%%) due to \x07') + _0x5d3346 + ('\x08, safety=\x03') + _0x27b876 + ('\x08 '));
            logsct['push'](Globals['Curtime']()), logsalpha['push'](-0x50 * 0x7b + 0x2578 + -0x1 * -0x1f7);
            if (shots == 0x1 * 0x5ab + 0x25d3 + -0x2b1b) shots = 0x1c * -0x11f + 0x1147 * 0x1 + 0x1 * 0xe1d;
            else shots++;
        }
    }
}

function main23() {
    Global['RegisterCallback']('ragebot_fire', 'ragebot_fire'), Global['RegisterCallback']('player_hurt', 'hitlog'), Global['RegisterCallback']('Draw', 'onDraw'), Global['RegisterCallback']('Draw', 'removelogs');
}
main23();

function noScope() {
    UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override noscope hitchance']) && (target12 = Ragebot['GetTarget'](), nsHC = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Noscope hitchance']), local = Entity['GetLocalPlayer'](), isScoped = Entity['GetProp'](local, 'CCSPlayer', 'm_bIsScoped'), !isScoped && Ragebot['ForceTargetHitchance'](target12, nsHC));
}
Cheat['RegisterCallback']('CreateMove', 'noScope');

function in_air() {
    if (UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'Override in-air hitchance'])) {
        if ('WVpaq' !== 'EmvQd') in_air1 = Entity['GetProp'](Entity['GetLocalPlayer'](), 'CBasePlayer', 'm_fFlags', 'FL_ONGROUND') == 0x1 * -0x20f6 + -0x2f * 0x56 + 0x31c0 ? !![] : ![], target123 = Ragebot['GetTarget'](), airHC = UI['GetValue'](['Config', 'Heaven Yaw', 'Heaven Yaw', 'In-air hitchance']), local = Entity['GetLocalPlayer'](), in_air1 && Ragebot['ForceTargetHitchance'](target123, airHC);
        else {
            function _0x1dfcb1() {
                _0x558f28['ToggleHotkey'](['Rage', 'Anti Aim', 'General', 'Key assignment', 'AA Direction inverter'], 'Always');
            }
        }
    }
}